
SV Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c80  08005c80  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c88  08005c88  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c88  08005c88  00015c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005c90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000101c  20000078  08005d08  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001094  08005d08  00021094  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000688d  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a50  00000000  00000000  00026970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000690  00000000  00000000  000283c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004d7  00000000  00000000  00028a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000110d3  00000000  00000000  00028f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009181  00000000  00000000  00039ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00065fd4  00000000  00000000  0004317b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b08  00000000  00000000  000a9150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  000aac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005b8c 	.word	0x08005b8c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08005b8c 	.word	0x08005b8c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0010      	movs	r0, r2
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	0019      	movs	r1, r3
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fd7d 	bl	8001d30 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fccd 	bl	8001be0 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fd6f 	bl	8001d30 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fd65 	bl	8001d30 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fcf5 	bl	8001c64 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fceb 	bl	8001c64 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	0008      	movs	r0, r1
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fc73 	bl	8000b90 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fbff 	bl	8000ab8 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fc65 	bl	8000b90 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fc5b 	bl	8000b90 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fc0b 	bl	8000b04 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fc01 	bl	8000b04 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_uldivmod>:
 8000310:	2b00      	cmp	r3, #0
 8000312:	d111      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000314:	2a00      	cmp	r2, #0
 8000316:	d10f      	bne.n	8000338 <__aeabi_uldivmod+0x28>
 8000318:	2900      	cmp	r1, #0
 800031a:	d100      	bne.n	800031e <__aeabi_uldivmod+0xe>
 800031c:	2800      	cmp	r0, #0
 800031e:	d002      	beq.n	8000326 <__aeabi_uldivmod+0x16>
 8000320:	2100      	movs	r1, #0
 8000322:	43c9      	mvns	r1, r1
 8000324:	0008      	movs	r0, r1
 8000326:	b407      	push	{r0, r1, r2}
 8000328:	4802      	ldr	r0, [pc, #8]	; (8000334 <__aeabi_uldivmod+0x24>)
 800032a:	a102      	add	r1, pc, #8	; (adr r1, 8000334 <__aeabi_uldivmod+0x24>)
 800032c:	1840      	adds	r0, r0, r1
 800032e:	9002      	str	r0, [sp, #8]
 8000330:	bd03      	pop	{r0, r1, pc}
 8000332:	46c0      	nop			; (mov r8, r8)
 8000334:	fffffee9 	.word	0xfffffee9
 8000338:	b403      	push	{r0, r1}
 800033a:	4668      	mov	r0, sp
 800033c:	b501      	push	{r0, lr}
 800033e:	9802      	ldr	r0, [sp, #8]
 8000340:	f000 f834 	bl	80003ac <__udivmoddi4>
 8000344:	9b01      	ldr	r3, [sp, #4]
 8000346:	469e      	mov	lr, r3
 8000348:	b002      	add	sp, #8
 800034a:	bc0c      	pop	{r2, r3}
 800034c:	4770      	bx	lr
 800034e:	46c0      	nop			; (mov r8, r8)

08000350 <__aeabi_lmul>:
 8000350:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000352:	46ce      	mov	lr, r9
 8000354:	4699      	mov	r9, r3
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	469c      	mov	ip, r3
 800035a:	0413      	lsls	r3, r2, #16
 800035c:	4647      	mov	r7, r8
 800035e:	0c1b      	lsrs	r3, r3, #16
 8000360:	001d      	movs	r5, r3
 8000362:	000e      	movs	r6, r1
 8000364:	4661      	mov	r1, ip
 8000366:	0404      	lsls	r4, r0, #16
 8000368:	0c24      	lsrs	r4, r4, #16
 800036a:	b580      	push	{r7, lr}
 800036c:	0007      	movs	r7, r0
 800036e:	0c10      	lsrs	r0, r2, #16
 8000370:	434b      	muls	r3, r1
 8000372:	4365      	muls	r5, r4
 8000374:	4341      	muls	r1, r0
 8000376:	4360      	muls	r0, r4
 8000378:	0c2c      	lsrs	r4, r5, #16
 800037a:	18c0      	adds	r0, r0, r3
 800037c:	1820      	adds	r0, r4, r0
 800037e:	468c      	mov	ip, r1
 8000380:	4283      	cmp	r3, r0
 8000382:	d903      	bls.n	800038c <__aeabi_lmul+0x3c>
 8000384:	2380      	movs	r3, #128	; 0x80
 8000386:	025b      	lsls	r3, r3, #9
 8000388:	4698      	mov	r8, r3
 800038a:	44c4      	add	ip, r8
 800038c:	4649      	mov	r1, r9
 800038e:	4379      	muls	r1, r7
 8000390:	4356      	muls	r6, r2
 8000392:	0c03      	lsrs	r3, r0, #16
 8000394:	042d      	lsls	r5, r5, #16
 8000396:	0c2d      	lsrs	r5, r5, #16
 8000398:	1989      	adds	r1, r1, r6
 800039a:	4463      	add	r3, ip
 800039c:	0400      	lsls	r0, r0, #16
 800039e:	1940      	adds	r0, r0, r5
 80003a0:	18c9      	adds	r1, r1, r3
 80003a2:	bcc0      	pop	{r6, r7}
 80003a4:	46b9      	mov	r9, r7
 80003a6:	46b0      	mov	r8, r6
 80003a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)

080003ac <__udivmoddi4>:
 80003ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003ae:	4657      	mov	r7, sl
 80003b0:	464e      	mov	r6, r9
 80003b2:	4645      	mov	r5, r8
 80003b4:	46de      	mov	lr, fp
 80003b6:	b5e0      	push	{r5, r6, r7, lr}
 80003b8:	0004      	movs	r4, r0
 80003ba:	000d      	movs	r5, r1
 80003bc:	4692      	mov	sl, r2
 80003be:	4699      	mov	r9, r3
 80003c0:	b083      	sub	sp, #12
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d830      	bhi.n	8000428 <__udivmoddi4+0x7c>
 80003c6:	d02d      	beq.n	8000424 <__udivmoddi4+0x78>
 80003c8:	4649      	mov	r1, r9
 80003ca:	4650      	mov	r0, sl
 80003cc:	f002 fc62 	bl	8002c94 <__clzdi2>
 80003d0:	0029      	movs	r1, r5
 80003d2:	0006      	movs	r6, r0
 80003d4:	0020      	movs	r0, r4
 80003d6:	f002 fc5d 	bl	8002c94 <__clzdi2>
 80003da:	1a33      	subs	r3, r6, r0
 80003dc:	4698      	mov	r8, r3
 80003de:	3b20      	subs	r3, #32
 80003e0:	d434      	bmi.n	800044c <__udivmoddi4+0xa0>
 80003e2:	469b      	mov	fp, r3
 80003e4:	4653      	mov	r3, sl
 80003e6:	465a      	mov	r2, fp
 80003e8:	4093      	lsls	r3, r2
 80003ea:	4642      	mov	r2, r8
 80003ec:	001f      	movs	r7, r3
 80003ee:	4653      	mov	r3, sl
 80003f0:	4093      	lsls	r3, r2
 80003f2:	001e      	movs	r6, r3
 80003f4:	42af      	cmp	r7, r5
 80003f6:	d83b      	bhi.n	8000470 <__udivmoddi4+0xc4>
 80003f8:	42af      	cmp	r7, r5
 80003fa:	d100      	bne.n	80003fe <__udivmoddi4+0x52>
 80003fc:	e079      	b.n	80004f2 <__udivmoddi4+0x146>
 80003fe:	465b      	mov	r3, fp
 8000400:	1ba4      	subs	r4, r4, r6
 8000402:	41bd      	sbcs	r5, r7
 8000404:	2b00      	cmp	r3, #0
 8000406:	da00      	bge.n	800040a <__udivmoddi4+0x5e>
 8000408:	e076      	b.n	80004f8 <__udivmoddi4+0x14c>
 800040a:	2200      	movs	r2, #0
 800040c:	2300      	movs	r3, #0
 800040e:	9200      	str	r2, [sp, #0]
 8000410:	9301      	str	r3, [sp, #4]
 8000412:	2301      	movs	r3, #1
 8000414:	465a      	mov	r2, fp
 8000416:	4093      	lsls	r3, r2
 8000418:	9301      	str	r3, [sp, #4]
 800041a:	2301      	movs	r3, #1
 800041c:	4642      	mov	r2, r8
 800041e:	4093      	lsls	r3, r2
 8000420:	9300      	str	r3, [sp, #0]
 8000422:	e029      	b.n	8000478 <__udivmoddi4+0xcc>
 8000424:	4282      	cmp	r2, r0
 8000426:	d9cf      	bls.n	80003c8 <__udivmoddi4+0x1c>
 8000428:	2200      	movs	r2, #0
 800042a:	2300      	movs	r3, #0
 800042c:	9200      	str	r2, [sp, #0]
 800042e:	9301      	str	r3, [sp, #4]
 8000430:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <__udivmoddi4+0x8e>
 8000436:	601c      	str	r4, [r3, #0]
 8000438:	605d      	str	r5, [r3, #4]
 800043a:	9800      	ldr	r0, [sp, #0]
 800043c:	9901      	ldr	r1, [sp, #4]
 800043e:	b003      	add	sp, #12
 8000440:	bcf0      	pop	{r4, r5, r6, r7}
 8000442:	46bb      	mov	fp, r7
 8000444:	46b2      	mov	sl, r6
 8000446:	46a9      	mov	r9, r5
 8000448:	46a0      	mov	r8, r4
 800044a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044c:	4642      	mov	r2, r8
 800044e:	469b      	mov	fp, r3
 8000450:	2320      	movs	r3, #32
 8000452:	1a9b      	subs	r3, r3, r2
 8000454:	4652      	mov	r2, sl
 8000456:	40da      	lsrs	r2, r3
 8000458:	4641      	mov	r1, r8
 800045a:	0013      	movs	r3, r2
 800045c:	464a      	mov	r2, r9
 800045e:	408a      	lsls	r2, r1
 8000460:	0017      	movs	r7, r2
 8000462:	4642      	mov	r2, r8
 8000464:	431f      	orrs	r7, r3
 8000466:	4653      	mov	r3, sl
 8000468:	4093      	lsls	r3, r2
 800046a:	001e      	movs	r6, r3
 800046c:	42af      	cmp	r7, r5
 800046e:	d9c3      	bls.n	80003f8 <__udivmoddi4+0x4c>
 8000470:	2200      	movs	r2, #0
 8000472:	2300      	movs	r3, #0
 8000474:	9200      	str	r2, [sp, #0]
 8000476:	9301      	str	r3, [sp, #4]
 8000478:	4643      	mov	r3, r8
 800047a:	2b00      	cmp	r3, #0
 800047c:	d0d8      	beq.n	8000430 <__udivmoddi4+0x84>
 800047e:	07fb      	lsls	r3, r7, #31
 8000480:	0872      	lsrs	r2, r6, #1
 8000482:	431a      	orrs	r2, r3
 8000484:	4646      	mov	r6, r8
 8000486:	087b      	lsrs	r3, r7, #1
 8000488:	e00e      	b.n	80004a8 <__udivmoddi4+0xfc>
 800048a:	42ab      	cmp	r3, r5
 800048c:	d101      	bne.n	8000492 <__udivmoddi4+0xe6>
 800048e:	42a2      	cmp	r2, r4
 8000490:	d80c      	bhi.n	80004ac <__udivmoddi4+0x100>
 8000492:	1aa4      	subs	r4, r4, r2
 8000494:	419d      	sbcs	r5, r3
 8000496:	2001      	movs	r0, #1
 8000498:	1924      	adds	r4, r4, r4
 800049a:	416d      	adcs	r5, r5
 800049c:	2100      	movs	r1, #0
 800049e:	3e01      	subs	r6, #1
 80004a0:	1824      	adds	r4, r4, r0
 80004a2:	414d      	adcs	r5, r1
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d006      	beq.n	80004b6 <__udivmoddi4+0x10a>
 80004a8:	42ab      	cmp	r3, r5
 80004aa:	d9ee      	bls.n	800048a <__udivmoddi4+0xde>
 80004ac:	3e01      	subs	r6, #1
 80004ae:	1924      	adds	r4, r4, r4
 80004b0:	416d      	adcs	r5, r5
 80004b2:	2e00      	cmp	r6, #0
 80004b4:	d1f8      	bne.n	80004a8 <__udivmoddi4+0xfc>
 80004b6:	9800      	ldr	r0, [sp, #0]
 80004b8:	9901      	ldr	r1, [sp, #4]
 80004ba:	465b      	mov	r3, fp
 80004bc:	1900      	adds	r0, r0, r4
 80004be:	4169      	adcs	r1, r5
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	db24      	blt.n	800050e <__udivmoddi4+0x162>
 80004c4:	002b      	movs	r3, r5
 80004c6:	465a      	mov	r2, fp
 80004c8:	4644      	mov	r4, r8
 80004ca:	40d3      	lsrs	r3, r2
 80004cc:	002a      	movs	r2, r5
 80004ce:	40e2      	lsrs	r2, r4
 80004d0:	001c      	movs	r4, r3
 80004d2:	465b      	mov	r3, fp
 80004d4:	0015      	movs	r5, r2
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	db2a      	blt.n	8000530 <__udivmoddi4+0x184>
 80004da:	0026      	movs	r6, r4
 80004dc:	409e      	lsls	r6, r3
 80004de:	0033      	movs	r3, r6
 80004e0:	0026      	movs	r6, r4
 80004e2:	4647      	mov	r7, r8
 80004e4:	40be      	lsls	r6, r7
 80004e6:	0032      	movs	r2, r6
 80004e8:	1a80      	subs	r0, r0, r2
 80004ea:	4199      	sbcs	r1, r3
 80004ec:	9000      	str	r0, [sp, #0]
 80004ee:	9101      	str	r1, [sp, #4]
 80004f0:	e79e      	b.n	8000430 <__udivmoddi4+0x84>
 80004f2:	42a3      	cmp	r3, r4
 80004f4:	d8bc      	bhi.n	8000470 <__udivmoddi4+0xc4>
 80004f6:	e782      	b.n	80003fe <__udivmoddi4+0x52>
 80004f8:	4642      	mov	r2, r8
 80004fa:	2320      	movs	r3, #32
 80004fc:	2100      	movs	r1, #0
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	2200      	movs	r2, #0
 8000502:	9100      	str	r1, [sp, #0]
 8000504:	9201      	str	r2, [sp, #4]
 8000506:	2201      	movs	r2, #1
 8000508:	40da      	lsrs	r2, r3
 800050a:	9201      	str	r2, [sp, #4]
 800050c:	e785      	b.n	800041a <__udivmoddi4+0x6e>
 800050e:	4642      	mov	r2, r8
 8000510:	2320      	movs	r3, #32
 8000512:	1a9b      	subs	r3, r3, r2
 8000514:	002a      	movs	r2, r5
 8000516:	4646      	mov	r6, r8
 8000518:	409a      	lsls	r2, r3
 800051a:	0023      	movs	r3, r4
 800051c:	40f3      	lsrs	r3, r6
 800051e:	4644      	mov	r4, r8
 8000520:	4313      	orrs	r3, r2
 8000522:	002a      	movs	r2, r5
 8000524:	40e2      	lsrs	r2, r4
 8000526:	001c      	movs	r4, r3
 8000528:	465b      	mov	r3, fp
 800052a:	0015      	movs	r5, r2
 800052c:	2b00      	cmp	r3, #0
 800052e:	dad4      	bge.n	80004da <__udivmoddi4+0x12e>
 8000530:	4642      	mov	r2, r8
 8000532:	002f      	movs	r7, r5
 8000534:	2320      	movs	r3, #32
 8000536:	0026      	movs	r6, r4
 8000538:	4097      	lsls	r7, r2
 800053a:	1a9b      	subs	r3, r3, r2
 800053c:	40de      	lsrs	r6, r3
 800053e:	003b      	movs	r3, r7
 8000540:	4333      	orrs	r3, r6
 8000542:	e7cd      	b.n	80004e0 <__udivmoddi4+0x134>

08000544 <__aeabi_fadd>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	4647      	mov	r7, r8
 8000548:	46ce      	mov	lr, r9
 800054a:	024a      	lsls	r2, r1, #9
 800054c:	0243      	lsls	r3, r0, #9
 800054e:	0045      	lsls	r5, r0, #1
 8000550:	0fc4      	lsrs	r4, r0, #31
 8000552:	0a50      	lsrs	r0, r2, #9
 8000554:	4680      	mov	r8, r0
 8000556:	0048      	lsls	r0, r1, #1
 8000558:	0a5b      	lsrs	r3, r3, #9
 800055a:	0e00      	lsrs	r0, r0, #24
 800055c:	0992      	lsrs	r2, r2, #6
 800055e:	4694      	mov	ip, r2
 8000560:	b580      	push	{r7, lr}
 8000562:	001e      	movs	r6, r3
 8000564:	4681      	mov	r9, r0
 8000566:	0002      	movs	r2, r0
 8000568:	0e2d      	lsrs	r5, r5, #24
 800056a:	00df      	lsls	r7, r3, #3
 800056c:	0fc9      	lsrs	r1, r1, #31
 800056e:	428c      	cmp	r4, r1
 8000570:	d024      	beq.n	80005bc <__aeabi_fadd+0x78>
 8000572:	1a28      	subs	r0, r5, r0
 8000574:	2800      	cmp	r0, #0
 8000576:	dd0e      	ble.n	8000596 <__aeabi_fadd+0x52>
 8000578:	2a00      	cmp	r2, #0
 800057a:	d13e      	bne.n	80005fa <__aeabi_fadd+0xb6>
 800057c:	4662      	mov	r2, ip
 800057e:	2a00      	cmp	r2, #0
 8000580:	d100      	bne.n	8000584 <__aeabi_fadd+0x40>
 8000582:	e0fd      	b.n	8000780 <__aeabi_fadd+0x23c>
 8000584:	1e42      	subs	r2, r0, #1
 8000586:	2801      	cmp	r0, #1
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x48>
 800058a:	e137      	b.n	80007fc <__aeabi_fadd+0x2b8>
 800058c:	28ff      	cmp	r0, #255	; 0xff
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x4e>
 8000590:	e0a9      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 8000592:	0010      	movs	r0, r2
 8000594:	e039      	b.n	800060a <__aeabi_fadd+0xc6>
 8000596:	2800      	cmp	r0, #0
 8000598:	d063      	beq.n	8000662 <__aeabi_fadd+0x11e>
 800059a:	464b      	mov	r3, r9
 800059c:	1b52      	subs	r2, r2, r5
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fadd+0x60>
 80005a2:	e0e0      	b.n	8000766 <__aeabi_fadd+0x222>
 80005a4:	2f00      	cmp	r7, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x66>
 80005a8:	e0ce      	b.n	8000748 <__aeabi_fadd+0x204>
 80005aa:	1e53      	subs	r3, r2, #1
 80005ac:	2a01      	cmp	r2, #1
 80005ae:	d100      	bne.n	80005b2 <__aeabi_fadd+0x6e>
 80005b0:	e155      	b.n	800085e <__aeabi_fadd+0x31a>
 80005b2:	2aff      	cmp	r2, #255	; 0xff
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x74>
 80005b6:	e094      	b.n	80006e2 <__aeabi_fadd+0x19e>
 80005b8:	001a      	movs	r2, r3
 80005ba:	e0d9      	b.n	8000770 <__aeabi_fadd+0x22c>
 80005bc:	1a2a      	subs	r2, r5, r0
 80005be:	2a00      	cmp	r2, #0
 80005c0:	dc00      	bgt.n	80005c4 <__aeabi_fadd+0x80>
 80005c2:	e099      	b.n	80006f8 <__aeabi_fadd+0x1b4>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d062      	beq.n	800068e <__aeabi_fadd+0x14a>
 80005c8:	2dff      	cmp	r5, #255	; 0xff
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x8a>
 80005cc:	e08b      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	4661      	mov	r1, ip
 80005d2:	04db      	lsls	r3, r3, #19
 80005d4:	4319      	orrs	r1, r3
 80005d6:	468c      	mov	ip, r1
 80005d8:	2a1b      	cmp	r2, #27
 80005da:	dc00      	bgt.n	80005de <__aeabi_fadd+0x9a>
 80005dc:	e0d2      	b.n	8000784 <__aeabi_fadd+0x240>
 80005de:	2301      	movs	r3, #1
 80005e0:	19db      	adds	r3, r3, r7
 80005e2:	015a      	lsls	r2, r3, #5
 80005e4:	d56a      	bpl.n	80006bc <__aeabi_fadd+0x178>
 80005e6:	3501      	adds	r5, #1
 80005e8:	2dff      	cmp	r5, #255	; 0xff
 80005ea:	d05b      	beq.n	80006a4 <__aeabi_fadd+0x160>
 80005ec:	2201      	movs	r2, #1
 80005ee:	49a3      	ldr	r1, [pc, #652]	; (800087c <__aeabi_fadd+0x338>)
 80005f0:	401a      	ands	r2, r3
 80005f2:	085b      	lsrs	r3, r3, #1
 80005f4:	400b      	ands	r3, r1
 80005f6:	4313      	orrs	r3, r2
 80005f8:	e01c      	b.n	8000634 <__aeabi_fadd+0xf0>
 80005fa:	2dff      	cmp	r5, #255	; 0xff
 80005fc:	d100      	bne.n	8000600 <__aeabi_fadd+0xbc>
 80005fe:	e072      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	4662      	mov	r2, ip
 8000604:	04db      	lsls	r3, r3, #19
 8000606:	431a      	orrs	r2, r3
 8000608:	4694      	mov	ip, r2
 800060a:	281b      	cmp	r0, #27
 800060c:	dc00      	bgt.n	8000610 <__aeabi_fadd+0xcc>
 800060e:	e090      	b.n	8000732 <__aeabi_fadd+0x1ee>
 8000610:	2301      	movs	r3, #1
 8000612:	1afb      	subs	r3, r7, r3
 8000614:	015a      	lsls	r2, r3, #5
 8000616:	d551      	bpl.n	80006bc <__aeabi_fadd+0x178>
 8000618:	019b      	lsls	r3, r3, #6
 800061a:	099e      	lsrs	r6, r3, #6
 800061c:	0030      	movs	r0, r6
 800061e:	f002 fb1b 	bl	8002c58 <__clzsi2>
 8000622:	0033      	movs	r3, r6
 8000624:	3805      	subs	r0, #5
 8000626:	4083      	lsls	r3, r0
 8000628:	4285      	cmp	r5, r0
 800062a:	dc00      	bgt.n	800062e <__aeabi_fadd+0xea>
 800062c:	e075      	b.n	800071a <__aeabi_fadd+0x1d6>
 800062e:	4a94      	ldr	r2, [pc, #592]	; (8000880 <__aeabi_fadd+0x33c>)
 8000630:	1a2d      	subs	r5, r5, r0
 8000632:	4013      	ands	r3, r2
 8000634:	075a      	lsls	r2, r3, #29
 8000636:	d004      	beq.n	8000642 <__aeabi_fadd+0xfe>
 8000638:	220f      	movs	r2, #15
 800063a:	401a      	ands	r2, r3
 800063c:	2a04      	cmp	r2, #4
 800063e:	d000      	beq.n	8000642 <__aeabi_fadd+0xfe>
 8000640:	3304      	adds	r3, #4
 8000642:	015a      	lsls	r2, r3, #5
 8000644:	d53c      	bpl.n	80006c0 <__aeabi_fadd+0x17c>
 8000646:	1c68      	adds	r0, r5, #1
 8000648:	2dfe      	cmp	r5, #254	; 0xfe
 800064a:	d02b      	beq.n	80006a4 <__aeabi_fadd+0x160>
 800064c:	019b      	lsls	r3, r3, #6
 800064e:	0a5e      	lsrs	r6, r3, #9
 8000650:	b2c0      	uxtb	r0, r0
 8000652:	05c0      	lsls	r0, r0, #23
 8000654:	4330      	orrs	r0, r6
 8000656:	07e4      	lsls	r4, r4, #31
 8000658:	4320      	orrs	r0, r4
 800065a:	bcc0      	pop	{r6, r7}
 800065c:	46b9      	mov	r9, r7
 800065e:	46b0      	mov	r8, r6
 8000660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000662:	20fe      	movs	r0, #254	; 0xfe
 8000664:	1c6a      	adds	r2, r5, #1
 8000666:	4210      	tst	r0, r2
 8000668:	d172      	bne.n	8000750 <__aeabi_fadd+0x20c>
 800066a:	2d00      	cmp	r5, #0
 800066c:	d000      	beq.n	8000670 <__aeabi_fadd+0x12c>
 800066e:	e0ae      	b.n	80007ce <__aeabi_fadd+0x28a>
 8000670:	2f00      	cmp	r7, #0
 8000672:	d100      	bne.n	8000676 <__aeabi_fadd+0x132>
 8000674:	e0ec      	b.n	8000850 <__aeabi_fadd+0x30c>
 8000676:	4663      	mov	r3, ip
 8000678:	2000      	movs	r0, #0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0e9      	beq.n	8000652 <__aeabi_fadd+0x10e>
 800067e:	1afb      	subs	r3, r7, r3
 8000680:	015a      	lsls	r2, r3, #5
 8000682:	d400      	bmi.n	8000686 <__aeabi_fadd+0x142>
 8000684:	e0f3      	b.n	800086e <__aeabi_fadd+0x32a>
 8000686:	4663      	mov	r3, ip
 8000688:	000c      	movs	r4, r1
 800068a:	1bdb      	subs	r3, r3, r7
 800068c:	e7d2      	b.n	8000634 <__aeabi_fadd+0xf0>
 800068e:	4661      	mov	r1, ip
 8000690:	2900      	cmp	r1, #0
 8000692:	d05b      	beq.n	800074c <__aeabi_fadd+0x208>
 8000694:	1e51      	subs	r1, r2, #1
 8000696:	2a01      	cmp	r2, #1
 8000698:	d100      	bne.n	800069c <__aeabi_fadd+0x158>
 800069a:	e0a7      	b.n	80007ec <__aeabi_fadd+0x2a8>
 800069c:	2aff      	cmp	r2, #255	; 0xff
 800069e:	d022      	beq.n	80006e6 <__aeabi_fadd+0x1a2>
 80006a0:	000a      	movs	r2, r1
 80006a2:	e799      	b.n	80005d8 <__aeabi_fadd+0x94>
 80006a4:	20ff      	movs	r0, #255	; 0xff
 80006a6:	2600      	movs	r6, #0
 80006a8:	e7d3      	b.n	8000652 <__aeabi_fadd+0x10e>
 80006aa:	21fe      	movs	r1, #254	; 0xfe
 80006ac:	1c6a      	adds	r2, r5, #1
 80006ae:	4211      	tst	r1, r2
 80006b0:	d073      	beq.n	800079a <__aeabi_fadd+0x256>
 80006b2:	2aff      	cmp	r2, #255	; 0xff
 80006b4:	d0f6      	beq.n	80006a4 <__aeabi_fadd+0x160>
 80006b6:	0015      	movs	r5, r2
 80006b8:	4467      	add	r7, ip
 80006ba:	087b      	lsrs	r3, r7, #1
 80006bc:	075a      	lsls	r2, r3, #29
 80006be:	d1bb      	bne.n	8000638 <__aeabi_fadd+0xf4>
 80006c0:	08db      	lsrs	r3, r3, #3
 80006c2:	2dff      	cmp	r5, #255	; 0xff
 80006c4:	d00f      	beq.n	80006e6 <__aeabi_fadd+0x1a2>
 80006c6:	025b      	lsls	r3, r3, #9
 80006c8:	0a5e      	lsrs	r6, r3, #9
 80006ca:	b2e8      	uxtb	r0, r5
 80006cc:	e7c1      	b.n	8000652 <__aeabi_fadd+0x10e>
 80006ce:	4662      	mov	r2, ip
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d008      	beq.n	80006e6 <__aeabi_fadd+0x1a2>
 80006d4:	2280      	movs	r2, #128	; 0x80
 80006d6:	03d2      	lsls	r2, r2, #15
 80006d8:	4213      	tst	r3, r2
 80006da:	d004      	beq.n	80006e6 <__aeabi_fadd+0x1a2>
 80006dc:	4640      	mov	r0, r8
 80006de:	4210      	tst	r0, r2
 80006e0:	d101      	bne.n	80006e6 <__aeabi_fadd+0x1a2>
 80006e2:	000c      	movs	r4, r1
 80006e4:	4643      	mov	r3, r8
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0dc      	beq.n	80006a4 <__aeabi_fadd+0x160>
 80006ea:	2680      	movs	r6, #128	; 0x80
 80006ec:	03f6      	lsls	r6, r6, #15
 80006ee:	431e      	orrs	r6, r3
 80006f0:	0276      	lsls	r6, r6, #9
 80006f2:	20ff      	movs	r0, #255	; 0xff
 80006f4:	0a76      	lsrs	r6, r6, #9
 80006f6:	e7ac      	b.n	8000652 <__aeabi_fadd+0x10e>
 80006f8:	2a00      	cmp	r2, #0
 80006fa:	d0d6      	beq.n	80006aa <__aeabi_fadd+0x166>
 80006fc:	1b42      	subs	r2, r0, r5
 80006fe:	2d00      	cmp	r5, #0
 8000700:	d05c      	beq.n	80007bc <__aeabi_fadd+0x278>
 8000702:	28ff      	cmp	r0, #255	; 0xff
 8000704:	d0ee      	beq.n	80006e4 <__aeabi_fadd+0x1a0>
 8000706:	2380      	movs	r3, #128	; 0x80
 8000708:	04db      	lsls	r3, r3, #19
 800070a:	431f      	orrs	r7, r3
 800070c:	2a1b      	cmp	r2, #27
 800070e:	dc00      	bgt.n	8000712 <__aeabi_fadd+0x1ce>
 8000710:	e082      	b.n	8000818 <__aeabi_fadd+0x2d4>
 8000712:	2301      	movs	r3, #1
 8000714:	464d      	mov	r5, r9
 8000716:	4463      	add	r3, ip
 8000718:	e763      	b.n	80005e2 <__aeabi_fadd+0x9e>
 800071a:	2220      	movs	r2, #32
 800071c:	1b40      	subs	r0, r0, r5
 800071e:	3001      	adds	r0, #1
 8000720:	1a12      	subs	r2, r2, r0
 8000722:	0019      	movs	r1, r3
 8000724:	4093      	lsls	r3, r2
 8000726:	40c1      	lsrs	r1, r0
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	4193      	sbcs	r3, r2
 800072c:	2500      	movs	r5, #0
 800072e:	430b      	orrs	r3, r1
 8000730:	e780      	b.n	8000634 <__aeabi_fadd+0xf0>
 8000732:	2320      	movs	r3, #32
 8000734:	4661      	mov	r1, ip
 8000736:	1a1b      	subs	r3, r3, r0
 8000738:	4099      	lsls	r1, r3
 800073a:	4662      	mov	r2, ip
 800073c:	000b      	movs	r3, r1
 800073e:	40c2      	lsrs	r2, r0
 8000740:	1e59      	subs	r1, r3, #1
 8000742:	418b      	sbcs	r3, r1
 8000744:	4313      	orrs	r3, r2
 8000746:	e764      	b.n	8000612 <__aeabi_fadd+0xce>
 8000748:	000c      	movs	r4, r1
 800074a:	4643      	mov	r3, r8
 800074c:	0015      	movs	r5, r2
 800074e:	e7b8      	b.n	80006c2 <__aeabi_fadd+0x17e>
 8000750:	4663      	mov	r3, ip
 8000752:	1afe      	subs	r6, r7, r3
 8000754:	0173      	lsls	r3, r6, #5
 8000756:	d445      	bmi.n	80007e4 <__aeabi_fadd+0x2a0>
 8000758:	2e00      	cmp	r6, #0
 800075a:	d000      	beq.n	800075e <__aeabi_fadd+0x21a>
 800075c:	e75e      	b.n	800061c <__aeabi_fadd+0xd8>
 800075e:	2400      	movs	r4, #0
 8000760:	2000      	movs	r0, #0
 8000762:	2600      	movs	r6, #0
 8000764:	e775      	b.n	8000652 <__aeabi_fadd+0x10e>
 8000766:	2bff      	cmp	r3, #255	; 0xff
 8000768:	d0bb      	beq.n	80006e2 <__aeabi_fadd+0x19e>
 800076a:	2380      	movs	r3, #128	; 0x80
 800076c:	04db      	lsls	r3, r3, #19
 800076e:	431f      	orrs	r7, r3
 8000770:	2a1b      	cmp	r2, #27
 8000772:	dd47      	ble.n	8000804 <__aeabi_fadd+0x2c0>
 8000774:	2301      	movs	r3, #1
 8000776:	4662      	mov	r2, ip
 8000778:	000c      	movs	r4, r1
 800077a:	464d      	mov	r5, r9
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	e749      	b.n	8000614 <__aeabi_fadd+0xd0>
 8000780:	0005      	movs	r5, r0
 8000782:	e79e      	b.n	80006c2 <__aeabi_fadd+0x17e>
 8000784:	4661      	mov	r1, ip
 8000786:	2320      	movs	r3, #32
 8000788:	40d1      	lsrs	r1, r2
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	4662      	mov	r2, ip
 800078e:	409a      	lsls	r2, r3
 8000790:	0013      	movs	r3, r2
 8000792:	1e5a      	subs	r2, r3, #1
 8000794:	4193      	sbcs	r3, r2
 8000796:	430b      	orrs	r3, r1
 8000798:	e722      	b.n	80005e0 <__aeabi_fadd+0x9c>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d146      	bne.n	800082c <__aeabi_fadd+0x2e8>
 800079e:	2f00      	cmp	r7, #0
 80007a0:	d062      	beq.n	8000868 <__aeabi_fadd+0x324>
 80007a2:	4663      	mov	r3, ip
 80007a4:	2000      	movs	r0, #0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x268>
 80007aa:	e752      	b.n	8000652 <__aeabi_fadd+0x10e>
 80007ac:	003b      	movs	r3, r7
 80007ae:	4463      	add	r3, ip
 80007b0:	015a      	lsls	r2, r3, #5
 80007b2:	d583      	bpl.n	80006bc <__aeabi_fadd+0x178>
 80007b4:	4a32      	ldr	r2, [pc, #200]	; (8000880 <__aeabi_fadd+0x33c>)
 80007b6:	3501      	adds	r5, #1
 80007b8:	4013      	ands	r3, r2
 80007ba:	e77f      	b.n	80006bc <__aeabi_fadd+0x178>
 80007bc:	2f00      	cmp	r7, #0
 80007be:	d0c4      	beq.n	800074a <__aeabi_fadd+0x206>
 80007c0:	1e53      	subs	r3, r2, #1
 80007c2:	2a01      	cmp	r2, #1
 80007c4:	d012      	beq.n	80007ec <__aeabi_fadd+0x2a8>
 80007c6:	2aff      	cmp	r2, #255	; 0xff
 80007c8:	d08c      	beq.n	80006e4 <__aeabi_fadd+0x1a0>
 80007ca:	001a      	movs	r2, r3
 80007cc:	e79e      	b.n	800070c <__aeabi_fadd+0x1c8>
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x290>
 80007d2:	e77c      	b.n	80006ce <__aeabi_fadd+0x18a>
 80007d4:	4663      	mov	r3, ip
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d183      	bne.n	80006e2 <__aeabi_fadd+0x19e>
 80007da:	2680      	movs	r6, #128	; 0x80
 80007dc:	2400      	movs	r4, #0
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	03f6      	lsls	r6, r6, #15
 80007e2:	e736      	b.n	8000652 <__aeabi_fadd+0x10e>
 80007e4:	4663      	mov	r3, ip
 80007e6:	000c      	movs	r4, r1
 80007e8:	1bde      	subs	r6, r3, r7
 80007ea:	e717      	b.n	800061c <__aeabi_fadd+0xd8>
 80007ec:	003b      	movs	r3, r7
 80007ee:	4463      	add	r3, ip
 80007f0:	2501      	movs	r5, #1
 80007f2:	015a      	lsls	r2, r3, #5
 80007f4:	d400      	bmi.n	80007f8 <__aeabi_fadd+0x2b4>
 80007f6:	e761      	b.n	80006bc <__aeabi_fadd+0x178>
 80007f8:	2502      	movs	r5, #2
 80007fa:	e6f7      	b.n	80005ec <__aeabi_fadd+0xa8>
 80007fc:	4663      	mov	r3, ip
 80007fe:	2501      	movs	r5, #1
 8000800:	1afb      	subs	r3, r7, r3
 8000802:	e707      	b.n	8000614 <__aeabi_fadd+0xd0>
 8000804:	2320      	movs	r3, #32
 8000806:	1a9b      	subs	r3, r3, r2
 8000808:	0038      	movs	r0, r7
 800080a:	409f      	lsls	r7, r3
 800080c:	003b      	movs	r3, r7
 800080e:	40d0      	lsrs	r0, r2
 8000810:	1e5a      	subs	r2, r3, #1
 8000812:	4193      	sbcs	r3, r2
 8000814:	4303      	orrs	r3, r0
 8000816:	e7ae      	b.n	8000776 <__aeabi_fadd+0x232>
 8000818:	2320      	movs	r3, #32
 800081a:	1a9b      	subs	r3, r3, r2
 800081c:	0039      	movs	r1, r7
 800081e:	409f      	lsls	r7, r3
 8000820:	003b      	movs	r3, r7
 8000822:	40d1      	lsrs	r1, r2
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4193      	sbcs	r3, r2
 8000828:	430b      	orrs	r3, r1
 800082a:	e773      	b.n	8000714 <__aeabi_fadd+0x1d0>
 800082c:	2f00      	cmp	r7, #0
 800082e:	d100      	bne.n	8000832 <__aeabi_fadd+0x2ee>
 8000830:	e758      	b.n	80006e4 <__aeabi_fadd+0x1a0>
 8000832:	4662      	mov	r2, ip
 8000834:	2a00      	cmp	r2, #0
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x2f6>
 8000838:	e755      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	03d2      	lsls	r2, r2, #15
 800083e:	4213      	tst	r3, r2
 8000840:	d100      	bne.n	8000844 <__aeabi_fadd+0x300>
 8000842:	e750      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 8000844:	4641      	mov	r1, r8
 8000846:	4211      	tst	r1, r2
 8000848:	d000      	beq.n	800084c <__aeabi_fadd+0x308>
 800084a:	e74c      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 800084c:	4643      	mov	r3, r8
 800084e:	e74a      	b.n	80006e6 <__aeabi_fadd+0x1a2>
 8000850:	4663      	mov	r3, ip
 8000852:	2b00      	cmp	r3, #0
 8000854:	d083      	beq.n	800075e <__aeabi_fadd+0x21a>
 8000856:	000c      	movs	r4, r1
 8000858:	4646      	mov	r6, r8
 800085a:	2000      	movs	r0, #0
 800085c:	e6f9      	b.n	8000652 <__aeabi_fadd+0x10e>
 800085e:	4663      	mov	r3, ip
 8000860:	000c      	movs	r4, r1
 8000862:	1bdb      	subs	r3, r3, r7
 8000864:	3501      	adds	r5, #1
 8000866:	e6d5      	b.n	8000614 <__aeabi_fadd+0xd0>
 8000868:	4646      	mov	r6, r8
 800086a:	2000      	movs	r0, #0
 800086c:	e6f1      	b.n	8000652 <__aeabi_fadd+0x10e>
 800086e:	2b00      	cmp	r3, #0
 8000870:	d000      	beq.n	8000874 <__aeabi_fadd+0x330>
 8000872:	e723      	b.n	80006bc <__aeabi_fadd+0x178>
 8000874:	2400      	movs	r4, #0
 8000876:	2600      	movs	r6, #0
 8000878:	e6eb      	b.n	8000652 <__aeabi_fadd+0x10e>
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	7dffffff 	.word	0x7dffffff
 8000880:	fbffffff 	.word	0xfbffffff

08000884 <__aeabi_fdiv>:
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	464f      	mov	r7, r9
 8000888:	4646      	mov	r6, r8
 800088a:	46d6      	mov	lr, sl
 800088c:	0245      	lsls	r5, r0, #9
 800088e:	b5c0      	push	{r6, r7, lr}
 8000890:	0047      	lsls	r7, r0, #1
 8000892:	1c0c      	adds	r4, r1, #0
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	0e3f      	lsrs	r7, r7, #24
 8000898:	0fc6      	lsrs	r6, r0, #31
 800089a:	2f00      	cmp	r7, #0
 800089c:	d100      	bne.n	80008a0 <__aeabi_fdiv+0x1c>
 800089e:	e06f      	b.n	8000980 <__aeabi_fdiv+0xfc>
 80008a0:	2fff      	cmp	r7, #255	; 0xff
 80008a2:	d100      	bne.n	80008a6 <__aeabi_fdiv+0x22>
 80008a4:	e074      	b.n	8000990 <__aeabi_fdiv+0x10c>
 80008a6:	2300      	movs	r3, #0
 80008a8:	2280      	movs	r2, #128	; 0x80
 80008aa:	4699      	mov	r9, r3
 80008ac:	469a      	mov	sl, r3
 80008ae:	00ed      	lsls	r5, r5, #3
 80008b0:	04d2      	lsls	r2, r2, #19
 80008b2:	4315      	orrs	r5, r2
 80008b4:	3f7f      	subs	r7, #127	; 0x7f
 80008b6:	0263      	lsls	r3, r4, #9
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	4698      	mov	r8, r3
 80008bc:	0063      	lsls	r3, r4, #1
 80008be:	0e1b      	lsrs	r3, r3, #24
 80008c0:	0fe4      	lsrs	r4, r4, #31
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d04d      	beq.n	8000962 <__aeabi_fdiv+0xde>
 80008c6:	2bff      	cmp	r3, #255	; 0xff
 80008c8:	d045      	beq.n	8000956 <__aeabi_fdiv+0xd2>
 80008ca:	4642      	mov	r2, r8
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	00d2      	lsls	r2, r2, #3
 80008d0:	04c9      	lsls	r1, r1, #19
 80008d2:	4311      	orrs	r1, r2
 80008d4:	4688      	mov	r8, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	3b7f      	subs	r3, #127	; 0x7f
 80008da:	0031      	movs	r1, r6
 80008dc:	1aff      	subs	r7, r7, r3
 80008de:	464b      	mov	r3, r9
 80008e0:	4061      	eors	r1, r4
 80008e2:	b2c9      	uxtb	r1, r1
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d900      	bls.n	80008ea <__aeabi_fdiv+0x66>
 80008e8:	e0b8      	b.n	8000a5c <__aeabi_fdiv+0x1d8>
 80008ea:	4870      	ldr	r0, [pc, #448]	; (8000aac <__aeabi_fdiv+0x228>)
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	58c3      	ldr	r3, [r0, r3]
 80008f0:	469f      	mov	pc, r3
 80008f2:	2300      	movs	r3, #0
 80008f4:	4698      	mov	r8, r3
 80008f6:	0026      	movs	r6, r4
 80008f8:	4645      	mov	r5, r8
 80008fa:	4692      	mov	sl, r2
 80008fc:	4653      	mov	r3, sl
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d100      	bne.n	8000904 <__aeabi_fdiv+0x80>
 8000902:	e08d      	b.n	8000a20 <__aeabi_fdiv+0x19c>
 8000904:	2b03      	cmp	r3, #3
 8000906:	d100      	bne.n	800090a <__aeabi_fdiv+0x86>
 8000908:	e0a1      	b.n	8000a4e <__aeabi_fdiv+0x1ca>
 800090a:	2b01      	cmp	r3, #1
 800090c:	d018      	beq.n	8000940 <__aeabi_fdiv+0xbc>
 800090e:	003b      	movs	r3, r7
 8000910:	337f      	adds	r3, #127	; 0x7f
 8000912:	2b00      	cmp	r3, #0
 8000914:	dd6d      	ble.n	80009f2 <__aeabi_fdiv+0x16e>
 8000916:	076a      	lsls	r2, r5, #29
 8000918:	d004      	beq.n	8000924 <__aeabi_fdiv+0xa0>
 800091a:	220f      	movs	r2, #15
 800091c:	402a      	ands	r2, r5
 800091e:	2a04      	cmp	r2, #4
 8000920:	d000      	beq.n	8000924 <__aeabi_fdiv+0xa0>
 8000922:	3504      	adds	r5, #4
 8000924:	012a      	lsls	r2, r5, #4
 8000926:	d503      	bpl.n	8000930 <__aeabi_fdiv+0xac>
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <__aeabi_fdiv+0x22c>)
 800092a:	401d      	ands	r5, r3
 800092c:	003b      	movs	r3, r7
 800092e:	3380      	adds	r3, #128	; 0x80
 8000930:	2bfe      	cmp	r3, #254	; 0xfe
 8000932:	dd00      	ble.n	8000936 <__aeabi_fdiv+0xb2>
 8000934:	e074      	b.n	8000a20 <__aeabi_fdiv+0x19c>
 8000936:	01aa      	lsls	r2, r5, #6
 8000938:	0a52      	lsrs	r2, r2, #9
 800093a:	b2d8      	uxtb	r0, r3
 800093c:	e002      	b.n	8000944 <__aeabi_fdiv+0xc0>
 800093e:	000e      	movs	r6, r1
 8000940:	2000      	movs	r0, #0
 8000942:	2200      	movs	r2, #0
 8000944:	05c0      	lsls	r0, r0, #23
 8000946:	07f6      	lsls	r6, r6, #31
 8000948:	4310      	orrs	r0, r2
 800094a:	4330      	orrs	r0, r6
 800094c:	bce0      	pop	{r5, r6, r7}
 800094e:	46ba      	mov	sl, r7
 8000950:	46b1      	mov	r9, r6
 8000952:	46a8      	mov	r8, r5
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000956:	4643      	mov	r3, r8
 8000958:	2b00      	cmp	r3, #0
 800095a:	d13f      	bne.n	80009dc <__aeabi_fdiv+0x158>
 800095c:	2202      	movs	r2, #2
 800095e:	3fff      	subs	r7, #255	; 0xff
 8000960:	e003      	b.n	800096a <__aeabi_fdiv+0xe6>
 8000962:	4643      	mov	r3, r8
 8000964:	2b00      	cmp	r3, #0
 8000966:	d12d      	bne.n	80009c4 <__aeabi_fdiv+0x140>
 8000968:	2201      	movs	r2, #1
 800096a:	0031      	movs	r1, r6
 800096c:	464b      	mov	r3, r9
 800096e:	4061      	eors	r1, r4
 8000970:	b2c9      	uxtb	r1, r1
 8000972:	4313      	orrs	r3, r2
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d838      	bhi.n	80009ea <__aeabi_fdiv+0x166>
 8000978:	484e      	ldr	r0, [pc, #312]	; (8000ab4 <__aeabi_fdiv+0x230>)
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	58c3      	ldr	r3, [r0, r3]
 800097e:	469f      	mov	pc, r3
 8000980:	2d00      	cmp	r5, #0
 8000982:	d113      	bne.n	80009ac <__aeabi_fdiv+0x128>
 8000984:	2304      	movs	r3, #4
 8000986:	4699      	mov	r9, r3
 8000988:	3b03      	subs	r3, #3
 800098a:	2700      	movs	r7, #0
 800098c:	469a      	mov	sl, r3
 800098e:	e792      	b.n	80008b6 <__aeabi_fdiv+0x32>
 8000990:	2d00      	cmp	r5, #0
 8000992:	d105      	bne.n	80009a0 <__aeabi_fdiv+0x11c>
 8000994:	2308      	movs	r3, #8
 8000996:	4699      	mov	r9, r3
 8000998:	3b06      	subs	r3, #6
 800099a:	27ff      	movs	r7, #255	; 0xff
 800099c:	469a      	mov	sl, r3
 800099e:	e78a      	b.n	80008b6 <__aeabi_fdiv+0x32>
 80009a0:	230c      	movs	r3, #12
 80009a2:	4699      	mov	r9, r3
 80009a4:	3b09      	subs	r3, #9
 80009a6:	27ff      	movs	r7, #255	; 0xff
 80009a8:	469a      	mov	sl, r3
 80009aa:	e784      	b.n	80008b6 <__aeabi_fdiv+0x32>
 80009ac:	0028      	movs	r0, r5
 80009ae:	f002 f953 	bl	8002c58 <__clzsi2>
 80009b2:	2776      	movs	r7, #118	; 0x76
 80009b4:	1f43      	subs	r3, r0, #5
 80009b6:	409d      	lsls	r5, r3
 80009b8:	2300      	movs	r3, #0
 80009ba:	427f      	negs	r7, r7
 80009bc:	4699      	mov	r9, r3
 80009be:	469a      	mov	sl, r3
 80009c0:	1a3f      	subs	r7, r7, r0
 80009c2:	e778      	b.n	80008b6 <__aeabi_fdiv+0x32>
 80009c4:	4640      	mov	r0, r8
 80009c6:	f002 f947 	bl	8002c58 <__clzsi2>
 80009ca:	4642      	mov	r2, r8
 80009cc:	1f43      	subs	r3, r0, #5
 80009ce:	409a      	lsls	r2, r3
 80009d0:	2376      	movs	r3, #118	; 0x76
 80009d2:	425b      	negs	r3, r3
 80009d4:	4690      	mov	r8, r2
 80009d6:	1a1b      	subs	r3, r3, r0
 80009d8:	2200      	movs	r2, #0
 80009da:	e77e      	b.n	80008da <__aeabi_fdiv+0x56>
 80009dc:	2303      	movs	r3, #3
 80009de:	464a      	mov	r2, r9
 80009e0:	431a      	orrs	r2, r3
 80009e2:	4691      	mov	r9, r2
 80009e4:	33fc      	adds	r3, #252	; 0xfc
 80009e6:	2203      	movs	r2, #3
 80009e8:	e777      	b.n	80008da <__aeabi_fdiv+0x56>
 80009ea:	000e      	movs	r6, r1
 80009ec:	20ff      	movs	r0, #255	; 0xff
 80009ee:	2200      	movs	r2, #0
 80009f0:	e7a8      	b.n	8000944 <__aeabi_fdiv+0xc0>
 80009f2:	2201      	movs	r2, #1
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b1b      	cmp	r3, #27
 80009f8:	dca2      	bgt.n	8000940 <__aeabi_fdiv+0xbc>
 80009fa:	379e      	adds	r7, #158	; 0x9e
 80009fc:	002a      	movs	r2, r5
 80009fe:	40bd      	lsls	r5, r7
 8000a00:	40da      	lsrs	r2, r3
 8000a02:	1e6b      	subs	r3, r5, #1
 8000a04:	419d      	sbcs	r5, r3
 8000a06:	4315      	orrs	r5, r2
 8000a08:	076a      	lsls	r2, r5, #29
 8000a0a:	d004      	beq.n	8000a16 <__aeabi_fdiv+0x192>
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	402a      	ands	r2, r5
 8000a10:	2a04      	cmp	r2, #4
 8000a12:	d000      	beq.n	8000a16 <__aeabi_fdiv+0x192>
 8000a14:	3504      	adds	r5, #4
 8000a16:	016a      	lsls	r2, r5, #5
 8000a18:	d544      	bpl.n	8000aa4 <__aeabi_fdiv+0x220>
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	e791      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000a20:	20ff      	movs	r0, #255	; 0xff
 8000a22:	2200      	movs	r2, #0
 8000a24:	e78e      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000a26:	2280      	movs	r2, #128	; 0x80
 8000a28:	2600      	movs	r6, #0
 8000a2a:	20ff      	movs	r0, #255	; 0xff
 8000a2c:	03d2      	lsls	r2, r2, #15
 8000a2e:	e789      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000a30:	2300      	movs	r3, #0
 8000a32:	4698      	mov	r8, r3
 8000a34:	2280      	movs	r2, #128	; 0x80
 8000a36:	03d2      	lsls	r2, r2, #15
 8000a38:	4215      	tst	r5, r2
 8000a3a:	d008      	beq.n	8000a4e <__aeabi_fdiv+0x1ca>
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	4213      	tst	r3, r2
 8000a40:	d105      	bne.n	8000a4e <__aeabi_fdiv+0x1ca>
 8000a42:	431a      	orrs	r2, r3
 8000a44:	0252      	lsls	r2, r2, #9
 8000a46:	0026      	movs	r6, r4
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	0a52      	lsrs	r2, r2, #9
 8000a4c:	e77a      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	03d2      	lsls	r2, r2, #15
 8000a52:	432a      	orrs	r2, r5
 8000a54:	0252      	lsls	r2, r2, #9
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a52      	lsrs	r2, r2, #9
 8000a5a:	e773      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	016b      	lsls	r3, r5, #5
 8000a60:	0155      	lsls	r5, r2, #5
 8000a62:	42ab      	cmp	r3, r5
 8000a64:	d21a      	bcs.n	8000a9c <__aeabi_fdiv+0x218>
 8000a66:	201b      	movs	r0, #27
 8000a68:	2200      	movs	r2, #0
 8000a6a:	3f01      	subs	r7, #1
 8000a6c:	2601      	movs	r6, #1
 8000a6e:	001c      	movs	r4, r3
 8000a70:	0052      	lsls	r2, r2, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	db01      	blt.n	8000a7c <__aeabi_fdiv+0x1f8>
 8000a78:	429d      	cmp	r5, r3
 8000a7a:	d801      	bhi.n	8000a80 <__aeabi_fdiv+0x1fc>
 8000a7c:	1b5b      	subs	r3, r3, r5
 8000a7e:	4332      	orrs	r2, r6
 8000a80:	3801      	subs	r0, #1
 8000a82:	2800      	cmp	r0, #0
 8000a84:	d1f3      	bne.n	8000a6e <__aeabi_fdiv+0x1ea>
 8000a86:	1e58      	subs	r0, r3, #1
 8000a88:	4183      	sbcs	r3, r0
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	001d      	movs	r5, r3
 8000a8e:	003b      	movs	r3, r7
 8000a90:	337f      	adds	r3, #127	; 0x7f
 8000a92:	000e      	movs	r6, r1
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	dd00      	ble.n	8000a9a <__aeabi_fdiv+0x216>
 8000a98:	e73d      	b.n	8000916 <__aeabi_fdiv+0x92>
 8000a9a:	e7aa      	b.n	80009f2 <__aeabi_fdiv+0x16e>
 8000a9c:	201a      	movs	r0, #26
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	1b5b      	subs	r3, r3, r5
 8000aa2:	e7e3      	b.n	8000a6c <__aeabi_fdiv+0x1e8>
 8000aa4:	01aa      	lsls	r2, r5, #6
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	0a52      	lsrs	r2, r2, #9
 8000aaa:	e74b      	b.n	8000944 <__aeabi_fdiv+0xc0>
 8000aac:	08005ba4 	.word	0x08005ba4
 8000ab0:	f7ffffff 	.word	0xf7ffffff
 8000ab4:	08005be4 	.word	0x08005be4

08000ab8 <__eqsf2>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0245      	lsls	r5, r0, #9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	004c      	lsls	r4, r1, #1
 8000ac2:	0fc3      	lsrs	r3, r0, #31
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	0e12      	lsrs	r2, r2, #24
 8000aca:	0a76      	lsrs	r6, r6, #9
 8000acc:	0e24      	lsrs	r4, r4, #24
 8000ace:	0fc9      	lsrs	r1, r1, #31
 8000ad0:	2aff      	cmp	r2, #255	; 0xff
 8000ad2:	d006      	beq.n	8000ae2 <__eqsf2+0x2a>
 8000ad4:	2cff      	cmp	r4, #255	; 0xff
 8000ad6:	d003      	beq.n	8000ae0 <__eqsf2+0x28>
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	d101      	bne.n	8000ae0 <__eqsf2+0x28>
 8000adc:	42b5      	cmp	r5, r6
 8000ade:	d006      	beq.n	8000aee <__eqsf2+0x36>
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1fc      	bne.n	8000ae0 <__eqsf2+0x28>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d1fa      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d1f8      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d006      	beq.n	8000b00 <__eqsf2+0x48>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d1f3      	bne.n	8000ae0 <__eqsf2+0x28>
 8000af8:	0028      	movs	r0, r5
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	4198      	sbcs	r0, r3
 8000afe:	e7ef      	b.n	8000ae0 <__eqsf2+0x28>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7ed      	b.n	8000ae0 <__eqsf2+0x28>

08000b04 <__gesf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0245      	lsls	r5, r0, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	004c      	lsls	r4, r1, #1
 8000b0e:	0fc3      	lsrs	r3, r0, #31
 8000b10:	0a6d      	lsrs	r5, r5, #9
 8000b12:	0e12      	lsrs	r2, r2, #24
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e24      	lsrs	r4, r4, #24
 8000b18:	0fc8      	lsrs	r0, r1, #31
 8000b1a:	2aff      	cmp	r2, #255	; 0xff
 8000b1c:	d01b      	beq.n	8000b56 <__gesf2+0x52>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d00e      	beq.n	8000b40 <__gesf2+0x3c>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d11b      	bne.n	8000b5e <__gesf2+0x5a>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d101      	bne.n	8000b2e <__gesf2+0x2a>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d01c      	beq.n	8000b68 <__gesf2+0x64>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d00c      	beq.n	8000b4c <__gesf2+0x48>
 8000b32:	4283      	cmp	r3, r0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x6c>
 8000b36:	2102      	movs	r1, #2
 8000b38:	1e58      	subs	r0, r3, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d122      	bne.n	8000b8a <__gesf2+0x86>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d1f4      	bne.n	8000b32 <__gesf2+0x2e>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1f2      	bne.n	8000b32 <__gesf2+0x2e>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f6      	bne.n	8000b3e <__gesf2+0x3a>
 8000b50:	2001      	movs	r0, #1
 8000b52:	4240      	negs	r0, r0
 8000b54:	e7f3      	b.n	8000b3e <__gesf2+0x3a>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d117      	bne.n	8000b8a <__gesf2+0x86>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d0f0      	beq.n	8000b40 <__gesf2+0x3c>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d1e7      	bne.n	8000b32 <__gesf2+0x2e>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d1e5      	bne.n	8000b32 <__gesf2+0x2e>
 8000b66:	e7e6      	b.n	8000b36 <__gesf2+0x32>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e7      	beq.n	8000b3e <__gesf2+0x3a>
 8000b6e:	e7e2      	b.n	8000b36 <__gesf2+0x32>
 8000b70:	42a2      	cmp	r2, r4
 8000b72:	dc05      	bgt.n	8000b80 <__gesf2+0x7c>
 8000b74:	dbea      	blt.n	8000b4c <__gesf2+0x48>
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d802      	bhi.n	8000b80 <__gesf2+0x7c>
 8000b7a:	d3e7      	bcc.n	8000b4c <__gesf2+0x48>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7de      	b.n	8000b3e <__gesf2+0x3a>
 8000b80:	4243      	negs	r3, r0
 8000b82:	4158      	adcs	r0, r3
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	3801      	subs	r0, #1
 8000b88:	e7d9      	b.n	8000b3e <__gesf2+0x3a>
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7d6      	b.n	8000b3e <__gesf2+0x3a>

08000b90 <__lesf2>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	0042      	lsls	r2, r0, #1
 8000b94:	0245      	lsls	r5, r0, #9
 8000b96:	024e      	lsls	r6, r1, #9
 8000b98:	004c      	lsls	r4, r1, #1
 8000b9a:	0fc3      	lsrs	r3, r0, #31
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	0a76      	lsrs	r6, r6, #9
 8000ba2:	0e24      	lsrs	r4, r4, #24
 8000ba4:	0fc8      	lsrs	r0, r1, #31
 8000ba6:	2aff      	cmp	r2, #255	; 0xff
 8000ba8:	d00b      	beq.n	8000bc2 <__lesf2+0x32>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d00d      	beq.n	8000bca <__lesf2+0x3a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d11f      	bne.n	8000bf2 <__lesf2+0x62>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d116      	bne.n	8000be4 <__lesf2+0x54>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d114      	bne.n	8000be4 <__lesf2+0x54>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d010      	beq.n	8000be2 <__lesf2+0x52>
 8000bc0:	e009      	b.n	8000bd6 <__lesf2+0x46>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d10c      	bne.n	8000be0 <__lesf2+0x50>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d113      	bne.n	8000bf2 <__lesf2+0x62>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d108      	bne.n	8000be0 <__lesf2+0x50>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d008      	beq.n	8000be4 <__lesf2+0x54>
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	d012      	beq.n	8000bfc <__lesf2+0x6c>
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	1e58      	subs	r0, r3, #1
 8000bda:	4008      	ands	r0, r1
 8000bdc:	3801      	subs	r0, #1
 8000bde:	e000      	b.n	8000be2 <__lesf2+0x52>
 8000be0:	2002      	movs	r0, #2
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f4      	bne.n	8000bd2 <__lesf2+0x42>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1fa      	bne.n	8000be2 <__lesf2+0x52>
 8000bec:	2001      	movs	r0, #1
 8000bee:	4240      	negs	r0, r0
 8000bf0:	e7f7      	b.n	8000be2 <__lesf2+0x52>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d1ed      	bne.n	8000bd2 <__lesf2+0x42>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <__lesf2+0x42>
 8000bfa:	e7ec      	b.n	8000bd6 <__lesf2+0x46>
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	dc05      	bgt.n	8000c0c <__lesf2+0x7c>
 8000c00:	dbf2      	blt.n	8000be8 <__lesf2+0x58>
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d802      	bhi.n	8000c0c <__lesf2+0x7c>
 8000c06:	d3ef      	bcc.n	8000be8 <__lesf2+0x58>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7ea      	b.n	8000be2 <__lesf2+0x52>
 8000c0c:	4243      	negs	r3, r0
 8000c0e:	4158      	adcs	r0, r3
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	3801      	subs	r0, #1
 8000c14:	e7e5      	b.n	8000be2 <__lesf2+0x52>
 8000c16:	46c0      	nop			; (mov r8, r8)

08000c18 <__aeabi_fmul>:
 8000c18:	0243      	lsls	r3, r0, #9
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1e:	464f      	mov	r7, r9
 8000c20:	4646      	mov	r6, r8
 8000c22:	4699      	mov	r9, r3
 8000c24:	46d6      	mov	lr, sl
 8000c26:	0fc3      	lsrs	r3, r0, #31
 8000c28:	0045      	lsls	r5, r0, #1
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	b5c0      	push	{r6, r7, lr}
 8000c2e:	464b      	mov	r3, r9
 8000c30:	1c0f      	adds	r7, r1, #0
 8000c32:	0e2d      	lsrs	r5, r5, #24
 8000c34:	d100      	bne.n	8000c38 <__aeabi_fmul+0x20>
 8000c36:	e0cb      	b.n	8000dd0 <__aeabi_fmul+0x1b8>
 8000c38:	2dff      	cmp	r5, #255	; 0xff
 8000c3a:	d100      	bne.n	8000c3e <__aeabi_fmul+0x26>
 8000c3c:	e0cf      	b.n	8000dde <__aeabi_fmul+0x1c6>
 8000c3e:	2280      	movs	r2, #128	; 0x80
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	04d2      	lsls	r2, r2, #19
 8000c44:	431a      	orrs	r2, r3
 8000c46:	2300      	movs	r3, #0
 8000c48:	4691      	mov	r9, r2
 8000c4a:	2600      	movs	r6, #0
 8000c4c:	469a      	mov	sl, r3
 8000c4e:	3d7f      	subs	r5, #127	; 0x7f
 8000c50:	027c      	lsls	r4, r7, #9
 8000c52:	007b      	lsls	r3, r7, #1
 8000c54:	0a64      	lsrs	r4, r4, #9
 8000c56:	0e1b      	lsrs	r3, r3, #24
 8000c58:	0fff      	lsrs	r7, r7, #31
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fmul+0x48>
 8000c5e:	e0a9      	b.n	8000db4 <__aeabi_fmul+0x19c>
 8000c60:	2bff      	cmp	r3, #255	; 0xff
 8000c62:	d011      	beq.n	8000c88 <__aeabi_fmul+0x70>
 8000c64:	2280      	movs	r2, #128	; 0x80
 8000c66:	00e4      	lsls	r4, r4, #3
 8000c68:	04d2      	lsls	r2, r2, #19
 8000c6a:	4314      	orrs	r4, r2
 8000c6c:	4642      	mov	r2, r8
 8000c6e:	3b7f      	subs	r3, #127	; 0x7f
 8000c70:	195b      	adds	r3, r3, r5
 8000c72:	407a      	eors	r2, r7
 8000c74:	2000      	movs	r0, #0
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	1c5d      	adds	r5, r3, #1
 8000c7a:	2e0a      	cmp	r6, #10
 8000c7c:	dd13      	ble.n	8000ca6 <__aeabi_fmul+0x8e>
 8000c7e:	003a      	movs	r2, r7
 8000c80:	2e0b      	cmp	r6, #11
 8000c82:	d047      	beq.n	8000d14 <__aeabi_fmul+0xfc>
 8000c84:	4647      	mov	r7, r8
 8000c86:	e03f      	b.n	8000d08 <__aeabi_fmul+0xf0>
 8000c88:	002b      	movs	r3, r5
 8000c8a:	33ff      	adds	r3, #255	; 0xff
 8000c8c:	2c00      	cmp	r4, #0
 8000c8e:	d11e      	bne.n	8000cce <__aeabi_fmul+0xb6>
 8000c90:	2202      	movs	r2, #2
 8000c92:	4316      	orrs	r6, r2
 8000c94:	4642      	mov	r2, r8
 8000c96:	3501      	adds	r5, #1
 8000c98:	407a      	eors	r2, r7
 8000c9a:	b2d2      	uxtb	r2, r2
 8000c9c:	35ff      	adds	r5, #255	; 0xff
 8000c9e:	2e0a      	cmp	r6, #10
 8000ca0:	dd00      	ble.n	8000ca4 <__aeabi_fmul+0x8c>
 8000ca2:	e0e4      	b.n	8000e6e <__aeabi_fmul+0x256>
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	2e02      	cmp	r6, #2
 8000ca8:	dc1c      	bgt.n	8000ce4 <__aeabi_fmul+0xcc>
 8000caa:	3e01      	subs	r6, #1
 8000cac:	2e01      	cmp	r6, #1
 8000cae:	d842      	bhi.n	8000d36 <__aeabi_fmul+0x11e>
 8000cb0:	2802      	cmp	r0, #2
 8000cb2:	d03d      	beq.n	8000d30 <__aeabi_fmul+0x118>
 8000cb4:	2801      	cmp	r0, #1
 8000cb6:	d166      	bne.n	8000d86 <__aeabi_fmul+0x16e>
 8000cb8:	2000      	movs	r0, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	05c0      	lsls	r0, r0, #23
 8000cbe:	4308      	orrs	r0, r1
 8000cc0:	07d2      	lsls	r2, r2, #31
 8000cc2:	4310      	orrs	r0, r2
 8000cc4:	bce0      	pop	{r5, r6, r7}
 8000cc6:	46ba      	mov	sl, r7
 8000cc8:	46b1      	mov	r9, r6
 8000cca:	46a8      	mov	r8, r5
 8000ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cce:	2203      	movs	r2, #3
 8000cd0:	4316      	orrs	r6, r2
 8000cd2:	4642      	mov	r2, r8
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	407a      	eors	r2, r7
 8000cd8:	b2d2      	uxtb	r2, r2
 8000cda:	35ff      	adds	r5, #255	; 0xff
 8000cdc:	2e0a      	cmp	r6, #10
 8000cde:	dd00      	ble.n	8000ce2 <__aeabi_fmul+0xca>
 8000ce0:	e0e4      	b.n	8000eac <__aeabi_fmul+0x294>
 8000ce2:	2003      	movs	r0, #3
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	40b1      	lsls	r1, r6
 8000ce8:	26a6      	movs	r6, #166	; 0xa6
 8000cea:	00f6      	lsls	r6, r6, #3
 8000cec:	4231      	tst	r1, r6
 8000cee:	d10a      	bne.n	8000d06 <__aeabi_fmul+0xee>
 8000cf0:	2690      	movs	r6, #144	; 0x90
 8000cf2:	00b6      	lsls	r6, r6, #2
 8000cf4:	4231      	tst	r1, r6
 8000cf6:	d116      	bne.n	8000d26 <__aeabi_fmul+0x10e>
 8000cf8:	3eb9      	subs	r6, #185	; 0xb9
 8000cfa:	3eff      	subs	r6, #255	; 0xff
 8000cfc:	420e      	tst	r6, r1
 8000cfe:	d01a      	beq.n	8000d36 <__aeabi_fmul+0x11e>
 8000d00:	46a1      	mov	r9, r4
 8000d02:	4682      	mov	sl, r0
 8000d04:	e000      	b.n	8000d08 <__aeabi_fmul+0xf0>
 8000d06:	0017      	movs	r7, r2
 8000d08:	4653      	mov	r3, sl
 8000d0a:	003a      	movs	r2, r7
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d00f      	beq.n	8000d30 <__aeabi_fmul+0x118>
 8000d10:	464c      	mov	r4, r9
 8000d12:	4650      	mov	r0, sl
 8000d14:	2803      	cmp	r0, #3
 8000d16:	d1cd      	bne.n	8000cb4 <__aeabi_fmul+0x9c>
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	03c9      	lsls	r1, r1, #15
 8000d1c:	4321      	orrs	r1, r4
 8000d1e:	0249      	lsls	r1, r1, #9
 8000d20:	20ff      	movs	r0, #255	; 0xff
 8000d22:	0a49      	lsrs	r1, r1, #9
 8000d24:	e7ca      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000d26:	2180      	movs	r1, #128	; 0x80
 8000d28:	2200      	movs	r2, #0
 8000d2a:	20ff      	movs	r0, #255	; 0xff
 8000d2c:	03c9      	lsls	r1, r1, #15
 8000d2e:	e7c5      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000d30:	20ff      	movs	r0, #255	; 0xff
 8000d32:	2100      	movs	r1, #0
 8000d34:	e7c2      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000d36:	0c20      	lsrs	r0, r4, #16
 8000d38:	4649      	mov	r1, r9
 8000d3a:	0424      	lsls	r4, r4, #16
 8000d3c:	0c24      	lsrs	r4, r4, #16
 8000d3e:	0027      	movs	r7, r4
 8000d40:	0c0e      	lsrs	r6, r1, #16
 8000d42:	0409      	lsls	r1, r1, #16
 8000d44:	0c09      	lsrs	r1, r1, #16
 8000d46:	4374      	muls	r4, r6
 8000d48:	434f      	muls	r7, r1
 8000d4a:	4346      	muls	r6, r0
 8000d4c:	4348      	muls	r0, r1
 8000d4e:	0c39      	lsrs	r1, r7, #16
 8000d50:	1900      	adds	r0, r0, r4
 8000d52:	1809      	adds	r1, r1, r0
 8000d54:	428c      	cmp	r4, r1
 8000d56:	d903      	bls.n	8000d60 <__aeabi_fmul+0x148>
 8000d58:	2080      	movs	r0, #128	; 0x80
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	4684      	mov	ip, r0
 8000d5e:	4466      	add	r6, ip
 8000d60:	043f      	lsls	r7, r7, #16
 8000d62:	0408      	lsls	r0, r1, #16
 8000d64:	0c3f      	lsrs	r7, r7, #16
 8000d66:	19c0      	adds	r0, r0, r7
 8000d68:	0184      	lsls	r4, r0, #6
 8000d6a:	1e67      	subs	r7, r4, #1
 8000d6c:	41bc      	sbcs	r4, r7
 8000d6e:	0c09      	lsrs	r1, r1, #16
 8000d70:	0e80      	lsrs	r0, r0, #26
 8000d72:	1989      	adds	r1, r1, r6
 8000d74:	4304      	orrs	r4, r0
 8000d76:	0189      	lsls	r1, r1, #6
 8000d78:	430c      	orrs	r4, r1
 8000d7a:	0109      	lsls	r1, r1, #4
 8000d7c:	d571      	bpl.n	8000e62 <__aeabi_fmul+0x24a>
 8000d7e:	2301      	movs	r3, #1
 8000d80:	0861      	lsrs	r1, r4, #1
 8000d82:	401c      	ands	r4, r3
 8000d84:	430c      	orrs	r4, r1
 8000d86:	002b      	movs	r3, r5
 8000d88:	337f      	adds	r3, #127	; 0x7f
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	dd51      	ble.n	8000e32 <__aeabi_fmul+0x21a>
 8000d8e:	0761      	lsls	r1, r4, #29
 8000d90:	d004      	beq.n	8000d9c <__aeabi_fmul+0x184>
 8000d92:	210f      	movs	r1, #15
 8000d94:	4021      	ands	r1, r4
 8000d96:	2904      	cmp	r1, #4
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fmul+0x184>
 8000d9a:	3404      	adds	r4, #4
 8000d9c:	0121      	lsls	r1, r4, #4
 8000d9e:	d503      	bpl.n	8000da8 <__aeabi_fmul+0x190>
 8000da0:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <__aeabi_fmul+0x298>)
 8000da2:	401c      	ands	r4, r3
 8000da4:	002b      	movs	r3, r5
 8000da6:	3380      	adds	r3, #128	; 0x80
 8000da8:	2bfe      	cmp	r3, #254	; 0xfe
 8000daa:	dcc1      	bgt.n	8000d30 <__aeabi_fmul+0x118>
 8000dac:	01a1      	lsls	r1, r4, #6
 8000dae:	0a49      	lsrs	r1, r1, #9
 8000db0:	b2d8      	uxtb	r0, r3
 8000db2:	e783      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000db4:	2c00      	cmp	r4, #0
 8000db6:	d12c      	bne.n	8000e12 <__aeabi_fmul+0x1fa>
 8000db8:	2301      	movs	r3, #1
 8000dba:	4642      	mov	r2, r8
 8000dbc:	431e      	orrs	r6, r3
 8000dbe:	002b      	movs	r3, r5
 8000dc0:	407a      	eors	r2, r7
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	1c5d      	adds	r5, r3, #1
 8000dc8:	2e0a      	cmp	r6, #10
 8000dca:	dd00      	ble.n	8000dce <__aeabi_fmul+0x1b6>
 8000dcc:	e757      	b.n	8000c7e <__aeabi_fmul+0x66>
 8000dce:	e76a      	b.n	8000ca6 <__aeabi_fmul+0x8e>
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d110      	bne.n	8000df6 <__aeabi_fmul+0x1de>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2604      	movs	r6, #4
 8000dd8:	2500      	movs	r5, #0
 8000dda:	469a      	mov	sl, r3
 8000ddc:	e738      	b.n	8000c50 <__aeabi_fmul+0x38>
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d104      	bne.n	8000dec <__aeabi_fmul+0x1d4>
 8000de2:	2302      	movs	r3, #2
 8000de4:	2608      	movs	r6, #8
 8000de6:	25ff      	movs	r5, #255	; 0xff
 8000de8:	469a      	mov	sl, r3
 8000dea:	e731      	b.n	8000c50 <__aeabi_fmul+0x38>
 8000dec:	2303      	movs	r3, #3
 8000dee:	260c      	movs	r6, #12
 8000df0:	25ff      	movs	r5, #255	; 0xff
 8000df2:	469a      	mov	sl, r3
 8000df4:	e72c      	b.n	8000c50 <__aeabi_fmul+0x38>
 8000df6:	4648      	mov	r0, r9
 8000df8:	f001 ff2e 	bl	8002c58 <__clzsi2>
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	1f43      	subs	r3, r0, #5
 8000e00:	2576      	movs	r5, #118	; 0x76
 8000e02:	409a      	lsls	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	426d      	negs	r5, r5
 8000e08:	4691      	mov	r9, r2
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	469a      	mov	sl, r3
 8000e0e:	1a2d      	subs	r5, r5, r0
 8000e10:	e71e      	b.n	8000c50 <__aeabi_fmul+0x38>
 8000e12:	0020      	movs	r0, r4
 8000e14:	f001 ff20 	bl	8002c58 <__clzsi2>
 8000e18:	4642      	mov	r2, r8
 8000e1a:	1f43      	subs	r3, r0, #5
 8000e1c:	409c      	lsls	r4, r3
 8000e1e:	1a2b      	subs	r3, r5, r0
 8000e20:	3b76      	subs	r3, #118	; 0x76
 8000e22:	407a      	eors	r2, r7
 8000e24:	2000      	movs	r0, #0
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	1c5d      	adds	r5, r3, #1
 8000e2a:	2e0a      	cmp	r6, #10
 8000e2c:	dd00      	ble.n	8000e30 <__aeabi_fmul+0x218>
 8000e2e:	e726      	b.n	8000c7e <__aeabi_fmul+0x66>
 8000e30:	e739      	b.n	8000ca6 <__aeabi_fmul+0x8e>
 8000e32:	2101      	movs	r1, #1
 8000e34:	1acb      	subs	r3, r1, r3
 8000e36:	2b1b      	cmp	r3, #27
 8000e38:	dd00      	ble.n	8000e3c <__aeabi_fmul+0x224>
 8000e3a:	e73d      	b.n	8000cb8 <__aeabi_fmul+0xa0>
 8000e3c:	359e      	adds	r5, #158	; 0x9e
 8000e3e:	0021      	movs	r1, r4
 8000e40:	40ac      	lsls	r4, r5
 8000e42:	40d9      	lsrs	r1, r3
 8000e44:	1e63      	subs	r3, r4, #1
 8000e46:	419c      	sbcs	r4, r3
 8000e48:	4321      	orrs	r1, r4
 8000e4a:	074b      	lsls	r3, r1, #29
 8000e4c:	d004      	beq.n	8000e58 <__aeabi_fmul+0x240>
 8000e4e:	230f      	movs	r3, #15
 8000e50:	400b      	ands	r3, r1
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	d000      	beq.n	8000e58 <__aeabi_fmul+0x240>
 8000e56:	3104      	adds	r1, #4
 8000e58:	014b      	lsls	r3, r1, #5
 8000e5a:	d504      	bpl.n	8000e66 <__aeabi_fmul+0x24e>
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	2100      	movs	r1, #0
 8000e60:	e72c      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000e62:	001d      	movs	r5, r3
 8000e64:	e78f      	b.n	8000d86 <__aeabi_fmul+0x16e>
 8000e66:	0189      	lsls	r1, r1, #6
 8000e68:	2000      	movs	r0, #0
 8000e6a:	0a49      	lsrs	r1, r1, #9
 8000e6c:	e726      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000e6e:	2302      	movs	r3, #2
 8000e70:	2e0f      	cmp	r6, #15
 8000e72:	d10c      	bne.n	8000e8e <__aeabi_fmul+0x276>
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	464b      	mov	r3, r9
 8000e78:	03c9      	lsls	r1, r1, #15
 8000e7a:	420b      	tst	r3, r1
 8000e7c:	d00d      	beq.n	8000e9a <__aeabi_fmul+0x282>
 8000e7e:	420c      	tst	r4, r1
 8000e80:	d10b      	bne.n	8000e9a <__aeabi_fmul+0x282>
 8000e82:	4321      	orrs	r1, r4
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	003a      	movs	r2, r7
 8000e88:	20ff      	movs	r0, #255	; 0xff
 8000e8a:	0a49      	lsrs	r1, r1, #9
 8000e8c:	e716      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000e8e:	2e0b      	cmp	r6, #11
 8000e90:	d000      	beq.n	8000e94 <__aeabi_fmul+0x27c>
 8000e92:	e6f7      	b.n	8000c84 <__aeabi_fmul+0x6c>
 8000e94:	46a1      	mov	r9, r4
 8000e96:	469a      	mov	sl, r3
 8000e98:	e736      	b.n	8000d08 <__aeabi_fmul+0xf0>
 8000e9a:	2180      	movs	r1, #128	; 0x80
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	03c9      	lsls	r1, r1, #15
 8000ea0:	4319      	orrs	r1, r3
 8000ea2:	0249      	lsls	r1, r1, #9
 8000ea4:	4642      	mov	r2, r8
 8000ea6:	20ff      	movs	r0, #255	; 0xff
 8000ea8:	0a49      	lsrs	r1, r1, #9
 8000eaa:	e707      	b.n	8000cbc <__aeabi_fmul+0xa4>
 8000eac:	2303      	movs	r3, #3
 8000eae:	e7df      	b.n	8000e70 <__aeabi_fmul+0x258>
 8000eb0:	f7ffffff 	.word	0xf7ffffff

08000eb4 <__aeabi_ui2f>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	1e04      	subs	r4, r0, #0
 8000eb8:	d00e      	beq.n	8000ed8 <__aeabi_ui2f+0x24>
 8000eba:	f001 fecd 	bl	8002c58 <__clzsi2>
 8000ebe:	239e      	movs	r3, #158	; 0x9e
 8000ec0:	0001      	movs	r1, r0
 8000ec2:	1a1b      	subs	r3, r3, r0
 8000ec4:	2b96      	cmp	r3, #150	; 0x96
 8000ec6:	dc0c      	bgt.n	8000ee2 <__aeabi_ui2f+0x2e>
 8000ec8:	2808      	cmp	r0, #8
 8000eca:	d02c      	beq.n	8000f26 <__aeabi_ui2f+0x72>
 8000ecc:	3908      	subs	r1, #8
 8000ece:	408c      	lsls	r4, r1
 8000ed0:	0264      	lsls	r4, r4, #9
 8000ed2:	0a64      	lsrs	r4, r4, #9
 8000ed4:	b2d8      	uxtb	r0, r3
 8000ed6:	e001      	b.n	8000edc <__aeabi_ui2f+0x28>
 8000ed8:	2000      	movs	r0, #0
 8000eda:	2400      	movs	r4, #0
 8000edc:	05c0      	lsls	r0, r0, #23
 8000ede:	4320      	orrs	r0, r4
 8000ee0:	bd70      	pop	{r4, r5, r6, pc}
 8000ee2:	2b99      	cmp	r3, #153	; 0x99
 8000ee4:	dd0a      	ble.n	8000efc <__aeabi_ui2f+0x48>
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	0020      	movs	r0, r4
 8000eea:	321b      	adds	r2, #27
 8000eec:	4090      	lsls	r0, r2
 8000eee:	0002      	movs	r2, r0
 8000ef0:	1e50      	subs	r0, r2, #1
 8000ef2:	4182      	sbcs	r2, r0
 8000ef4:	2005      	movs	r0, #5
 8000ef6:	1a40      	subs	r0, r0, r1
 8000ef8:	40c4      	lsrs	r4, r0
 8000efa:	4314      	orrs	r4, r2
 8000efc:	2905      	cmp	r1, #5
 8000efe:	dc16      	bgt.n	8000f2e <__aeabi_ui2f+0x7a>
 8000f00:	0022      	movs	r2, r4
 8000f02:	480f      	ldr	r0, [pc, #60]	; (8000f40 <__aeabi_ui2f+0x8c>)
 8000f04:	4002      	ands	r2, r0
 8000f06:	0765      	lsls	r5, r4, #29
 8000f08:	d009      	beq.n	8000f1e <__aeabi_ui2f+0x6a>
 8000f0a:	250f      	movs	r5, #15
 8000f0c:	402c      	ands	r4, r5
 8000f0e:	2c04      	cmp	r4, #4
 8000f10:	d005      	beq.n	8000f1e <__aeabi_ui2f+0x6a>
 8000f12:	3204      	adds	r2, #4
 8000f14:	0154      	lsls	r4, r2, #5
 8000f16:	d502      	bpl.n	8000f1e <__aeabi_ui2f+0x6a>
 8000f18:	239f      	movs	r3, #159	; 0x9f
 8000f1a:	4002      	ands	r2, r0
 8000f1c:	1a5b      	subs	r3, r3, r1
 8000f1e:	0192      	lsls	r2, r2, #6
 8000f20:	0a54      	lsrs	r4, r2, #9
 8000f22:	b2d8      	uxtb	r0, r3
 8000f24:	e7da      	b.n	8000edc <__aeabi_ui2f+0x28>
 8000f26:	0264      	lsls	r4, r4, #9
 8000f28:	2096      	movs	r0, #150	; 0x96
 8000f2a:	0a64      	lsrs	r4, r4, #9
 8000f2c:	e7d6      	b.n	8000edc <__aeabi_ui2f+0x28>
 8000f2e:	1f4a      	subs	r2, r1, #5
 8000f30:	4094      	lsls	r4, r2
 8000f32:	0022      	movs	r2, r4
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <__aeabi_ui2f+0x8c>)
 8000f36:	4002      	ands	r2, r0
 8000f38:	0765      	lsls	r5, r4, #29
 8000f3a:	d0f0      	beq.n	8000f1e <__aeabi_ui2f+0x6a>
 8000f3c:	e7e5      	b.n	8000f0a <__aeabi_ui2f+0x56>
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	fbffffff 	.word	0xfbffffff

08000f44 <__aeabi_dadd>:
 8000f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f46:	464f      	mov	r7, r9
 8000f48:	4646      	mov	r6, r8
 8000f4a:	46d6      	mov	lr, sl
 8000f4c:	0004      	movs	r4, r0
 8000f4e:	b5c0      	push	{r6, r7, lr}
 8000f50:	001f      	movs	r7, r3
 8000f52:	030b      	lsls	r3, r1, #12
 8000f54:	0010      	movs	r0, r2
 8000f56:	004e      	lsls	r6, r1, #1
 8000f58:	0a5b      	lsrs	r3, r3, #9
 8000f5a:	0fcd      	lsrs	r5, r1, #31
 8000f5c:	0f61      	lsrs	r1, r4, #29
 8000f5e:	007a      	lsls	r2, r7, #1
 8000f60:	4319      	orrs	r1, r3
 8000f62:	00e3      	lsls	r3, r4, #3
 8000f64:	033c      	lsls	r4, r7, #12
 8000f66:	0fff      	lsrs	r7, r7, #31
 8000f68:	46bc      	mov	ip, r7
 8000f6a:	0a64      	lsrs	r4, r4, #9
 8000f6c:	0f47      	lsrs	r7, r0, #29
 8000f6e:	4327      	orrs	r7, r4
 8000f70:	0d76      	lsrs	r6, r6, #21
 8000f72:	0d52      	lsrs	r2, r2, #21
 8000f74:	00c0      	lsls	r0, r0, #3
 8000f76:	46b9      	mov	r9, r7
 8000f78:	4680      	mov	r8, r0
 8000f7a:	1ab7      	subs	r7, r6, r2
 8000f7c:	4565      	cmp	r5, ip
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x3e>
 8000f80:	e09b      	b.n	80010ba <__aeabi_dadd+0x176>
 8000f82:	2f00      	cmp	r7, #0
 8000f84:	dc00      	bgt.n	8000f88 <__aeabi_dadd+0x44>
 8000f86:	e084      	b.n	8001092 <__aeabi_dadd+0x14e>
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x4a>
 8000f8c:	e0be      	b.n	800110c <__aeabi_dadd+0x1c8>
 8000f8e:	4ac8      	ldr	r2, [pc, #800]	; (80012b0 <__aeabi_dadd+0x36c>)
 8000f90:	4296      	cmp	r6, r2
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x52>
 8000f94:	e124      	b.n	80011e0 <__aeabi_dadd+0x29c>
 8000f96:	2280      	movs	r2, #128	; 0x80
 8000f98:	464c      	mov	r4, r9
 8000f9a:	0412      	lsls	r2, r2, #16
 8000f9c:	4314      	orrs	r4, r2
 8000f9e:	46a1      	mov	r9, r4
 8000fa0:	2f38      	cmp	r7, #56	; 0x38
 8000fa2:	dd00      	ble.n	8000fa6 <__aeabi_dadd+0x62>
 8000fa4:	e167      	b.n	8001276 <__aeabi_dadd+0x332>
 8000fa6:	2f1f      	cmp	r7, #31
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dadd+0x68>
 8000faa:	e1d6      	b.n	800135a <__aeabi_dadd+0x416>
 8000fac:	2220      	movs	r2, #32
 8000fae:	464c      	mov	r4, r9
 8000fb0:	1bd2      	subs	r2, r2, r7
 8000fb2:	4094      	lsls	r4, r2
 8000fb4:	46a2      	mov	sl, r4
 8000fb6:	4644      	mov	r4, r8
 8000fb8:	40fc      	lsrs	r4, r7
 8000fba:	0020      	movs	r0, r4
 8000fbc:	4654      	mov	r4, sl
 8000fbe:	4304      	orrs	r4, r0
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	4090      	lsls	r0, r2
 8000fc4:	1e42      	subs	r2, r0, #1
 8000fc6:	4190      	sbcs	r0, r2
 8000fc8:	464a      	mov	r2, r9
 8000fca:	40fa      	lsrs	r2, r7
 8000fcc:	4304      	orrs	r4, r0
 8000fce:	1a89      	subs	r1, r1, r2
 8000fd0:	1b1c      	subs	r4, r3, r4
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	4192      	sbcs	r2, r2
 8000fd6:	4252      	negs	r2, r2
 8000fd8:	1a8b      	subs	r3, r1, r2
 8000fda:	469a      	mov	sl, r3
 8000fdc:	4653      	mov	r3, sl
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	d400      	bmi.n	8000fe4 <__aeabi_dadd+0xa0>
 8000fe2:	e0d4      	b.n	800118e <__aeabi_dadd+0x24a>
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	025a      	lsls	r2, r3, #9
 8000fe8:	0a53      	lsrs	r3, r2, #9
 8000fea:	469a      	mov	sl, r3
 8000fec:	4653      	mov	r3, sl
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d100      	bne.n	8000ff4 <__aeabi_dadd+0xb0>
 8000ff2:	e104      	b.n	80011fe <__aeabi_dadd+0x2ba>
 8000ff4:	4650      	mov	r0, sl
 8000ff6:	f001 fe2f 	bl	8002c58 <__clzsi2>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	3b08      	subs	r3, #8
 8000ffe:	2220      	movs	r2, #32
 8001000:	0020      	movs	r0, r4
 8001002:	1ad2      	subs	r2, r2, r3
 8001004:	4651      	mov	r1, sl
 8001006:	40d0      	lsrs	r0, r2
 8001008:	4099      	lsls	r1, r3
 800100a:	0002      	movs	r2, r0
 800100c:	409c      	lsls	r4, r3
 800100e:	430a      	orrs	r2, r1
 8001010:	42b3      	cmp	r3, r6
 8001012:	da00      	bge.n	8001016 <__aeabi_dadd+0xd2>
 8001014:	e102      	b.n	800121c <__aeabi_dadd+0x2d8>
 8001016:	1b9b      	subs	r3, r3, r6
 8001018:	1c59      	adds	r1, r3, #1
 800101a:	291f      	cmp	r1, #31
 800101c:	dd00      	ble.n	8001020 <__aeabi_dadd+0xdc>
 800101e:	e0a7      	b.n	8001170 <__aeabi_dadd+0x22c>
 8001020:	2320      	movs	r3, #32
 8001022:	0010      	movs	r0, r2
 8001024:	0026      	movs	r6, r4
 8001026:	1a5b      	subs	r3, r3, r1
 8001028:	409c      	lsls	r4, r3
 800102a:	4098      	lsls	r0, r3
 800102c:	40ce      	lsrs	r6, r1
 800102e:	40ca      	lsrs	r2, r1
 8001030:	1e63      	subs	r3, r4, #1
 8001032:	419c      	sbcs	r4, r3
 8001034:	4330      	orrs	r0, r6
 8001036:	4692      	mov	sl, r2
 8001038:	2600      	movs	r6, #0
 800103a:	4304      	orrs	r4, r0
 800103c:	0763      	lsls	r3, r4, #29
 800103e:	d009      	beq.n	8001054 <__aeabi_dadd+0x110>
 8001040:	230f      	movs	r3, #15
 8001042:	4023      	ands	r3, r4
 8001044:	2b04      	cmp	r3, #4
 8001046:	d005      	beq.n	8001054 <__aeabi_dadd+0x110>
 8001048:	1d23      	adds	r3, r4, #4
 800104a:	42a3      	cmp	r3, r4
 800104c:	41a4      	sbcs	r4, r4
 800104e:	4264      	negs	r4, r4
 8001050:	44a2      	add	sl, r4
 8001052:	001c      	movs	r4, r3
 8001054:	4653      	mov	r3, sl
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	d400      	bmi.n	800105c <__aeabi_dadd+0x118>
 800105a:	e09b      	b.n	8001194 <__aeabi_dadd+0x250>
 800105c:	4b94      	ldr	r3, [pc, #592]	; (80012b0 <__aeabi_dadd+0x36c>)
 800105e:	3601      	adds	r6, #1
 8001060:	429e      	cmp	r6, r3
 8001062:	d100      	bne.n	8001066 <__aeabi_dadd+0x122>
 8001064:	e0b8      	b.n	80011d8 <__aeabi_dadd+0x294>
 8001066:	4653      	mov	r3, sl
 8001068:	4992      	ldr	r1, [pc, #584]	; (80012b4 <__aeabi_dadd+0x370>)
 800106a:	08e4      	lsrs	r4, r4, #3
 800106c:	400b      	ands	r3, r1
 800106e:	0019      	movs	r1, r3
 8001070:	075b      	lsls	r3, r3, #29
 8001072:	4323      	orrs	r3, r4
 8001074:	0572      	lsls	r2, r6, #21
 8001076:	024c      	lsls	r4, r1, #9
 8001078:	0b24      	lsrs	r4, r4, #12
 800107a:	0d52      	lsrs	r2, r2, #21
 800107c:	0512      	lsls	r2, r2, #20
 800107e:	07ed      	lsls	r5, r5, #31
 8001080:	4322      	orrs	r2, r4
 8001082:	432a      	orrs	r2, r5
 8001084:	0018      	movs	r0, r3
 8001086:	0011      	movs	r1, r2
 8001088:	bce0      	pop	{r5, r6, r7}
 800108a:	46ba      	mov	sl, r7
 800108c:	46b1      	mov	r9, r6
 800108e:	46a8      	mov	r8, r5
 8001090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001092:	2f00      	cmp	r7, #0
 8001094:	d048      	beq.n	8001128 <__aeabi_dadd+0x1e4>
 8001096:	1b97      	subs	r7, r2, r6
 8001098:	2e00      	cmp	r6, #0
 800109a:	d000      	beq.n	800109e <__aeabi_dadd+0x15a>
 800109c:	e10e      	b.n	80012bc <__aeabi_dadd+0x378>
 800109e:	000c      	movs	r4, r1
 80010a0:	431c      	orrs	r4, r3
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x162>
 80010a4:	e1b7      	b.n	8001416 <__aeabi_dadd+0x4d2>
 80010a6:	1e7c      	subs	r4, r7, #1
 80010a8:	2f01      	cmp	r7, #1
 80010aa:	d100      	bne.n	80010ae <__aeabi_dadd+0x16a>
 80010ac:	e226      	b.n	80014fc <__aeabi_dadd+0x5b8>
 80010ae:	4d80      	ldr	r5, [pc, #512]	; (80012b0 <__aeabi_dadd+0x36c>)
 80010b0:	42af      	cmp	r7, r5
 80010b2:	d100      	bne.n	80010b6 <__aeabi_dadd+0x172>
 80010b4:	e1d5      	b.n	8001462 <__aeabi_dadd+0x51e>
 80010b6:	0027      	movs	r7, r4
 80010b8:	e107      	b.n	80012ca <__aeabi_dadd+0x386>
 80010ba:	2f00      	cmp	r7, #0
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_dadd+0x17c>
 80010be:	e0b2      	b.n	8001226 <__aeabi_dadd+0x2e2>
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d047      	beq.n	8001154 <__aeabi_dadd+0x210>
 80010c4:	4a7a      	ldr	r2, [pc, #488]	; (80012b0 <__aeabi_dadd+0x36c>)
 80010c6:	4296      	cmp	r6, r2
 80010c8:	d100      	bne.n	80010cc <__aeabi_dadd+0x188>
 80010ca:	e089      	b.n	80011e0 <__aeabi_dadd+0x29c>
 80010cc:	2280      	movs	r2, #128	; 0x80
 80010ce:	464c      	mov	r4, r9
 80010d0:	0412      	lsls	r2, r2, #16
 80010d2:	4314      	orrs	r4, r2
 80010d4:	46a1      	mov	r9, r4
 80010d6:	2f38      	cmp	r7, #56	; 0x38
 80010d8:	dc6b      	bgt.n	80011b2 <__aeabi_dadd+0x26e>
 80010da:	2f1f      	cmp	r7, #31
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_dadd+0x19c>
 80010de:	e16e      	b.n	80013be <__aeabi_dadd+0x47a>
 80010e0:	003a      	movs	r2, r7
 80010e2:	4648      	mov	r0, r9
 80010e4:	3a20      	subs	r2, #32
 80010e6:	40d0      	lsrs	r0, r2
 80010e8:	4684      	mov	ip, r0
 80010ea:	2f20      	cmp	r7, #32
 80010ec:	d007      	beq.n	80010fe <__aeabi_dadd+0x1ba>
 80010ee:	2240      	movs	r2, #64	; 0x40
 80010f0:	4648      	mov	r0, r9
 80010f2:	1bd2      	subs	r2, r2, r7
 80010f4:	4090      	lsls	r0, r2
 80010f6:	0002      	movs	r2, r0
 80010f8:	4640      	mov	r0, r8
 80010fa:	4310      	orrs	r0, r2
 80010fc:	4680      	mov	r8, r0
 80010fe:	4640      	mov	r0, r8
 8001100:	1e42      	subs	r2, r0, #1
 8001102:	4190      	sbcs	r0, r2
 8001104:	4662      	mov	r2, ip
 8001106:	0004      	movs	r4, r0
 8001108:	4314      	orrs	r4, r2
 800110a:	e057      	b.n	80011bc <__aeabi_dadd+0x278>
 800110c:	464a      	mov	r2, r9
 800110e:	4302      	orrs	r2, r0
 8001110:	d100      	bne.n	8001114 <__aeabi_dadd+0x1d0>
 8001112:	e103      	b.n	800131c <__aeabi_dadd+0x3d8>
 8001114:	1e7a      	subs	r2, r7, #1
 8001116:	2f01      	cmp	r7, #1
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x1d8>
 800111a:	e193      	b.n	8001444 <__aeabi_dadd+0x500>
 800111c:	4c64      	ldr	r4, [pc, #400]	; (80012b0 <__aeabi_dadd+0x36c>)
 800111e:	42a7      	cmp	r7, r4
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x1e0>
 8001122:	e18a      	b.n	800143a <__aeabi_dadd+0x4f6>
 8001124:	0017      	movs	r7, r2
 8001126:	e73b      	b.n	8000fa0 <__aeabi_dadd+0x5c>
 8001128:	4c63      	ldr	r4, [pc, #396]	; (80012b8 <__aeabi_dadd+0x374>)
 800112a:	1c72      	adds	r2, r6, #1
 800112c:	4222      	tst	r2, r4
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x1ee>
 8001130:	e0e0      	b.n	80012f4 <__aeabi_dadd+0x3b0>
 8001132:	000a      	movs	r2, r1
 8001134:	431a      	orrs	r2, r3
 8001136:	2e00      	cmp	r6, #0
 8001138:	d000      	beq.n	800113c <__aeabi_dadd+0x1f8>
 800113a:	e174      	b.n	8001426 <__aeabi_dadd+0x4e2>
 800113c:	2a00      	cmp	r2, #0
 800113e:	d100      	bne.n	8001142 <__aeabi_dadd+0x1fe>
 8001140:	e1d0      	b.n	80014e4 <__aeabi_dadd+0x5a0>
 8001142:	464a      	mov	r2, r9
 8001144:	4302      	orrs	r2, r0
 8001146:	d000      	beq.n	800114a <__aeabi_dadd+0x206>
 8001148:	e1e3      	b.n	8001512 <__aeabi_dadd+0x5ce>
 800114a:	074a      	lsls	r2, r1, #29
 800114c:	08db      	lsrs	r3, r3, #3
 800114e:	4313      	orrs	r3, r2
 8001150:	08c9      	lsrs	r1, r1, #3
 8001152:	e029      	b.n	80011a8 <__aeabi_dadd+0x264>
 8001154:	464a      	mov	r2, r9
 8001156:	4302      	orrs	r2, r0
 8001158:	d100      	bne.n	800115c <__aeabi_dadd+0x218>
 800115a:	e17d      	b.n	8001458 <__aeabi_dadd+0x514>
 800115c:	1e7a      	subs	r2, r7, #1
 800115e:	2f01      	cmp	r7, #1
 8001160:	d100      	bne.n	8001164 <__aeabi_dadd+0x220>
 8001162:	e0e0      	b.n	8001326 <__aeabi_dadd+0x3e2>
 8001164:	4c52      	ldr	r4, [pc, #328]	; (80012b0 <__aeabi_dadd+0x36c>)
 8001166:	42a7      	cmp	r7, r4
 8001168:	d100      	bne.n	800116c <__aeabi_dadd+0x228>
 800116a:	e166      	b.n	800143a <__aeabi_dadd+0x4f6>
 800116c:	0017      	movs	r7, r2
 800116e:	e7b2      	b.n	80010d6 <__aeabi_dadd+0x192>
 8001170:	0010      	movs	r0, r2
 8001172:	3b1f      	subs	r3, #31
 8001174:	40d8      	lsrs	r0, r3
 8001176:	2920      	cmp	r1, #32
 8001178:	d003      	beq.n	8001182 <__aeabi_dadd+0x23e>
 800117a:	2340      	movs	r3, #64	; 0x40
 800117c:	1a5b      	subs	r3, r3, r1
 800117e:	409a      	lsls	r2, r3
 8001180:	4314      	orrs	r4, r2
 8001182:	1e63      	subs	r3, r4, #1
 8001184:	419c      	sbcs	r4, r3
 8001186:	2300      	movs	r3, #0
 8001188:	2600      	movs	r6, #0
 800118a:	469a      	mov	sl, r3
 800118c:	4304      	orrs	r4, r0
 800118e:	0763      	lsls	r3, r4, #29
 8001190:	d000      	beq.n	8001194 <__aeabi_dadd+0x250>
 8001192:	e755      	b.n	8001040 <__aeabi_dadd+0xfc>
 8001194:	4652      	mov	r2, sl
 8001196:	08e3      	lsrs	r3, r4, #3
 8001198:	0752      	lsls	r2, r2, #29
 800119a:	4313      	orrs	r3, r2
 800119c:	4652      	mov	r2, sl
 800119e:	0037      	movs	r7, r6
 80011a0:	08d1      	lsrs	r1, r2, #3
 80011a2:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <__aeabi_dadd+0x36c>)
 80011a4:	4297      	cmp	r7, r2
 80011a6:	d01f      	beq.n	80011e8 <__aeabi_dadd+0x2a4>
 80011a8:	0309      	lsls	r1, r1, #12
 80011aa:	057a      	lsls	r2, r7, #21
 80011ac:	0b0c      	lsrs	r4, r1, #12
 80011ae:	0d52      	lsrs	r2, r2, #21
 80011b0:	e764      	b.n	800107c <__aeabi_dadd+0x138>
 80011b2:	4642      	mov	r2, r8
 80011b4:	464c      	mov	r4, r9
 80011b6:	4314      	orrs	r4, r2
 80011b8:	1e62      	subs	r2, r4, #1
 80011ba:	4194      	sbcs	r4, r2
 80011bc:	18e4      	adds	r4, r4, r3
 80011be:	429c      	cmp	r4, r3
 80011c0:	4192      	sbcs	r2, r2
 80011c2:	4252      	negs	r2, r2
 80011c4:	4692      	mov	sl, r2
 80011c6:	448a      	add	sl, r1
 80011c8:	4653      	mov	r3, sl
 80011ca:	021b      	lsls	r3, r3, #8
 80011cc:	d5df      	bpl.n	800118e <__aeabi_dadd+0x24a>
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <__aeabi_dadd+0x36c>)
 80011d0:	3601      	adds	r6, #1
 80011d2:	429e      	cmp	r6, r3
 80011d4:	d000      	beq.n	80011d8 <__aeabi_dadd+0x294>
 80011d6:	e0b3      	b.n	8001340 <__aeabi_dadd+0x3fc>
 80011d8:	0032      	movs	r2, r6
 80011da:	2400      	movs	r4, #0
 80011dc:	2300      	movs	r3, #0
 80011de:	e74d      	b.n	800107c <__aeabi_dadd+0x138>
 80011e0:	074a      	lsls	r2, r1, #29
 80011e2:	08db      	lsrs	r3, r3, #3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	08c9      	lsrs	r1, r1, #3
 80011e8:	001a      	movs	r2, r3
 80011ea:	430a      	orrs	r2, r1
 80011ec:	d100      	bne.n	80011f0 <__aeabi_dadd+0x2ac>
 80011ee:	e200      	b.n	80015f2 <__aeabi_dadd+0x6ae>
 80011f0:	2480      	movs	r4, #128	; 0x80
 80011f2:	0324      	lsls	r4, r4, #12
 80011f4:	430c      	orrs	r4, r1
 80011f6:	0324      	lsls	r4, r4, #12
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <__aeabi_dadd+0x36c>)
 80011fa:	0b24      	lsrs	r4, r4, #12
 80011fc:	e73e      	b.n	800107c <__aeabi_dadd+0x138>
 80011fe:	0020      	movs	r0, r4
 8001200:	f001 fd2a 	bl	8002c58 <__clzsi2>
 8001204:	0003      	movs	r3, r0
 8001206:	3318      	adds	r3, #24
 8001208:	2b1f      	cmp	r3, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x2ca>
 800120c:	e6f7      	b.n	8000ffe <__aeabi_dadd+0xba>
 800120e:	0022      	movs	r2, r4
 8001210:	3808      	subs	r0, #8
 8001212:	4082      	lsls	r2, r0
 8001214:	2400      	movs	r4, #0
 8001216:	42b3      	cmp	r3, r6
 8001218:	db00      	blt.n	800121c <__aeabi_dadd+0x2d8>
 800121a:	e6fc      	b.n	8001016 <__aeabi_dadd+0xd2>
 800121c:	1af6      	subs	r6, r6, r3
 800121e:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <__aeabi_dadd+0x370>)
 8001220:	401a      	ands	r2, r3
 8001222:	4692      	mov	sl, r2
 8001224:	e70a      	b.n	800103c <__aeabi_dadd+0xf8>
 8001226:	2f00      	cmp	r7, #0
 8001228:	d02b      	beq.n	8001282 <__aeabi_dadd+0x33e>
 800122a:	1b97      	subs	r7, r2, r6
 800122c:	2e00      	cmp	r6, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_dadd+0x2ee>
 8001230:	e0b8      	b.n	80013a4 <__aeabi_dadd+0x460>
 8001232:	4c1f      	ldr	r4, [pc, #124]	; (80012b0 <__aeabi_dadd+0x36c>)
 8001234:	42a2      	cmp	r2, r4
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x2f6>
 8001238:	e11c      	b.n	8001474 <__aeabi_dadd+0x530>
 800123a:	2480      	movs	r4, #128	; 0x80
 800123c:	0424      	lsls	r4, r4, #16
 800123e:	4321      	orrs	r1, r4
 8001240:	2f38      	cmp	r7, #56	; 0x38
 8001242:	dd00      	ble.n	8001246 <__aeabi_dadd+0x302>
 8001244:	e11e      	b.n	8001484 <__aeabi_dadd+0x540>
 8001246:	2f1f      	cmp	r7, #31
 8001248:	dd00      	ble.n	800124c <__aeabi_dadd+0x308>
 800124a:	e19e      	b.n	800158a <__aeabi_dadd+0x646>
 800124c:	2620      	movs	r6, #32
 800124e:	000c      	movs	r4, r1
 8001250:	1bf6      	subs	r6, r6, r7
 8001252:	0018      	movs	r0, r3
 8001254:	40b3      	lsls	r3, r6
 8001256:	40b4      	lsls	r4, r6
 8001258:	40f8      	lsrs	r0, r7
 800125a:	1e5e      	subs	r6, r3, #1
 800125c:	41b3      	sbcs	r3, r6
 800125e:	40f9      	lsrs	r1, r7
 8001260:	4304      	orrs	r4, r0
 8001262:	431c      	orrs	r4, r3
 8001264:	4489      	add	r9, r1
 8001266:	4444      	add	r4, r8
 8001268:	4544      	cmp	r4, r8
 800126a:	419b      	sbcs	r3, r3
 800126c:	425b      	negs	r3, r3
 800126e:	444b      	add	r3, r9
 8001270:	469a      	mov	sl, r3
 8001272:	0016      	movs	r6, r2
 8001274:	e7a8      	b.n	80011c8 <__aeabi_dadd+0x284>
 8001276:	4642      	mov	r2, r8
 8001278:	464c      	mov	r4, r9
 800127a:	4314      	orrs	r4, r2
 800127c:	1e62      	subs	r2, r4, #1
 800127e:	4194      	sbcs	r4, r2
 8001280:	e6a6      	b.n	8000fd0 <__aeabi_dadd+0x8c>
 8001282:	4c0d      	ldr	r4, [pc, #52]	; (80012b8 <__aeabi_dadd+0x374>)
 8001284:	1c72      	adds	r2, r6, #1
 8001286:	4222      	tst	r2, r4
 8001288:	d000      	beq.n	800128c <__aeabi_dadd+0x348>
 800128a:	e0a8      	b.n	80013de <__aeabi_dadd+0x49a>
 800128c:	000a      	movs	r2, r1
 800128e:	431a      	orrs	r2, r3
 8001290:	2e00      	cmp	r6, #0
 8001292:	d000      	beq.n	8001296 <__aeabi_dadd+0x352>
 8001294:	e10a      	b.n	80014ac <__aeabi_dadd+0x568>
 8001296:	2a00      	cmp	r2, #0
 8001298:	d100      	bne.n	800129c <__aeabi_dadd+0x358>
 800129a:	e15e      	b.n	800155a <__aeabi_dadd+0x616>
 800129c:	464a      	mov	r2, r9
 800129e:	4302      	orrs	r2, r0
 80012a0:	d000      	beq.n	80012a4 <__aeabi_dadd+0x360>
 80012a2:	e161      	b.n	8001568 <__aeabi_dadd+0x624>
 80012a4:	074a      	lsls	r2, r1, #29
 80012a6:	08db      	lsrs	r3, r3, #3
 80012a8:	4313      	orrs	r3, r2
 80012aa:	08c9      	lsrs	r1, r1, #3
 80012ac:	e77c      	b.n	80011a8 <__aeabi_dadd+0x264>
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	000007ff 	.word	0x000007ff
 80012b4:	ff7fffff 	.word	0xff7fffff
 80012b8:	000007fe 	.word	0x000007fe
 80012bc:	4ccf      	ldr	r4, [pc, #828]	; (80015fc <__aeabi_dadd+0x6b8>)
 80012be:	42a2      	cmp	r2, r4
 80012c0:	d100      	bne.n	80012c4 <__aeabi_dadd+0x380>
 80012c2:	e0ce      	b.n	8001462 <__aeabi_dadd+0x51e>
 80012c4:	2480      	movs	r4, #128	; 0x80
 80012c6:	0424      	lsls	r4, r4, #16
 80012c8:	4321      	orrs	r1, r4
 80012ca:	2f38      	cmp	r7, #56	; 0x38
 80012cc:	dc5b      	bgt.n	8001386 <__aeabi_dadd+0x442>
 80012ce:	2f1f      	cmp	r7, #31
 80012d0:	dd00      	ble.n	80012d4 <__aeabi_dadd+0x390>
 80012d2:	e0dc      	b.n	800148e <__aeabi_dadd+0x54a>
 80012d4:	2520      	movs	r5, #32
 80012d6:	000c      	movs	r4, r1
 80012d8:	1bed      	subs	r5, r5, r7
 80012da:	001e      	movs	r6, r3
 80012dc:	40ab      	lsls	r3, r5
 80012de:	40ac      	lsls	r4, r5
 80012e0:	40fe      	lsrs	r6, r7
 80012e2:	1e5d      	subs	r5, r3, #1
 80012e4:	41ab      	sbcs	r3, r5
 80012e6:	4334      	orrs	r4, r6
 80012e8:	40f9      	lsrs	r1, r7
 80012ea:	431c      	orrs	r4, r3
 80012ec:	464b      	mov	r3, r9
 80012ee:	1a5b      	subs	r3, r3, r1
 80012f0:	4699      	mov	r9, r3
 80012f2:	e04c      	b.n	800138e <__aeabi_dadd+0x44a>
 80012f4:	464a      	mov	r2, r9
 80012f6:	1a1c      	subs	r4, r3, r0
 80012f8:	1a88      	subs	r0, r1, r2
 80012fa:	42a3      	cmp	r3, r4
 80012fc:	4192      	sbcs	r2, r2
 80012fe:	4252      	negs	r2, r2
 8001300:	4692      	mov	sl, r2
 8001302:	0002      	movs	r2, r0
 8001304:	4650      	mov	r0, sl
 8001306:	1a12      	subs	r2, r2, r0
 8001308:	4692      	mov	sl, r2
 800130a:	0212      	lsls	r2, r2, #8
 800130c:	d478      	bmi.n	8001400 <__aeabi_dadd+0x4bc>
 800130e:	4653      	mov	r3, sl
 8001310:	4323      	orrs	r3, r4
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x3d2>
 8001314:	e66a      	b.n	8000fec <__aeabi_dadd+0xa8>
 8001316:	2100      	movs	r1, #0
 8001318:	2500      	movs	r5, #0
 800131a:	e745      	b.n	80011a8 <__aeabi_dadd+0x264>
 800131c:	074a      	lsls	r2, r1, #29
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	4313      	orrs	r3, r2
 8001322:	08c9      	lsrs	r1, r1, #3
 8001324:	e73d      	b.n	80011a2 <__aeabi_dadd+0x25e>
 8001326:	181c      	adds	r4, r3, r0
 8001328:	429c      	cmp	r4, r3
 800132a:	419b      	sbcs	r3, r3
 800132c:	4449      	add	r1, r9
 800132e:	468a      	mov	sl, r1
 8001330:	425b      	negs	r3, r3
 8001332:	449a      	add	sl, r3
 8001334:	4653      	mov	r3, sl
 8001336:	2601      	movs	r6, #1
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	d400      	bmi.n	800133e <__aeabi_dadd+0x3fa>
 800133c:	e727      	b.n	800118e <__aeabi_dadd+0x24a>
 800133e:	2602      	movs	r6, #2
 8001340:	4652      	mov	r2, sl
 8001342:	4baf      	ldr	r3, [pc, #700]	; (8001600 <__aeabi_dadd+0x6bc>)
 8001344:	2101      	movs	r1, #1
 8001346:	401a      	ands	r2, r3
 8001348:	0013      	movs	r3, r2
 800134a:	4021      	ands	r1, r4
 800134c:	0862      	lsrs	r2, r4, #1
 800134e:	430a      	orrs	r2, r1
 8001350:	07dc      	lsls	r4, r3, #31
 8001352:	085b      	lsrs	r3, r3, #1
 8001354:	469a      	mov	sl, r3
 8001356:	4314      	orrs	r4, r2
 8001358:	e670      	b.n	800103c <__aeabi_dadd+0xf8>
 800135a:	003a      	movs	r2, r7
 800135c:	464c      	mov	r4, r9
 800135e:	3a20      	subs	r2, #32
 8001360:	40d4      	lsrs	r4, r2
 8001362:	46a4      	mov	ip, r4
 8001364:	2f20      	cmp	r7, #32
 8001366:	d007      	beq.n	8001378 <__aeabi_dadd+0x434>
 8001368:	2240      	movs	r2, #64	; 0x40
 800136a:	4648      	mov	r0, r9
 800136c:	1bd2      	subs	r2, r2, r7
 800136e:	4090      	lsls	r0, r2
 8001370:	0002      	movs	r2, r0
 8001372:	4640      	mov	r0, r8
 8001374:	4310      	orrs	r0, r2
 8001376:	4680      	mov	r8, r0
 8001378:	4640      	mov	r0, r8
 800137a:	1e42      	subs	r2, r0, #1
 800137c:	4190      	sbcs	r0, r2
 800137e:	4662      	mov	r2, ip
 8001380:	0004      	movs	r4, r0
 8001382:	4314      	orrs	r4, r2
 8001384:	e624      	b.n	8000fd0 <__aeabi_dadd+0x8c>
 8001386:	4319      	orrs	r1, r3
 8001388:	000c      	movs	r4, r1
 800138a:	1e63      	subs	r3, r4, #1
 800138c:	419c      	sbcs	r4, r3
 800138e:	4643      	mov	r3, r8
 8001390:	1b1c      	subs	r4, r3, r4
 8001392:	45a0      	cmp	r8, r4
 8001394:	419b      	sbcs	r3, r3
 8001396:	4649      	mov	r1, r9
 8001398:	425b      	negs	r3, r3
 800139a:	1acb      	subs	r3, r1, r3
 800139c:	469a      	mov	sl, r3
 800139e:	4665      	mov	r5, ip
 80013a0:	0016      	movs	r6, r2
 80013a2:	e61b      	b.n	8000fdc <__aeabi_dadd+0x98>
 80013a4:	000c      	movs	r4, r1
 80013a6:	431c      	orrs	r4, r3
 80013a8:	d100      	bne.n	80013ac <__aeabi_dadd+0x468>
 80013aa:	e0c7      	b.n	800153c <__aeabi_dadd+0x5f8>
 80013ac:	1e7c      	subs	r4, r7, #1
 80013ae:	2f01      	cmp	r7, #1
 80013b0:	d100      	bne.n	80013b4 <__aeabi_dadd+0x470>
 80013b2:	e0f9      	b.n	80015a8 <__aeabi_dadd+0x664>
 80013b4:	4e91      	ldr	r6, [pc, #580]	; (80015fc <__aeabi_dadd+0x6b8>)
 80013b6:	42b7      	cmp	r7, r6
 80013b8:	d05c      	beq.n	8001474 <__aeabi_dadd+0x530>
 80013ba:	0027      	movs	r7, r4
 80013bc:	e740      	b.n	8001240 <__aeabi_dadd+0x2fc>
 80013be:	2220      	movs	r2, #32
 80013c0:	464c      	mov	r4, r9
 80013c2:	4640      	mov	r0, r8
 80013c4:	1bd2      	subs	r2, r2, r7
 80013c6:	4094      	lsls	r4, r2
 80013c8:	40f8      	lsrs	r0, r7
 80013ca:	4304      	orrs	r4, r0
 80013cc:	4640      	mov	r0, r8
 80013ce:	4090      	lsls	r0, r2
 80013d0:	1e42      	subs	r2, r0, #1
 80013d2:	4190      	sbcs	r0, r2
 80013d4:	464a      	mov	r2, r9
 80013d6:	40fa      	lsrs	r2, r7
 80013d8:	4304      	orrs	r4, r0
 80013da:	1889      	adds	r1, r1, r2
 80013dc:	e6ee      	b.n	80011bc <__aeabi_dadd+0x278>
 80013de:	4c87      	ldr	r4, [pc, #540]	; (80015fc <__aeabi_dadd+0x6b8>)
 80013e0:	42a2      	cmp	r2, r4
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x4a2>
 80013e4:	e6f9      	b.n	80011da <__aeabi_dadd+0x296>
 80013e6:	1818      	adds	r0, r3, r0
 80013e8:	4298      	cmp	r0, r3
 80013ea:	419b      	sbcs	r3, r3
 80013ec:	4449      	add	r1, r9
 80013ee:	425b      	negs	r3, r3
 80013f0:	18cb      	adds	r3, r1, r3
 80013f2:	07dc      	lsls	r4, r3, #31
 80013f4:	0840      	lsrs	r0, r0, #1
 80013f6:	085b      	lsrs	r3, r3, #1
 80013f8:	469a      	mov	sl, r3
 80013fa:	0016      	movs	r6, r2
 80013fc:	4304      	orrs	r4, r0
 80013fe:	e6c6      	b.n	800118e <__aeabi_dadd+0x24a>
 8001400:	4642      	mov	r2, r8
 8001402:	1ad4      	subs	r4, r2, r3
 8001404:	45a0      	cmp	r8, r4
 8001406:	4180      	sbcs	r0, r0
 8001408:	464b      	mov	r3, r9
 800140a:	4240      	negs	r0, r0
 800140c:	1a59      	subs	r1, r3, r1
 800140e:	1a0b      	subs	r3, r1, r0
 8001410:	469a      	mov	sl, r3
 8001412:	4665      	mov	r5, ip
 8001414:	e5ea      	b.n	8000fec <__aeabi_dadd+0xa8>
 8001416:	464b      	mov	r3, r9
 8001418:	464a      	mov	r2, r9
 800141a:	08c0      	lsrs	r0, r0, #3
 800141c:	075b      	lsls	r3, r3, #29
 800141e:	4665      	mov	r5, ip
 8001420:	4303      	orrs	r3, r0
 8001422:	08d1      	lsrs	r1, r2, #3
 8001424:	e6bd      	b.n	80011a2 <__aeabi_dadd+0x25e>
 8001426:	2a00      	cmp	r2, #0
 8001428:	d000      	beq.n	800142c <__aeabi_dadd+0x4e8>
 800142a:	e08e      	b.n	800154a <__aeabi_dadd+0x606>
 800142c:	464b      	mov	r3, r9
 800142e:	4303      	orrs	r3, r0
 8001430:	d117      	bne.n	8001462 <__aeabi_dadd+0x51e>
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	2500      	movs	r5, #0
 8001436:	0309      	lsls	r1, r1, #12
 8001438:	e6da      	b.n	80011f0 <__aeabi_dadd+0x2ac>
 800143a:	074a      	lsls	r2, r1, #29
 800143c:	08db      	lsrs	r3, r3, #3
 800143e:	4313      	orrs	r3, r2
 8001440:	08c9      	lsrs	r1, r1, #3
 8001442:	e6d1      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 8001444:	1a1c      	subs	r4, r3, r0
 8001446:	464a      	mov	r2, r9
 8001448:	42a3      	cmp	r3, r4
 800144a:	419b      	sbcs	r3, r3
 800144c:	1a89      	subs	r1, r1, r2
 800144e:	425b      	negs	r3, r3
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	469a      	mov	sl, r3
 8001454:	2601      	movs	r6, #1
 8001456:	e5c1      	b.n	8000fdc <__aeabi_dadd+0x98>
 8001458:	074a      	lsls	r2, r1, #29
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	4313      	orrs	r3, r2
 800145e:	08c9      	lsrs	r1, r1, #3
 8001460:	e69f      	b.n	80011a2 <__aeabi_dadd+0x25e>
 8001462:	4643      	mov	r3, r8
 8001464:	08d8      	lsrs	r0, r3, #3
 8001466:	464b      	mov	r3, r9
 8001468:	464a      	mov	r2, r9
 800146a:	075b      	lsls	r3, r3, #29
 800146c:	4665      	mov	r5, ip
 800146e:	4303      	orrs	r3, r0
 8001470:	08d1      	lsrs	r1, r2, #3
 8001472:	e6b9      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 8001474:	4643      	mov	r3, r8
 8001476:	08d8      	lsrs	r0, r3, #3
 8001478:	464b      	mov	r3, r9
 800147a:	464a      	mov	r2, r9
 800147c:	075b      	lsls	r3, r3, #29
 800147e:	4303      	orrs	r3, r0
 8001480:	08d1      	lsrs	r1, r2, #3
 8001482:	e6b1      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 8001484:	4319      	orrs	r1, r3
 8001486:	000c      	movs	r4, r1
 8001488:	1e63      	subs	r3, r4, #1
 800148a:	419c      	sbcs	r4, r3
 800148c:	e6eb      	b.n	8001266 <__aeabi_dadd+0x322>
 800148e:	003c      	movs	r4, r7
 8001490:	000d      	movs	r5, r1
 8001492:	3c20      	subs	r4, #32
 8001494:	40e5      	lsrs	r5, r4
 8001496:	2f20      	cmp	r7, #32
 8001498:	d003      	beq.n	80014a2 <__aeabi_dadd+0x55e>
 800149a:	2440      	movs	r4, #64	; 0x40
 800149c:	1be4      	subs	r4, r4, r7
 800149e:	40a1      	lsls	r1, r4
 80014a0:	430b      	orrs	r3, r1
 80014a2:	001c      	movs	r4, r3
 80014a4:	1e63      	subs	r3, r4, #1
 80014a6:	419c      	sbcs	r4, r3
 80014a8:	432c      	orrs	r4, r5
 80014aa:	e770      	b.n	800138e <__aeabi_dadd+0x44a>
 80014ac:	2a00      	cmp	r2, #0
 80014ae:	d0e1      	beq.n	8001474 <__aeabi_dadd+0x530>
 80014b0:	464a      	mov	r2, r9
 80014b2:	4302      	orrs	r2, r0
 80014b4:	d0c1      	beq.n	800143a <__aeabi_dadd+0x4f6>
 80014b6:	074a      	lsls	r2, r1, #29
 80014b8:	08db      	lsrs	r3, r3, #3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	08c9      	lsrs	r1, r1, #3
 80014c0:	0312      	lsls	r2, r2, #12
 80014c2:	4211      	tst	r1, r2
 80014c4:	d008      	beq.n	80014d8 <__aeabi_dadd+0x594>
 80014c6:	4648      	mov	r0, r9
 80014c8:	08c4      	lsrs	r4, r0, #3
 80014ca:	4214      	tst	r4, r2
 80014cc:	d104      	bne.n	80014d8 <__aeabi_dadd+0x594>
 80014ce:	4643      	mov	r3, r8
 80014d0:	0021      	movs	r1, r4
 80014d2:	08db      	lsrs	r3, r3, #3
 80014d4:	0742      	lsls	r2, r0, #29
 80014d6:	4313      	orrs	r3, r2
 80014d8:	0f5a      	lsrs	r2, r3, #29
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	0752      	lsls	r2, r2, #29
 80014de:	08db      	lsrs	r3, r3, #3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	e681      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 80014e4:	464b      	mov	r3, r9
 80014e6:	4303      	orrs	r3, r0
 80014e8:	d100      	bne.n	80014ec <__aeabi_dadd+0x5a8>
 80014ea:	e714      	b.n	8001316 <__aeabi_dadd+0x3d2>
 80014ec:	464b      	mov	r3, r9
 80014ee:	464a      	mov	r2, r9
 80014f0:	08c0      	lsrs	r0, r0, #3
 80014f2:	075b      	lsls	r3, r3, #29
 80014f4:	4665      	mov	r5, ip
 80014f6:	4303      	orrs	r3, r0
 80014f8:	08d1      	lsrs	r1, r2, #3
 80014fa:	e655      	b.n	80011a8 <__aeabi_dadd+0x264>
 80014fc:	1ac4      	subs	r4, r0, r3
 80014fe:	45a0      	cmp	r8, r4
 8001500:	4180      	sbcs	r0, r0
 8001502:	464b      	mov	r3, r9
 8001504:	4240      	negs	r0, r0
 8001506:	1a59      	subs	r1, r3, r1
 8001508:	1a0b      	subs	r3, r1, r0
 800150a:	469a      	mov	sl, r3
 800150c:	4665      	mov	r5, ip
 800150e:	2601      	movs	r6, #1
 8001510:	e564      	b.n	8000fdc <__aeabi_dadd+0x98>
 8001512:	1a1c      	subs	r4, r3, r0
 8001514:	464a      	mov	r2, r9
 8001516:	42a3      	cmp	r3, r4
 8001518:	4180      	sbcs	r0, r0
 800151a:	1a8a      	subs	r2, r1, r2
 800151c:	4240      	negs	r0, r0
 800151e:	1a12      	subs	r2, r2, r0
 8001520:	4692      	mov	sl, r2
 8001522:	0212      	lsls	r2, r2, #8
 8001524:	d549      	bpl.n	80015ba <__aeabi_dadd+0x676>
 8001526:	4642      	mov	r2, r8
 8001528:	1ad4      	subs	r4, r2, r3
 800152a:	45a0      	cmp	r8, r4
 800152c:	4180      	sbcs	r0, r0
 800152e:	464b      	mov	r3, r9
 8001530:	4240      	negs	r0, r0
 8001532:	1a59      	subs	r1, r3, r1
 8001534:	1a0b      	subs	r3, r1, r0
 8001536:	469a      	mov	sl, r3
 8001538:	4665      	mov	r5, ip
 800153a:	e57f      	b.n	800103c <__aeabi_dadd+0xf8>
 800153c:	464b      	mov	r3, r9
 800153e:	464a      	mov	r2, r9
 8001540:	08c0      	lsrs	r0, r0, #3
 8001542:	075b      	lsls	r3, r3, #29
 8001544:	4303      	orrs	r3, r0
 8001546:	08d1      	lsrs	r1, r2, #3
 8001548:	e62b      	b.n	80011a2 <__aeabi_dadd+0x25e>
 800154a:	464a      	mov	r2, r9
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	4302      	orrs	r2, r0
 8001550:	d138      	bne.n	80015c4 <__aeabi_dadd+0x680>
 8001552:	074a      	lsls	r2, r1, #29
 8001554:	4313      	orrs	r3, r2
 8001556:	08c9      	lsrs	r1, r1, #3
 8001558:	e646      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 800155a:	464b      	mov	r3, r9
 800155c:	464a      	mov	r2, r9
 800155e:	08c0      	lsrs	r0, r0, #3
 8001560:	075b      	lsls	r3, r3, #29
 8001562:	4303      	orrs	r3, r0
 8001564:	08d1      	lsrs	r1, r2, #3
 8001566:	e61f      	b.n	80011a8 <__aeabi_dadd+0x264>
 8001568:	181c      	adds	r4, r3, r0
 800156a:	429c      	cmp	r4, r3
 800156c:	419b      	sbcs	r3, r3
 800156e:	4449      	add	r1, r9
 8001570:	468a      	mov	sl, r1
 8001572:	425b      	negs	r3, r3
 8001574:	449a      	add	sl, r3
 8001576:	4653      	mov	r3, sl
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	d400      	bmi.n	800157e <__aeabi_dadd+0x63a>
 800157c:	e607      	b.n	800118e <__aeabi_dadd+0x24a>
 800157e:	4652      	mov	r2, sl
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <__aeabi_dadd+0x6bc>)
 8001582:	2601      	movs	r6, #1
 8001584:	401a      	ands	r2, r3
 8001586:	4692      	mov	sl, r2
 8001588:	e601      	b.n	800118e <__aeabi_dadd+0x24a>
 800158a:	003c      	movs	r4, r7
 800158c:	000e      	movs	r6, r1
 800158e:	3c20      	subs	r4, #32
 8001590:	40e6      	lsrs	r6, r4
 8001592:	2f20      	cmp	r7, #32
 8001594:	d003      	beq.n	800159e <__aeabi_dadd+0x65a>
 8001596:	2440      	movs	r4, #64	; 0x40
 8001598:	1be4      	subs	r4, r4, r7
 800159a:	40a1      	lsls	r1, r4
 800159c:	430b      	orrs	r3, r1
 800159e:	001c      	movs	r4, r3
 80015a0:	1e63      	subs	r3, r4, #1
 80015a2:	419c      	sbcs	r4, r3
 80015a4:	4334      	orrs	r4, r6
 80015a6:	e65e      	b.n	8001266 <__aeabi_dadd+0x322>
 80015a8:	4443      	add	r3, r8
 80015aa:	4283      	cmp	r3, r0
 80015ac:	4180      	sbcs	r0, r0
 80015ae:	4449      	add	r1, r9
 80015b0:	468a      	mov	sl, r1
 80015b2:	4240      	negs	r0, r0
 80015b4:	001c      	movs	r4, r3
 80015b6:	4482      	add	sl, r0
 80015b8:	e6bc      	b.n	8001334 <__aeabi_dadd+0x3f0>
 80015ba:	4653      	mov	r3, sl
 80015bc:	4323      	orrs	r3, r4
 80015be:	d100      	bne.n	80015c2 <__aeabi_dadd+0x67e>
 80015c0:	e6a9      	b.n	8001316 <__aeabi_dadd+0x3d2>
 80015c2:	e5e4      	b.n	800118e <__aeabi_dadd+0x24a>
 80015c4:	074a      	lsls	r2, r1, #29
 80015c6:	4313      	orrs	r3, r2
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	08c9      	lsrs	r1, r1, #3
 80015cc:	0312      	lsls	r2, r2, #12
 80015ce:	4211      	tst	r1, r2
 80015d0:	d009      	beq.n	80015e6 <__aeabi_dadd+0x6a2>
 80015d2:	4648      	mov	r0, r9
 80015d4:	08c4      	lsrs	r4, r0, #3
 80015d6:	4214      	tst	r4, r2
 80015d8:	d105      	bne.n	80015e6 <__aeabi_dadd+0x6a2>
 80015da:	4643      	mov	r3, r8
 80015dc:	4665      	mov	r5, ip
 80015de:	0021      	movs	r1, r4
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	0742      	lsls	r2, r0, #29
 80015e4:	4313      	orrs	r3, r2
 80015e6:	0f5a      	lsrs	r2, r3, #29
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	08db      	lsrs	r3, r3, #3
 80015ec:	0752      	lsls	r2, r2, #29
 80015ee:	4313      	orrs	r3, r2
 80015f0:	e5fa      	b.n	80011e8 <__aeabi_dadd+0x2a4>
 80015f2:	2300      	movs	r3, #0
 80015f4:	4a01      	ldr	r2, [pc, #4]	; (80015fc <__aeabi_dadd+0x6b8>)
 80015f6:	001c      	movs	r4, r3
 80015f8:	e540      	b.n	800107c <__aeabi_dadd+0x138>
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	000007ff 	.word	0x000007ff
 8001600:	ff7fffff 	.word	0xff7fffff

08001604 <__aeabi_ddiv>:
 8001604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001606:	4657      	mov	r7, sl
 8001608:	464e      	mov	r6, r9
 800160a:	4645      	mov	r5, r8
 800160c:	46de      	mov	lr, fp
 800160e:	b5e0      	push	{r5, r6, r7, lr}
 8001610:	030c      	lsls	r4, r1, #12
 8001612:	001f      	movs	r7, r3
 8001614:	004b      	lsls	r3, r1, #1
 8001616:	4681      	mov	r9, r0
 8001618:	4692      	mov	sl, r2
 800161a:	0005      	movs	r5, r0
 800161c:	b085      	sub	sp, #20
 800161e:	0b24      	lsrs	r4, r4, #12
 8001620:	0d5b      	lsrs	r3, r3, #21
 8001622:	0fce      	lsrs	r6, r1, #31
 8001624:	2b00      	cmp	r3, #0
 8001626:	d100      	bne.n	800162a <__aeabi_ddiv+0x26>
 8001628:	e152      	b.n	80018d0 <__aeabi_ddiv+0x2cc>
 800162a:	4ad2      	ldr	r2, [pc, #840]	; (8001974 <__aeabi_ddiv+0x370>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d100      	bne.n	8001632 <__aeabi_ddiv+0x2e>
 8001630:	e16e      	b.n	8001910 <__aeabi_ddiv+0x30c>
 8001632:	0f42      	lsrs	r2, r0, #29
 8001634:	00e4      	lsls	r4, r4, #3
 8001636:	4314      	orrs	r4, r2
 8001638:	2280      	movs	r2, #128	; 0x80
 800163a:	0412      	lsls	r2, r2, #16
 800163c:	4322      	orrs	r2, r4
 800163e:	4690      	mov	r8, r2
 8001640:	4acd      	ldr	r2, [pc, #820]	; (8001978 <__aeabi_ddiv+0x374>)
 8001642:	00c5      	lsls	r5, r0, #3
 8001644:	4693      	mov	fp, r2
 8001646:	449b      	add	fp, r3
 8001648:	2300      	movs	r3, #0
 800164a:	4699      	mov	r9, r3
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	033c      	lsls	r4, r7, #12
 8001650:	007b      	lsls	r3, r7, #1
 8001652:	4650      	mov	r0, sl
 8001654:	0b24      	lsrs	r4, r4, #12
 8001656:	0d5b      	lsrs	r3, r3, #21
 8001658:	0fff      	lsrs	r7, r7, #31
 800165a:	2b00      	cmp	r3, #0
 800165c:	d100      	bne.n	8001660 <__aeabi_ddiv+0x5c>
 800165e:	e11a      	b.n	8001896 <__aeabi_ddiv+0x292>
 8001660:	4ac4      	ldr	r2, [pc, #784]	; (8001974 <__aeabi_ddiv+0x370>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d100      	bne.n	8001668 <__aeabi_ddiv+0x64>
 8001666:	e15e      	b.n	8001926 <__aeabi_ddiv+0x322>
 8001668:	0f42      	lsrs	r2, r0, #29
 800166a:	00e4      	lsls	r4, r4, #3
 800166c:	4322      	orrs	r2, r4
 800166e:	2480      	movs	r4, #128	; 0x80
 8001670:	0424      	lsls	r4, r4, #16
 8001672:	4314      	orrs	r4, r2
 8001674:	4ac0      	ldr	r2, [pc, #768]	; (8001978 <__aeabi_ddiv+0x374>)
 8001676:	00c1      	lsls	r1, r0, #3
 8001678:	4694      	mov	ip, r2
 800167a:	465a      	mov	r2, fp
 800167c:	4463      	add	r3, ip
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	469b      	mov	fp, r3
 8001682:	2000      	movs	r0, #0
 8001684:	0033      	movs	r3, r6
 8001686:	407b      	eors	r3, r7
 8001688:	469a      	mov	sl, r3
 800168a:	464b      	mov	r3, r9
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d827      	bhi.n	80016e0 <__aeabi_ddiv+0xdc>
 8001690:	4aba      	ldr	r2, [pc, #744]	; (800197c <__aeabi_ddiv+0x378>)
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	58d3      	ldr	r3, [r2, r3]
 8001696:	469f      	mov	pc, r3
 8001698:	46b2      	mov	sl, r6
 800169a:	9b00      	ldr	r3, [sp, #0]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d016      	beq.n	80016ce <__aeabi_ddiv+0xca>
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d100      	bne.n	80016a6 <__aeabi_ddiv+0xa2>
 80016a4:	e287      	b.n	8001bb6 <__aeabi_ddiv+0x5b2>
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d000      	beq.n	80016ac <__aeabi_ddiv+0xa8>
 80016aa:	e0d5      	b.n	8001858 <__aeabi_ddiv+0x254>
 80016ac:	2300      	movs	r3, #0
 80016ae:	2200      	movs	r2, #0
 80016b0:	2500      	movs	r5, #0
 80016b2:	051b      	lsls	r3, r3, #20
 80016b4:	4313      	orrs	r3, r2
 80016b6:	4652      	mov	r2, sl
 80016b8:	07d2      	lsls	r2, r2, #31
 80016ba:	4313      	orrs	r3, r2
 80016bc:	0028      	movs	r0, r5
 80016be:	0019      	movs	r1, r3
 80016c0:	b005      	add	sp, #20
 80016c2:	bcf0      	pop	{r4, r5, r6, r7}
 80016c4:	46bb      	mov	fp, r7
 80016c6:	46b2      	mov	sl, r6
 80016c8:	46a9      	mov	r9, r5
 80016ca:	46a0      	mov	r8, r4
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016ce:	2200      	movs	r2, #0
 80016d0:	2500      	movs	r5, #0
 80016d2:	4ba8      	ldr	r3, [pc, #672]	; (8001974 <__aeabi_ddiv+0x370>)
 80016d4:	e7ed      	b.n	80016b2 <__aeabi_ddiv+0xae>
 80016d6:	46ba      	mov	sl, r7
 80016d8:	46a0      	mov	r8, r4
 80016da:	000d      	movs	r5, r1
 80016dc:	9000      	str	r0, [sp, #0]
 80016de:	e7dc      	b.n	800169a <__aeabi_ddiv+0x96>
 80016e0:	4544      	cmp	r4, r8
 80016e2:	d200      	bcs.n	80016e6 <__aeabi_ddiv+0xe2>
 80016e4:	e1c4      	b.n	8001a70 <__aeabi_ddiv+0x46c>
 80016e6:	d100      	bne.n	80016ea <__aeabi_ddiv+0xe6>
 80016e8:	e1bf      	b.n	8001a6a <__aeabi_ddiv+0x466>
 80016ea:	2301      	movs	r3, #1
 80016ec:	425b      	negs	r3, r3
 80016ee:	469c      	mov	ip, r3
 80016f0:	002e      	movs	r6, r5
 80016f2:	4640      	mov	r0, r8
 80016f4:	2500      	movs	r5, #0
 80016f6:	44e3      	add	fp, ip
 80016f8:	0223      	lsls	r3, r4, #8
 80016fa:	0e0c      	lsrs	r4, r1, #24
 80016fc:	431c      	orrs	r4, r3
 80016fe:	0c1b      	lsrs	r3, r3, #16
 8001700:	4699      	mov	r9, r3
 8001702:	0423      	lsls	r3, r4, #16
 8001704:	020a      	lsls	r2, r1, #8
 8001706:	0c1f      	lsrs	r7, r3, #16
 8001708:	4649      	mov	r1, r9
 800170a:	9200      	str	r2, [sp, #0]
 800170c:	9701      	str	r7, [sp, #4]
 800170e:	f7fe fd81 	bl	8000214 <__aeabi_uidivmod>
 8001712:	0002      	movs	r2, r0
 8001714:	437a      	muls	r2, r7
 8001716:	040b      	lsls	r3, r1, #16
 8001718:	0c31      	lsrs	r1, r6, #16
 800171a:	4680      	mov	r8, r0
 800171c:	4319      	orrs	r1, r3
 800171e:	428a      	cmp	r2, r1
 8001720:	d907      	bls.n	8001732 <__aeabi_ddiv+0x12e>
 8001722:	2301      	movs	r3, #1
 8001724:	425b      	negs	r3, r3
 8001726:	469c      	mov	ip, r3
 8001728:	1909      	adds	r1, r1, r4
 800172a:	44e0      	add	r8, ip
 800172c:	428c      	cmp	r4, r1
 800172e:	d800      	bhi.n	8001732 <__aeabi_ddiv+0x12e>
 8001730:	e201      	b.n	8001b36 <__aeabi_ddiv+0x532>
 8001732:	1a88      	subs	r0, r1, r2
 8001734:	4649      	mov	r1, r9
 8001736:	f7fe fd6d 	bl	8000214 <__aeabi_uidivmod>
 800173a:	9a01      	ldr	r2, [sp, #4]
 800173c:	0436      	lsls	r6, r6, #16
 800173e:	4342      	muls	r2, r0
 8001740:	0409      	lsls	r1, r1, #16
 8001742:	0c36      	lsrs	r6, r6, #16
 8001744:	0003      	movs	r3, r0
 8001746:	430e      	orrs	r6, r1
 8001748:	42b2      	cmp	r2, r6
 800174a:	d904      	bls.n	8001756 <__aeabi_ddiv+0x152>
 800174c:	1936      	adds	r6, r6, r4
 800174e:	3b01      	subs	r3, #1
 8001750:	42b4      	cmp	r4, r6
 8001752:	d800      	bhi.n	8001756 <__aeabi_ddiv+0x152>
 8001754:	e1e9      	b.n	8001b2a <__aeabi_ddiv+0x526>
 8001756:	1ab0      	subs	r0, r6, r2
 8001758:	4642      	mov	r2, r8
 800175a:	9e00      	ldr	r6, [sp, #0]
 800175c:	0412      	lsls	r2, r2, #16
 800175e:	431a      	orrs	r2, r3
 8001760:	0c33      	lsrs	r3, r6, #16
 8001762:	001f      	movs	r7, r3
 8001764:	0c11      	lsrs	r1, r2, #16
 8001766:	4690      	mov	r8, r2
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	0413      	lsls	r3, r2, #16
 800176c:	0432      	lsls	r2, r6, #16
 800176e:	0c16      	lsrs	r6, r2, #16
 8001770:	0032      	movs	r2, r6
 8001772:	0c1b      	lsrs	r3, r3, #16
 8001774:	435a      	muls	r2, r3
 8001776:	9603      	str	r6, [sp, #12]
 8001778:	437b      	muls	r3, r7
 800177a:	434e      	muls	r6, r1
 800177c:	4379      	muls	r1, r7
 800177e:	0c17      	lsrs	r7, r2, #16
 8001780:	46bc      	mov	ip, r7
 8001782:	199b      	adds	r3, r3, r6
 8001784:	4463      	add	r3, ip
 8001786:	429e      	cmp	r6, r3
 8001788:	d903      	bls.n	8001792 <__aeabi_ddiv+0x18e>
 800178a:	2680      	movs	r6, #128	; 0x80
 800178c:	0276      	lsls	r6, r6, #9
 800178e:	46b4      	mov	ip, r6
 8001790:	4461      	add	r1, ip
 8001792:	0c1e      	lsrs	r6, r3, #16
 8001794:	1871      	adds	r1, r6, r1
 8001796:	0416      	lsls	r6, r2, #16
 8001798:	041b      	lsls	r3, r3, #16
 800179a:	0c36      	lsrs	r6, r6, #16
 800179c:	199e      	adds	r6, r3, r6
 800179e:	4288      	cmp	r0, r1
 80017a0:	d302      	bcc.n	80017a8 <__aeabi_ddiv+0x1a4>
 80017a2:	d112      	bne.n	80017ca <__aeabi_ddiv+0x1c6>
 80017a4:	42b5      	cmp	r5, r6
 80017a6:	d210      	bcs.n	80017ca <__aeabi_ddiv+0x1c6>
 80017a8:	4643      	mov	r3, r8
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	9b00      	ldr	r3, [sp, #0]
 80017ae:	469c      	mov	ip, r3
 80017b0:	4465      	add	r5, ip
 80017b2:	001f      	movs	r7, r3
 80017b4:	429d      	cmp	r5, r3
 80017b6:	419b      	sbcs	r3, r3
 80017b8:	425b      	negs	r3, r3
 80017ba:	191b      	adds	r3, r3, r4
 80017bc:	18c0      	adds	r0, r0, r3
 80017be:	4284      	cmp	r4, r0
 80017c0:	d200      	bcs.n	80017c4 <__aeabi_ddiv+0x1c0>
 80017c2:	e19e      	b.n	8001b02 <__aeabi_ddiv+0x4fe>
 80017c4:	d100      	bne.n	80017c8 <__aeabi_ddiv+0x1c4>
 80017c6:	e199      	b.n	8001afc <__aeabi_ddiv+0x4f8>
 80017c8:	4690      	mov	r8, r2
 80017ca:	1bae      	subs	r6, r5, r6
 80017cc:	42b5      	cmp	r5, r6
 80017ce:	41ad      	sbcs	r5, r5
 80017d0:	1a40      	subs	r0, r0, r1
 80017d2:	426d      	negs	r5, r5
 80017d4:	1b40      	subs	r0, r0, r5
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d100      	bne.n	80017dc <__aeabi_ddiv+0x1d8>
 80017da:	e1d2      	b.n	8001b82 <__aeabi_ddiv+0x57e>
 80017dc:	4649      	mov	r1, r9
 80017de:	f7fe fd19 	bl	8000214 <__aeabi_uidivmod>
 80017e2:	9a01      	ldr	r2, [sp, #4]
 80017e4:	040b      	lsls	r3, r1, #16
 80017e6:	4342      	muls	r2, r0
 80017e8:	0c31      	lsrs	r1, r6, #16
 80017ea:	0005      	movs	r5, r0
 80017ec:	4319      	orrs	r1, r3
 80017ee:	428a      	cmp	r2, r1
 80017f0:	d900      	bls.n	80017f4 <__aeabi_ddiv+0x1f0>
 80017f2:	e16c      	b.n	8001ace <__aeabi_ddiv+0x4ca>
 80017f4:	1a88      	subs	r0, r1, r2
 80017f6:	4649      	mov	r1, r9
 80017f8:	f7fe fd0c 	bl	8000214 <__aeabi_uidivmod>
 80017fc:	9a01      	ldr	r2, [sp, #4]
 80017fe:	0436      	lsls	r6, r6, #16
 8001800:	4342      	muls	r2, r0
 8001802:	0409      	lsls	r1, r1, #16
 8001804:	0c36      	lsrs	r6, r6, #16
 8001806:	0003      	movs	r3, r0
 8001808:	430e      	orrs	r6, r1
 800180a:	42b2      	cmp	r2, r6
 800180c:	d900      	bls.n	8001810 <__aeabi_ddiv+0x20c>
 800180e:	e153      	b.n	8001ab8 <__aeabi_ddiv+0x4b4>
 8001810:	9803      	ldr	r0, [sp, #12]
 8001812:	1ab6      	subs	r6, r6, r2
 8001814:	0002      	movs	r2, r0
 8001816:	042d      	lsls	r5, r5, #16
 8001818:	431d      	orrs	r5, r3
 800181a:	9f02      	ldr	r7, [sp, #8]
 800181c:	042b      	lsls	r3, r5, #16
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	435a      	muls	r2, r3
 8001822:	437b      	muls	r3, r7
 8001824:	469c      	mov	ip, r3
 8001826:	0c29      	lsrs	r1, r5, #16
 8001828:	4348      	muls	r0, r1
 800182a:	0c13      	lsrs	r3, r2, #16
 800182c:	4484      	add	ip, r0
 800182e:	4463      	add	r3, ip
 8001830:	4379      	muls	r1, r7
 8001832:	4298      	cmp	r0, r3
 8001834:	d903      	bls.n	800183e <__aeabi_ddiv+0x23a>
 8001836:	2080      	movs	r0, #128	; 0x80
 8001838:	0240      	lsls	r0, r0, #9
 800183a:	4684      	mov	ip, r0
 800183c:	4461      	add	r1, ip
 800183e:	0c18      	lsrs	r0, r3, #16
 8001840:	0412      	lsls	r2, r2, #16
 8001842:	041b      	lsls	r3, r3, #16
 8001844:	0c12      	lsrs	r2, r2, #16
 8001846:	1840      	adds	r0, r0, r1
 8001848:	189b      	adds	r3, r3, r2
 800184a:	4286      	cmp	r6, r0
 800184c:	d200      	bcs.n	8001850 <__aeabi_ddiv+0x24c>
 800184e:	e100      	b.n	8001a52 <__aeabi_ddiv+0x44e>
 8001850:	d100      	bne.n	8001854 <__aeabi_ddiv+0x250>
 8001852:	e0fb      	b.n	8001a4c <__aeabi_ddiv+0x448>
 8001854:	2301      	movs	r3, #1
 8001856:	431d      	orrs	r5, r3
 8001858:	4b49      	ldr	r3, [pc, #292]	; (8001980 <__aeabi_ddiv+0x37c>)
 800185a:	445b      	add	r3, fp
 800185c:	2b00      	cmp	r3, #0
 800185e:	dc00      	bgt.n	8001862 <__aeabi_ddiv+0x25e>
 8001860:	e0aa      	b.n	80019b8 <__aeabi_ddiv+0x3b4>
 8001862:	076a      	lsls	r2, r5, #29
 8001864:	d000      	beq.n	8001868 <__aeabi_ddiv+0x264>
 8001866:	e13d      	b.n	8001ae4 <__aeabi_ddiv+0x4e0>
 8001868:	08e9      	lsrs	r1, r5, #3
 800186a:	4642      	mov	r2, r8
 800186c:	01d2      	lsls	r2, r2, #7
 800186e:	d506      	bpl.n	800187e <__aeabi_ddiv+0x27a>
 8001870:	4642      	mov	r2, r8
 8001872:	4b44      	ldr	r3, [pc, #272]	; (8001984 <__aeabi_ddiv+0x380>)
 8001874:	401a      	ands	r2, r3
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	4690      	mov	r8, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	445b      	add	r3, fp
 800187e:	4a42      	ldr	r2, [pc, #264]	; (8001988 <__aeabi_ddiv+0x384>)
 8001880:	4293      	cmp	r3, r2
 8001882:	dd00      	ble.n	8001886 <__aeabi_ddiv+0x282>
 8001884:	e723      	b.n	80016ce <__aeabi_ddiv+0xca>
 8001886:	4642      	mov	r2, r8
 8001888:	055b      	lsls	r3, r3, #21
 800188a:	0755      	lsls	r5, r2, #29
 800188c:	0252      	lsls	r2, r2, #9
 800188e:	430d      	orrs	r5, r1
 8001890:	0b12      	lsrs	r2, r2, #12
 8001892:	0d5b      	lsrs	r3, r3, #21
 8001894:	e70d      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001896:	4651      	mov	r1, sl
 8001898:	4321      	orrs	r1, r4
 800189a:	d100      	bne.n	800189e <__aeabi_ddiv+0x29a>
 800189c:	e07c      	b.n	8001998 <__aeabi_ddiv+0x394>
 800189e:	2c00      	cmp	r4, #0
 80018a0:	d100      	bne.n	80018a4 <__aeabi_ddiv+0x2a0>
 80018a2:	e0fb      	b.n	8001a9c <__aeabi_ddiv+0x498>
 80018a4:	0020      	movs	r0, r4
 80018a6:	f001 f9d7 	bl	8002c58 <__clzsi2>
 80018aa:	0002      	movs	r2, r0
 80018ac:	3a0b      	subs	r2, #11
 80018ae:	231d      	movs	r3, #29
 80018b0:	1a9b      	subs	r3, r3, r2
 80018b2:	4652      	mov	r2, sl
 80018b4:	0001      	movs	r1, r0
 80018b6:	40da      	lsrs	r2, r3
 80018b8:	4653      	mov	r3, sl
 80018ba:	3908      	subs	r1, #8
 80018bc:	408b      	lsls	r3, r1
 80018be:	408c      	lsls	r4, r1
 80018c0:	0019      	movs	r1, r3
 80018c2:	4314      	orrs	r4, r2
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <__aeabi_ddiv+0x388>)
 80018c6:	4458      	add	r0, fp
 80018c8:	469b      	mov	fp, r3
 80018ca:	4483      	add	fp, r0
 80018cc:	2000      	movs	r0, #0
 80018ce:	e6d9      	b.n	8001684 <__aeabi_ddiv+0x80>
 80018d0:	0003      	movs	r3, r0
 80018d2:	4323      	orrs	r3, r4
 80018d4:	4698      	mov	r8, r3
 80018d6:	d044      	beq.n	8001962 <__aeabi_ddiv+0x35e>
 80018d8:	2c00      	cmp	r4, #0
 80018da:	d100      	bne.n	80018de <__aeabi_ddiv+0x2da>
 80018dc:	e0cf      	b.n	8001a7e <__aeabi_ddiv+0x47a>
 80018de:	0020      	movs	r0, r4
 80018e0:	f001 f9ba 	bl	8002c58 <__clzsi2>
 80018e4:	0001      	movs	r1, r0
 80018e6:	0002      	movs	r2, r0
 80018e8:	390b      	subs	r1, #11
 80018ea:	231d      	movs	r3, #29
 80018ec:	1a5b      	subs	r3, r3, r1
 80018ee:	4649      	mov	r1, r9
 80018f0:	0010      	movs	r0, r2
 80018f2:	40d9      	lsrs	r1, r3
 80018f4:	3808      	subs	r0, #8
 80018f6:	4084      	lsls	r4, r0
 80018f8:	000b      	movs	r3, r1
 80018fa:	464d      	mov	r5, r9
 80018fc:	4323      	orrs	r3, r4
 80018fe:	4698      	mov	r8, r3
 8001900:	4085      	lsls	r5, r0
 8001902:	4b23      	ldr	r3, [pc, #140]	; (8001990 <__aeabi_ddiv+0x38c>)
 8001904:	1a9b      	subs	r3, r3, r2
 8001906:	469b      	mov	fp, r3
 8001908:	2300      	movs	r3, #0
 800190a:	4699      	mov	r9, r3
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	e69e      	b.n	800164e <__aeabi_ddiv+0x4a>
 8001910:	0002      	movs	r2, r0
 8001912:	4322      	orrs	r2, r4
 8001914:	4690      	mov	r8, r2
 8001916:	d11d      	bne.n	8001954 <__aeabi_ddiv+0x350>
 8001918:	2208      	movs	r2, #8
 800191a:	469b      	mov	fp, r3
 800191c:	2302      	movs	r3, #2
 800191e:	2500      	movs	r5, #0
 8001920:	4691      	mov	r9, r2
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	e693      	b.n	800164e <__aeabi_ddiv+0x4a>
 8001926:	4651      	mov	r1, sl
 8001928:	4321      	orrs	r1, r4
 800192a:	d109      	bne.n	8001940 <__aeabi_ddiv+0x33c>
 800192c:	2302      	movs	r3, #2
 800192e:	464a      	mov	r2, r9
 8001930:	431a      	orrs	r2, r3
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <__aeabi_ddiv+0x390>)
 8001934:	4691      	mov	r9, r2
 8001936:	469c      	mov	ip, r3
 8001938:	2400      	movs	r4, #0
 800193a:	2002      	movs	r0, #2
 800193c:	44e3      	add	fp, ip
 800193e:	e6a1      	b.n	8001684 <__aeabi_ddiv+0x80>
 8001940:	2303      	movs	r3, #3
 8001942:	464a      	mov	r2, r9
 8001944:	431a      	orrs	r2, r3
 8001946:	4b13      	ldr	r3, [pc, #76]	; (8001994 <__aeabi_ddiv+0x390>)
 8001948:	4691      	mov	r9, r2
 800194a:	469c      	mov	ip, r3
 800194c:	4651      	mov	r1, sl
 800194e:	2003      	movs	r0, #3
 8001950:	44e3      	add	fp, ip
 8001952:	e697      	b.n	8001684 <__aeabi_ddiv+0x80>
 8001954:	220c      	movs	r2, #12
 8001956:	469b      	mov	fp, r3
 8001958:	2303      	movs	r3, #3
 800195a:	46a0      	mov	r8, r4
 800195c:	4691      	mov	r9, r2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	e675      	b.n	800164e <__aeabi_ddiv+0x4a>
 8001962:	2304      	movs	r3, #4
 8001964:	4699      	mov	r9, r3
 8001966:	2300      	movs	r3, #0
 8001968:	469b      	mov	fp, r3
 800196a:	3301      	adds	r3, #1
 800196c:	2500      	movs	r5, #0
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	e66d      	b.n	800164e <__aeabi_ddiv+0x4a>
 8001972:	46c0      	nop			; (mov r8, r8)
 8001974:	000007ff 	.word	0x000007ff
 8001978:	fffffc01 	.word	0xfffffc01
 800197c:	08005c24 	.word	0x08005c24
 8001980:	000003ff 	.word	0x000003ff
 8001984:	feffffff 	.word	0xfeffffff
 8001988:	000007fe 	.word	0x000007fe
 800198c:	000003f3 	.word	0x000003f3
 8001990:	fffffc0d 	.word	0xfffffc0d
 8001994:	fffff801 	.word	0xfffff801
 8001998:	464a      	mov	r2, r9
 800199a:	2301      	movs	r3, #1
 800199c:	431a      	orrs	r2, r3
 800199e:	4691      	mov	r9, r2
 80019a0:	2400      	movs	r4, #0
 80019a2:	2001      	movs	r0, #1
 80019a4:	e66e      	b.n	8001684 <__aeabi_ddiv+0x80>
 80019a6:	2300      	movs	r3, #0
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	469a      	mov	sl, r3
 80019ac:	2500      	movs	r5, #0
 80019ae:	4b88      	ldr	r3, [pc, #544]	; (8001bd0 <__aeabi_ddiv+0x5cc>)
 80019b0:	0312      	lsls	r2, r2, #12
 80019b2:	e67e      	b.n	80016b2 <__aeabi_ddiv+0xae>
 80019b4:	2501      	movs	r5, #1
 80019b6:	426d      	negs	r5, r5
 80019b8:	2201      	movs	r2, #1
 80019ba:	1ad2      	subs	r2, r2, r3
 80019bc:	2a38      	cmp	r2, #56	; 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_ddiv+0x3be>
 80019c0:	e674      	b.n	80016ac <__aeabi_ddiv+0xa8>
 80019c2:	2a1f      	cmp	r2, #31
 80019c4:	dc00      	bgt.n	80019c8 <__aeabi_ddiv+0x3c4>
 80019c6:	e0bd      	b.n	8001b44 <__aeabi_ddiv+0x540>
 80019c8:	211f      	movs	r1, #31
 80019ca:	4249      	negs	r1, r1
 80019cc:	1acb      	subs	r3, r1, r3
 80019ce:	4641      	mov	r1, r8
 80019d0:	40d9      	lsrs	r1, r3
 80019d2:	000b      	movs	r3, r1
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d004      	beq.n	80019e2 <__aeabi_ddiv+0x3de>
 80019d8:	4641      	mov	r1, r8
 80019da:	4a7e      	ldr	r2, [pc, #504]	; (8001bd4 <__aeabi_ddiv+0x5d0>)
 80019dc:	445a      	add	r2, fp
 80019de:	4091      	lsls	r1, r2
 80019e0:	430d      	orrs	r5, r1
 80019e2:	0029      	movs	r1, r5
 80019e4:	1e4a      	subs	r2, r1, #1
 80019e6:	4191      	sbcs	r1, r2
 80019e8:	4319      	orrs	r1, r3
 80019ea:	2307      	movs	r3, #7
 80019ec:	001d      	movs	r5, r3
 80019ee:	2200      	movs	r2, #0
 80019f0:	400d      	ands	r5, r1
 80019f2:	420b      	tst	r3, r1
 80019f4:	d100      	bne.n	80019f8 <__aeabi_ddiv+0x3f4>
 80019f6:	e0d0      	b.n	8001b9a <__aeabi_ddiv+0x596>
 80019f8:	220f      	movs	r2, #15
 80019fa:	2300      	movs	r3, #0
 80019fc:	400a      	ands	r2, r1
 80019fe:	2a04      	cmp	r2, #4
 8001a00:	d100      	bne.n	8001a04 <__aeabi_ddiv+0x400>
 8001a02:	e0c7      	b.n	8001b94 <__aeabi_ddiv+0x590>
 8001a04:	1d0a      	adds	r2, r1, #4
 8001a06:	428a      	cmp	r2, r1
 8001a08:	4189      	sbcs	r1, r1
 8001a0a:	4249      	negs	r1, r1
 8001a0c:	185b      	adds	r3, r3, r1
 8001a0e:	0011      	movs	r1, r2
 8001a10:	021a      	lsls	r2, r3, #8
 8001a12:	d400      	bmi.n	8001a16 <__aeabi_ddiv+0x412>
 8001a14:	e0be      	b.n	8001b94 <__aeabi_ddiv+0x590>
 8001a16:	2301      	movs	r3, #1
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e649      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	4643      	mov	r3, r8
 8001a22:	0312      	lsls	r2, r2, #12
 8001a24:	4213      	tst	r3, r2
 8001a26:	d008      	beq.n	8001a3a <__aeabi_ddiv+0x436>
 8001a28:	4214      	tst	r4, r2
 8001a2a:	d106      	bne.n	8001a3a <__aeabi_ddiv+0x436>
 8001a2c:	4322      	orrs	r2, r4
 8001a2e:	0312      	lsls	r2, r2, #12
 8001a30:	46ba      	mov	sl, r7
 8001a32:	000d      	movs	r5, r1
 8001a34:	4b66      	ldr	r3, [pc, #408]	; (8001bd0 <__aeabi_ddiv+0x5cc>)
 8001a36:	0b12      	lsrs	r2, r2, #12
 8001a38:	e63b      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001a3a:	2280      	movs	r2, #128	; 0x80
 8001a3c:	4643      	mov	r3, r8
 8001a3e:	0312      	lsls	r2, r2, #12
 8001a40:	431a      	orrs	r2, r3
 8001a42:	0312      	lsls	r2, r2, #12
 8001a44:	46b2      	mov	sl, r6
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <__aeabi_ddiv+0x5cc>)
 8001a48:	0b12      	lsrs	r2, r2, #12
 8001a4a:	e632      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_ddiv+0x44e>
 8001a50:	e702      	b.n	8001858 <__aeabi_ddiv+0x254>
 8001a52:	19a6      	adds	r6, r4, r6
 8001a54:	1e6a      	subs	r2, r5, #1
 8001a56:	42a6      	cmp	r6, r4
 8001a58:	d200      	bcs.n	8001a5c <__aeabi_ddiv+0x458>
 8001a5a:	e089      	b.n	8001b70 <__aeabi_ddiv+0x56c>
 8001a5c:	4286      	cmp	r6, r0
 8001a5e:	d200      	bcs.n	8001a62 <__aeabi_ddiv+0x45e>
 8001a60:	e09f      	b.n	8001ba2 <__aeabi_ddiv+0x59e>
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x462>
 8001a64:	e0af      	b.n	8001bc6 <__aeabi_ddiv+0x5c2>
 8001a66:	0015      	movs	r5, r2
 8001a68:	e6f4      	b.n	8001854 <__aeabi_ddiv+0x250>
 8001a6a:	42a9      	cmp	r1, r5
 8001a6c:	d900      	bls.n	8001a70 <__aeabi_ddiv+0x46c>
 8001a6e:	e63c      	b.n	80016ea <__aeabi_ddiv+0xe6>
 8001a70:	4643      	mov	r3, r8
 8001a72:	07de      	lsls	r6, r3, #31
 8001a74:	0858      	lsrs	r0, r3, #1
 8001a76:	086b      	lsrs	r3, r5, #1
 8001a78:	431e      	orrs	r6, r3
 8001a7a:	07ed      	lsls	r5, r5, #31
 8001a7c:	e63c      	b.n	80016f8 <__aeabi_ddiv+0xf4>
 8001a7e:	f001 f8eb 	bl	8002c58 <__clzsi2>
 8001a82:	0001      	movs	r1, r0
 8001a84:	0002      	movs	r2, r0
 8001a86:	3115      	adds	r1, #21
 8001a88:	3220      	adds	r2, #32
 8001a8a:	291c      	cmp	r1, #28
 8001a8c:	dc00      	bgt.n	8001a90 <__aeabi_ddiv+0x48c>
 8001a8e:	e72c      	b.n	80018ea <__aeabi_ddiv+0x2e6>
 8001a90:	464b      	mov	r3, r9
 8001a92:	3808      	subs	r0, #8
 8001a94:	4083      	lsls	r3, r0
 8001a96:	2500      	movs	r5, #0
 8001a98:	4698      	mov	r8, r3
 8001a9a:	e732      	b.n	8001902 <__aeabi_ddiv+0x2fe>
 8001a9c:	f001 f8dc 	bl	8002c58 <__clzsi2>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	001a      	movs	r2, r3
 8001aa4:	3215      	adds	r2, #21
 8001aa6:	3020      	adds	r0, #32
 8001aa8:	2a1c      	cmp	r2, #28
 8001aaa:	dc00      	bgt.n	8001aae <__aeabi_ddiv+0x4aa>
 8001aac:	e6ff      	b.n	80018ae <__aeabi_ddiv+0x2aa>
 8001aae:	4654      	mov	r4, sl
 8001ab0:	3b08      	subs	r3, #8
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	409c      	lsls	r4, r3
 8001ab6:	e705      	b.n	80018c4 <__aeabi_ddiv+0x2c0>
 8001ab8:	1936      	adds	r6, r6, r4
 8001aba:	3b01      	subs	r3, #1
 8001abc:	42b4      	cmp	r4, r6
 8001abe:	d900      	bls.n	8001ac2 <__aeabi_ddiv+0x4be>
 8001ac0:	e6a6      	b.n	8001810 <__aeabi_ddiv+0x20c>
 8001ac2:	42b2      	cmp	r2, r6
 8001ac4:	d800      	bhi.n	8001ac8 <__aeabi_ddiv+0x4c4>
 8001ac6:	e6a3      	b.n	8001810 <__aeabi_ddiv+0x20c>
 8001ac8:	1e83      	subs	r3, r0, #2
 8001aca:	1936      	adds	r6, r6, r4
 8001acc:	e6a0      	b.n	8001810 <__aeabi_ddiv+0x20c>
 8001ace:	1909      	adds	r1, r1, r4
 8001ad0:	3d01      	subs	r5, #1
 8001ad2:	428c      	cmp	r4, r1
 8001ad4:	d900      	bls.n	8001ad8 <__aeabi_ddiv+0x4d4>
 8001ad6:	e68d      	b.n	80017f4 <__aeabi_ddiv+0x1f0>
 8001ad8:	428a      	cmp	r2, r1
 8001ada:	d800      	bhi.n	8001ade <__aeabi_ddiv+0x4da>
 8001adc:	e68a      	b.n	80017f4 <__aeabi_ddiv+0x1f0>
 8001ade:	1e85      	subs	r5, r0, #2
 8001ae0:	1909      	adds	r1, r1, r4
 8001ae2:	e687      	b.n	80017f4 <__aeabi_ddiv+0x1f0>
 8001ae4:	220f      	movs	r2, #15
 8001ae6:	402a      	ands	r2, r5
 8001ae8:	2a04      	cmp	r2, #4
 8001aea:	d100      	bne.n	8001aee <__aeabi_ddiv+0x4ea>
 8001aec:	e6bc      	b.n	8001868 <__aeabi_ddiv+0x264>
 8001aee:	1d29      	adds	r1, r5, #4
 8001af0:	42a9      	cmp	r1, r5
 8001af2:	41ad      	sbcs	r5, r5
 8001af4:	426d      	negs	r5, r5
 8001af6:	08c9      	lsrs	r1, r1, #3
 8001af8:	44a8      	add	r8, r5
 8001afa:	e6b6      	b.n	800186a <__aeabi_ddiv+0x266>
 8001afc:	42af      	cmp	r7, r5
 8001afe:	d900      	bls.n	8001b02 <__aeabi_ddiv+0x4fe>
 8001b00:	e662      	b.n	80017c8 <__aeabi_ddiv+0x1c4>
 8001b02:	4281      	cmp	r1, r0
 8001b04:	d804      	bhi.n	8001b10 <__aeabi_ddiv+0x50c>
 8001b06:	d000      	beq.n	8001b0a <__aeabi_ddiv+0x506>
 8001b08:	e65e      	b.n	80017c8 <__aeabi_ddiv+0x1c4>
 8001b0a:	42ae      	cmp	r6, r5
 8001b0c:	d800      	bhi.n	8001b10 <__aeabi_ddiv+0x50c>
 8001b0e:	e65b      	b.n	80017c8 <__aeabi_ddiv+0x1c4>
 8001b10:	2302      	movs	r3, #2
 8001b12:	425b      	negs	r3, r3
 8001b14:	469c      	mov	ip, r3
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	44e0      	add	r8, ip
 8001b1a:	469c      	mov	ip, r3
 8001b1c:	4465      	add	r5, ip
 8001b1e:	429d      	cmp	r5, r3
 8001b20:	419b      	sbcs	r3, r3
 8001b22:	425b      	negs	r3, r3
 8001b24:	191b      	adds	r3, r3, r4
 8001b26:	18c0      	adds	r0, r0, r3
 8001b28:	e64f      	b.n	80017ca <__aeabi_ddiv+0x1c6>
 8001b2a:	42b2      	cmp	r2, r6
 8001b2c:	d800      	bhi.n	8001b30 <__aeabi_ddiv+0x52c>
 8001b2e:	e612      	b.n	8001756 <__aeabi_ddiv+0x152>
 8001b30:	1e83      	subs	r3, r0, #2
 8001b32:	1936      	adds	r6, r6, r4
 8001b34:	e60f      	b.n	8001756 <__aeabi_ddiv+0x152>
 8001b36:	428a      	cmp	r2, r1
 8001b38:	d800      	bhi.n	8001b3c <__aeabi_ddiv+0x538>
 8001b3a:	e5fa      	b.n	8001732 <__aeabi_ddiv+0x12e>
 8001b3c:	1e83      	subs	r3, r0, #2
 8001b3e:	4698      	mov	r8, r3
 8001b40:	1909      	adds	r1, r1, r4
 8001b42:	e5f6      	b.n	8001732 <__aeabi_ddiv+0x12e>
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <__aeabi_ddiv+0x5d4>)
 8001b46:	0028      	movs	r0, r5
 8001b48:	445b      	add	r3, fp
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	409d      	lsls	r5, r3
 8001b4e:	4099      	lsls	r1, r3
 8001b50:	40d0      	lsrs	r0, r2
 8001b52:	1e6b      	subs	r3, r5, #1
 8001b54:	419d      	sbcs	r5, r3
 8001b56:	4643      	mov	r3, r8
 8001b58:	4301      	orrs	r1, r0
 8001b5a:	4329      	orrs	r1, r5
 8001b5c:	40d3      	lsrs	r3, r2
 8001b5e:	074a      	lsls	r2, r1, #29
 8001b60:	d100      	bne.n	8001b64 <__aeabi_ddiv+0x560>
 8001b62:	e755      	b.n	8001a10 <__aeabi_ddiv+0x40c>
 8001b64:	220f      	movs	r2, #15
 8001b66:	400a      	ands	r2, r1
 8001b68:	2a04      	cmp	r2, #4
 8001b6a:	d000      	beq.n	8001b6e <__aeabi_ddiv+0x56a>
 8001b6c:	e74a      	b.n	8001a04 <__aeabi_ddiv+0x400>
 8001b6e:	e74f      	b.n	8001a10 <__aeabi_ddiv+0x40c>
 8001b70:	0015      	movs	r5, r2
 8001b72:	4286      	cmp	r6, r0
 8001b74:	d000      	beq.n	8001b78 <__aeabi_ddiv+0x574>
 8001b76:	e66d      	b.n	8001854 <__aeabi_ddiv+0x250>
 8001b78:	9a00      	ldr	r2, [sp, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d000      	beq.n	8001b80 <__aeabi_ddiv+0x57c>
 8001b7e:	e669      	b.n	8001854 <__aeabi_ddiv+0x250>
 8001b80:	e66a      	b.n	8001858 <__aeabi_ddiv+0x254>
 8001b82:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <__aeabi_ddiv+0x5d8>)
 8001b84:	445b      	add	r3, fp
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	dc00      	bgt.n	8001b8c <__aeabi_ddiv+0x588>
 8001b8a:	e713      	b.n	80019b4 <__aeabi_ddiv+0x3b0>
 8001b8c:	2501      	movs	r5, #1
 8001b8e:	2100      	movs	r1, #0
 8001b90:	44a8      	add	r8, r5
 8001b92:	e66a      	b.n	800186a <__aeabi_ddiv+0x266>
 8001b94:	075d      	lsls	r5, r3, #29
 8001b96:	025b      	lsls	r3, r3, #9
 8001b98:	0b1a      	lsrs	r2, r3, #12
 8001b9a:	08c9      	lsrs	r1, r1, #3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	430d      	orrs	r5, r1
 8001ba0:	e587      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001ba2:	9900      	ldr	r1, [sp, #0]
 8001ba4:	3d02      	subs	r5, #2
 8001ba6:	004a      	lsls	r2, r1, #1
 8001ba8:	428a      	cmp	r2, r1
 8001baa:	41bf      	sbcs	r7, r7
 8001bac:	427f      	negs	r7, r7
 8001bae:	193f      	adds	r7, r7, r4
 8001bb0:	19f6      	adds	r6, r6, r7
 8001bb2:	9200      	str	r2, [sp, #0]
 8001bb4:	e7dd      	b.n	8001b72 <__aeabi_ddiv+0x56e>
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	4643      	mov	r3, r8
 8001bba:	0312      	lsls	r2, r2, #12
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	0312      	lsls	r2, r2, #12
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <__aeabi_ddiv+0x5cc>)
 8001bc2:	0b12      	lsrs	r2, r2, #12
 8001bc4:	e575      	b.n	80016b2 <__aeabi_ddiv+0xae>
 8001bc6:	9900      	ldr	r1, [sp, #0]
 8001bc8:	4299      	cmp	r1, r3
 8001bca:	d3ea      	bcc.n	8001ba2 <__aeabi_ddiv+0x59e>
 8001bcc:	0015      	movs	r5, r2
 8001bce:	e7d3      	b.n	8001b78 <__aeabi_ddiv+0x574>
 8001bd0:	000007ff 	.word	0x000007ff
 8001bd4:	0000043e 	.word	0x0000043e
 8001bd8:	0000041e 	.word	0x0000041e
 8001bdc:	000003ff 	.word	0x000003ff

08001be0 <__eqdf2>:
 8001be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be2:	464e      	mov	r6, r9
 8001be4:	4645      	mov	r5, r8
 8001be6:	46de      	mov	lr, fp
 8001be8:	4657      	mov	r7, sl
 8001bea:	4690      	mov	r8, r2
 8001bec:	b5e0      	push	{r5, r6, r7, lr}
 8001bee:	0017      	movs	r7, r2
 8001bf0:	031a      	lsls	r2, r3, #12
 8001bf2:	0b12      	lsrs	r2, r2, #12
 8001bf4:	0005      	movs	r5, r0
 8001bf6:	4684      	mov	ip, r0
 8001bf8:	4819      	ldr	r0, [pc, #100]	; (8001c60 <__eqdf2+0x80>)
 8001bfa:	030e      	lsls	r6, r1, #12
 8001bfc:	004c      	lsls	r4, r1, #1
 8001bfe:	4691      	mov	r9, r2
 8001c00:	005a      	lsls	r2, r3, #1
 8001c02:	0fdb      	lsrs	r3, r3, #31
 8001c04:	469b      	mov	fp, r3
 8001c06:	0b36      	lsrs	r6, r6, #12
 8001c08:	0d64      	lsrs	r4, r4, #21
 8001c0a:	0fc9      	lsrs	r1, r1, #31
 8001c0c:	0d52      	lsrs	r2, r2, #21
 8001c0e:	4284      	cmp	r4, r0
 8001c10:	d019      	beq.n	8001c46 <__eqdf2+0x66>
 8001c12:	4282      	cmp	r2, r0
 8001c14:	d010      	beq.n	8001c38 <__eqdf2+0x58>
 8001c16:	2001      	movs	r0, #1
 8001c18:	4294      	cmp	r4, r2
 8001c1a:	d10e      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c1c:	454e      	cmp	r6, r9
 8001c1e:	d10c      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c20:	2001      	movs	r0, #1
 8001c22:	45c4      	cmp	ip, r8
 8001c24:	d109      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c26:	4559      	cmp	r1, fp
 8001c28:	d017      	beq.n	8001c5a <__eqdf2+0x7a>
 8001c2a:	2c00      	cmp	r4, #0
 8001c2c:	d105      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c2e:	0030      	movs	r0, r6
 8001c30:	4328      	orrs	r0, r5
 8001c32:	1e43      	subs	r3, r0, #1
 8001c34:	4198      	sbcs	r0, r3
 8001c36:	e000      	b.n	8001c3a <__eqdf2+0x5a>
 8001c38:	2001      	movs	r0, #1
 8001c3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001c3c:	46bb      	mov	fp, r7
 8001c3e:	46b2      	mov	sl, r6
 8001c40:	46a9      	mov	r9, r5
 8001c42:	46a0      	mov	r8, r4
 8001c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c46:	0033      	movs	r3, r6
 8001c48:	2001      	movs	r0, #1
 8001c4a:	432b      	orrs	r3, r5
 8001c4c:	d1f5      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c4e:	42a2      	cmp	r2, r4
 8001c50:	d1f3      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c52:	464b      	mov	r3, r9
 8001c54:	433b      	orrs	r3, r7
 8001c56:	d1f0      	bne.n	8001c3a <__eqdf2+0x5a>
 8001c58:	e7e2      	b.n	8001c20 <__eqdf2+0x40>
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	e7ed      	b.n	8001c3a <__eqdf2+0x5a>
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	000007ff 	.word	0x000007ff

08001c64 <__gedf2>:
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	4647      	mov	r7, r8
 8001c68:	46ce      	mov	lr, r9
 8001c6a:	0004      	movs	r4, r0
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	0016      	movs	r6, r2
 8001c70:	031b      	lsls	r3, r3, #12
 8001c72:	0b1b      	lsrs	r3, r3, #12
 8001c74:	4d2d      	ldr	r5, [pc, #180]	; (8001d2c <__gedf2+0xc8>)
 8001c76:	004a      	lsls	r2, r1, #1
 8001c78:	4699      	mov	r9, r3
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	0043      	lsls	r3, r0, #1
 8001c7e:	030f      	lsls	r7, r1, #12
 8001c80:	46a4      	mov	ip, r4
 8001c82:	46b0      	mov	r8, r6
 8001c84:	0b3f      	lsrs	r7, r7, #12
 8001c86:	0d52      	lsrs	r2, r2, #21
 8001c88:	0fc9      	lsrs	r1, r1, #31
 8001c8a:	0d5b      	lsrs	r3, r3, #21
 8001c8c:	0fc0      	lsrs	r0, r0, #31
 8001c8e:	42aa      	cmp	r2, r5
 8001c90:	d021      	beq.n	8001cd6 <__gedf2+0x72>
 8001c92:	42ab      	cmp	r3, r5
 8001c94:	d013      	beq.n	8001cbe <__gedf2+0x5a>
 8001c96:	2a00      	cmp	r2, #0
 8001c98:	d122      	bne.n	8001ce0 <__gedf2+0x7c>
 8001c9a:	433c      	orrs	r4, r7
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <__gedf2+0x42>
 8001ca0:	464d      	mov	r5, r9
 8001ca2:	432e      	orrs	r6, r5
 8001ca4:	d022      	beq.n	8001cec <__gedf2+0x88>
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d010      	beq.n	8001ccc <__gedf2+0x68>
 8001caa:	4281      	cmp	r1, r0
 8001cac:	d022      	beq.n	8001cf4 <__gedf2+0x90>
 8001cae:	2002      	movs	r0, #2
 8001cb0:	3901      	subs	r1, #1
 8001cb2:	4008      	ands	r0, r1
 8001cb4:	3801      	subs	r0, #1
 8001cb6:	bcc0      	pop	{r6, r7}
 8001cb8:	46b9      	mov	r9, r7
 8001cba:	46b0      	mov	r8, r6
 8001cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbe:	464d      	mov	r5, r9
 8001cc0:	432e      	orrs	r6, r5
 8001cc2:	d129      	bne.n	8001d18 <__gedf2+0xb4>
 8001cc4:	2a00      	cmp	r2, #0
 8001cc6:	d1f0      	bne.n	8001caa <__gedf2+0x46>
 8001cc8:	433c      	orrs	r4, r7
 8001cca:	d1ee      	bne.n	8001caa <__gedf2+0x46>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d1f2      	bne.n	8001cb6 <__gedf2+0x52>
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	4240      	negs	r0, r0
 8001cd4:	e7ef      	b.n	8001cb6 <__gedf2+0x52>
 8001cd6:	003d      	movs	r5, r7
 8001cd8:	4325      	orrs	r5, r4
 8001cda:	d11d      	bne.n	8001d18 <__gedf2+0xb4>
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d0ee      	beq.n	8001cbe <__gedf2+0x5a>
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e2      	bne.n	8001caa <__gedf2+0x46>
 8001ce4:	464c      	mov	r4, r9
 8001ce6:	4326      	orrs	r6, r4
 8001ce8:	d1df      	bne.n	8001caa <__gedf2+0x46>
 8001cea:	e7e0      	b.n	8001cae <__gedf2+0x4a>
 8001cec:	2000      	movs	r0, #0
 8001cee:	2c00      	cmp	r4, #0
 8001cf0:	d0e1      	beq.n	8001cb6 <__gedf2+0x52>
 8001cf2:	e7dc      	b.n	8001cae <__gedf2+0x4a>
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	dc0a      	bgt.n	8001d0e <__gedf2+0xaa>
 8001cf8:	dbe8      	blt.n	8001ccc <__gedf2+0x68>
 8001cfa:	454f      	cmp	r7, r9
 8001cfc:	d8d7      	bhi.n	8001cae <__gedf2+0x4a>
 8001cfe:	d00e      	beq.n	8001d1e <__gedf2+0xba>
 8001d00:	2000      	movs	r0, #0
 8001d02:	454f      	cmp	r7, r9
 8001d04:	d2d7      	bcs.n	8001cb6 <__gedf2+0x52>
 8001d06:	2900      	cmp	r1, #0
 8001d08:	d0e2      	beq.n	8001cd0 <__gedf2+0x6c>
 8001d0a:	0008      	movs	r0, r1
 8001d0c:	e7d3      	b.n	8001cb6 <__gedf2+0x52>
 8001d0e:	4243      	negs	r3, r0
 8001d10:	4158      	adcs	r0, r3
 8001d12:	0040      	lsls	r0, r0, #1
 8001d14:	3801      	subs	r0, #1
 8001d16:	e7ce      	b.n	8001cb6 <__gedf2+0x52>
 8001d18:	2002      	movs	r0, #2
 8001d1a:	4240      	negs	r0, r0
 8001d1c:	e7cb      	b.n	8001cb6 <__gedf2+0x52>
 8001d1e:	45c4      	cmp	ip, r8
 8001d20:	d8c5      	bhi.n	8001cae <__gedf2+0x4a>
 8001d22:	2000      	movs	r0, #0
 8001d24:	45c4      	cmp	ip, r8
 8001d26:	d2c6      	bcs.n	8001cb6 <__gedf2+0x52>
 8001d28:	e7ed      	b.n	8001d06 <__gedf2+0xa2>
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	000007ff 	.word	0x000007ff

08001d30 <__ledf2>:
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	4647      	mov	r7, r8
 8001d34:	46ce      	mov	lr, r9
 8001d36:	0004      	movs	r4, r0
 8001d38:	0018      	movs	r0, r3
 8001d3a:	0016      	movs	r6, r2
 8001d3c:	031b      	lsls	r3, r3, #12
 8001d3e:	0b1b      	lsrs	r3, r3, #12
 8001d40:	4d2c      	ldr	r5, [pc, #176]	; (8001df4 <__ledf2+0xc4>)
 8001d42:	004a      	lsls	r2, r1, #1
 8001d44:	4699      	mov	r9, r3
 8001d46:	b580      	push	{r7, lr}
 8001d48:	0043      	lsls	r3, r0, #1
 8001d4a:	030f      	lsls	r7, r1, #12
 8001d4c:	46a4      	mov	ip, r4
 8001d4e:	46b0      	mov	r8, r6
 8001d50:	0b3f      	lsrs	r7, r7, #12
 8001d52:	0d52      	lsrs	r2, r2, #21
 8001d54:	0fc9      	lsrs	r1, r1, #31
 8001d56:	0d5b      	lsrs	r3, r3, #21
 8001d58:	0fc0      	lsrs	r0, r0, #31
 8001d5a:	42aa      	cmp	r2, r5
 8001d5c:	d00d      	beq.n	8001d7a <__ledf2+0x4a>
 8001d5e:	42ab      	cmp	r3, r5
 8001d60:	d010      	beq.n	8001d84 <__ledf2+0x54>
 8001d62:	2a00      	cmp	r2, #0
 8001d64:	d127      	bne.n	8001db6 <__ledf2+0x86>
 8001d66:	433c      	orrs	r4, r7
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d111      	bne.n	8001d90 <__ledf2+0x60>
 8001d6c:	464d      	mov	r5, r9
 8001d6e:	432e      	orrs	r6, r5
 8001d70:	d10e      	bne.n	8001d90 <__ledf2+0x60>
 8001d72:	2000      	movs	r0, #0
 8001d74:	2c00      	cmp	r4, #0
 8001d76:	d015      	beq.n	8001da4 <__ledf2+0x74>
 8001d78:	e00e      	b.n	8001d98 <__ledf2+0x68>
 8001d7a:	003d      	movs	r5, r7
 8001d7c:	4325      	orrs	r5, r4
 8001d7e:	d110      	bne.n	8001da2 <__ledf2+0x72>
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d118      	bne.n	8001db6 <__ledf2+0x86>
 8001d84:	464d      	mov	r5, r9
 8001d86:	432e      	orrs	r6, r5
 8001d88:	d10b      	bne.n	8001da2 <__ledf2+0x72>
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d102      	bne.n	8001d94 <__ledf2+0x64>
 8001d8e:	433c      	orrs	r4, r7
 8001d90:	2c00      	cmp	r4, #0
 8001d92:	d00b      	beq.n	8001dac <__ledf2+0x7c>
 8001d94:	4281      	cmp	r1, r0
 8001d96:	d014      	beq.n	8001dc2 <__ledf2+0x92>
 8001d98:	2002      	movs	r0, #2
 8001d9a:	3901      	subs	r1, #1
 8001d9c:	4008      	ands	r0, r1
 8001d9e:	3801      	subs	r0, #1
 8001da0:	e000      	b.n	8001da4 <__ledf2+0x74>
 8001da2:	2002      	movs	r0, #2
 8001da4:	bcc0      	pop	{r6, r7}
 8001da6:	46b9      	mov	r9, r7
 8001da8:	46b0      	mov	r8, r6
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d1f9      	bne.n	8001da4 <__ledf2+0x74>
 8001db0:	2001      	movs	r0, #1
 8001db2:	4240      	negs	r0, r0
 8001db4:	e7f6      	b.n	8001da4 <__ledf2+0x74>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1ec      	bne.n	8001d94 <__ledf2+0x64>
 8001dba:	464c      	mov	r4, r9
 8001dbc:	4326      	orrs	r6, r4
 8001dbe:	d1e9      	bne.n	8001d94 <__ledf2+0x64>
 8001dc0:	e7ea      	b.n	8001d98 <__ledf2+0x68>
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	dd04      	ble.n	8001dd0 <__ledf2+0xa0>
 8001dc6:	4243      	negs	r3, r0
 8001dc8:	4158      	adcs	r0, r3
 8001dca:	0040      	lsls	r0, r0, #1
 8001dcc:	3801      	subs	r0, #1
 8001dce:	e7e9      	b.n	8001da4 <__ledf2+0x74>
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbeb      	blt.n	8001dac <__ledf2+0x7c>
 8001dd4:	454f      	cmp	r7, r9
 8001dd6:	d8df      	bhi.n	8001d98 <__ledf2+0x68>
 8001dd8:	d006      	beq.n	8001de8 <__ledf2+0xb8>
 8001dda:	2000      	movs	r0, #0
 8001ddc:	454f      	cmp	r7, r9
 8001dde:	d2e1      	bcs.n	8001da4 <__ledf2+0x74>
 8001de0:	2900      	cmp	r1, #0
 8001de2:	d0e5      	beq.n	8001db0 <__ledf2+0x80>
 8001de4:	0008      	movs	r0, r1
 8001de6:	e7dd      	b.n	8001da4 <__ledf2+0x74>
 8001de8:	45c4      	cmp	ip, r8
 8001dea:	d8d5      	bhi.n	8001d98 <__ledf2+0x68>
 8001dec:	2000      	movs	r0, #0
 8001dee:	45c4      	cmp	ip, r8
 8001df0:	d2d8      	bcs.n	8001da4 <__ledf2+0x74>
 8001df2:	e7f5      	b.n	8001de0 <__ledf2+0xb0>
 8001df4:	000007ff 	.word	0x000007ff

08001df8 <__aeabi_dmul>:
 8001df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dfa:	4645      	mov	r5, r8
 8001dfc:	46de      	mov	lr, fp
 8001dfe:	4657      	mov	r7, sl
 8001e00:	464e      	mov	r6, r9
 8001e02:	b5e0      	push	{r5, r6, r7, lr}
 8001e04:	001f      	movs	r7, r3
 8001e06:	030b      	lsls	r3, r1, #12
 8001e08:	0b1b      	lsrs	r3, r3, #12
 8001e0a:	469b      	mov	fp, r3
 8001e0c:	004d      	lsls	r5, r1, #1
 8001e0e:	0fcb      	lsrs	r3, r1, #31
 8001e10:	0004      	movs	r4, r0
 8001e12:	4691      	mov	r9, r2
 8001e14:	4698      	mov	r8, r3
 8001e16:	b087      	sub	sp, #28
 8001e18:	0d6d      	lsrs	r5, r5, #21
 8001e1a:	d100      	bne.n	8001e1e <__aeabi_dmul+0x26>
 8001e1c:	e1cd      	b.n	80021ba <__aeabi_dmul+0x3c2>
 8001e1e:	4bce      	ldr	r3, [pc, #824]	; (8002158 <__aeabi_dmul+0x360>)
 8001e20:	429d      	cmp	r5, r3
 8001e22:	d100      	bne.n	8001e26 <__aeabi_dmul+0x2e>
 8001e24:	e1e9      	b.n	80021fa <__aeabi_dmul+0x402>
 8001e26:	465a      	mov	r2, fp
 8001e28:	0f43      	lsrs	r3, r0, #29
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	0412      	lsls	r2, r2, #16
 8001e32:	431a      	orrs	r2, r3
 8001e34:	00c3      	lsls	r3, r0, #3
 8001e36:	469a      	mov	sl, r3
 8001e38:	4bc8      	ldr	r3, [pc, #800]	; (800215c <__aeabi_dmul+0x364>)
 8001e3a:	4693      	mov	fp, r2
 8001e3c:	469c      	mov	ip, r3
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2600      	movs	r6, #0
 8001e42:	4465      	add	r5, ip
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	033c      	lsls	r4, r7, #12
 8001e48:	007b      	lsls	r3, r7, #1
 8001e4a:	4648      	mov	r0, r9
 8001e4c:	0b24      	lsrs	r4, r4, #12
 8001e4e:	0d5b      	lsrs	r3, r3, #21
 8001e50:	0fff      	lsrs	r7, r7, #31
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d100      	bne.n	8001e58 <__aeabi_dmul+0x60>
 8001e56:	e189      	b.n	800216c <__aeabi_dmul+0x374>
 8001e58:	4abf      	ldr	r2, [pc, #764]	; (8002158 <__aeabi_dmul+0x360>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d019      	beq.n	8001e92 <__aeabi_dmul+0x9a>
 8001e5e:	0f42      	lsrs	r2, r0, #29
 8001e60:	00e4      	lsls	r4, r4, #3
 8001e62:	4322      	orrs	r2, r4
 8001e64:	2480      	movs	r4, #128	; 0x80
 8001e66:	0424      	lsls	r4, r4, #16
 8001e68:	4314      	orrs	r4, r2
 8001e6a:	4abc      	ldr	r2, [pc, #752]	; (800215c <__aeabi_dmul+0x364>)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4694      	mov	ip, r2
 8001e70:	4642      	mov	r2, r8
 8001e72:	4463      	add	r3, ip
 8001e74:	195b      	adds	r3, r3, r5
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	9b01      	ldr	r3, [sp, #4]
 8001e7a:	407a      	eors	r2, r7
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	00c0      	lsls	r0, r0, #3
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	9302      	str	r3, [sp, #8]
 8001e84:	2e0a      	cmp	r6, #10
 8001e86:	dd1c      	ble.n	8001ec2 <__aeabi_dmul+0xca>
 8001e88:	003a      	movs	r2, r7
 8001e8a:	2e0b      	cmp	r6, #11
 8001e8c:	d05e      	beq.n	8001f4c <__aeabi_dmul+0x154>
 8001e8e:	4647      	mov	r7, r8
 8001e90:	e056      	b.n	8001f40 <__aeabi_dmul+0x148>
 8001e92:	4649      	mov	r1, r9
 8001e94:	4bb0      	ldr	r3, [pc, #704]	; (8002158 <__aeabi_dmul+0x360>)
 8001e96:	4321      	orrs	r1, r4
 8001e98:	18eb      	adds	r3, r5, r3
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	d12a      	bne.n	8001ef6 <__aeabi_dmul+0xfe>
 8001ea0:	2080      	movs	r0, #128	; 0x80
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	0100      	lsls	r0, r0, #4
 8001ea6:	002b      	movs	r3, r5
 8001ea8:	4684      	mov	ip, r0
 8001eaa:	4316      	orrs	r6, r2
 8001eac:	4642      	mov	r2, r8
 8001eae:	4463      	add	r3, ip
 8001eb0:	407a      	eors	r2, r7
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	9302      	str	r3, [sp, #8]
 8001eb6:	2e0a      	cmp	r6, #10
 8001eb8:	dd00      	ble.n	8001ebc <__aeabi_dmul+0xc4>
 8001eba:	e231      	b.n	8002320 <__aeabi_dmul+0x528>
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	2400      	movs	r4, #0
 8001ec0:	2102      	movs	r1, #2
 8001ec2:	2e02      	cmp	r6, #2
 8001ec4:	dc26      	bgt.n	8001f14 <__aeabi_dmul+0x11c>
 8001ec6:	3e01      	subs	r6, #1
 8001ec8:	2e01      	cmp	r6, #1
 8001eca:	d852      	bhi.n	8001f72 <__aeabi_dmul+0x17a>
 8001ecc:	2902      	cmp	r1, #2
 8001ece:	d04c      	beq.n	8001f6a <__aeabi_dmul+0x172>
 8001ed0:	2901      	cmp	r1, #1
 8001ed2:	d000      	beq.n	8001ed6 <__aeabi_dmul+0xde>
 8001ed4:	e118      	b.n	8002108 <__aeabi_dmul+0x310>
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	2400      	movs	r4, #0
 8001eda:	2500      	movs	r5, #0
 8001edc:	051b      	lsls	r3, r3, #20
 8001ede:	4323      	orrs	r3, r4
 8001ee0:	07d2      	lsls	r2, r2, #31
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	0028      	movs	r0, r5
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	b007      	add	sp, #28
 8001eea:	bcf0      	pop	{r4, r5, r6, r7}
 8001eec:	46bb      	mov	fp, r7
 8001eee:	46b2      	mov	sl, r6
 8001ef0:	46a9      	mov	r9, r5
 8001ef2:	46a0      	mov	r8, r4
 8001ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	2203      	movs	r2, #3
 8001efa:	0109      	lsls	r1, r1, #4
 8001efc:	002b      	movs	r3, r5
 8001efe:	468c      	mov	ip, r1
 8001f00:	4316      	orrs	r6, r2
 8001f02:	4642      	mov	r2, r8
 8001f04:	4463      	add	r3, ip
 8001f06:	407a      	eors	r2, r7
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	9302      	str	r3, [sp, #8]
 8001f0c:	2e0a      	cmp	r6, #10
 8001f0e:	dd00      	ble.n	8001f12 <__aeabi_dmul+0x11a>
 8001f10:	e228      	b.n	8002364 <__aeabi_dmul+0x56c>
 8001f12:	2103      	movs	r1, #3
 8001f14:	2501      	movs	r5, #1
 8001f16:	40b5      	lsls	r5, r6
 8001f18:	46ac      	mov	ip, r5
 8001f1a:	26a6      	movs	r6, #166	; 0xa6
 8001f1c:	4663      	mov	r3, ip
 8001f1e:	00f6      	lsls	r6, r6, #3
 8001f20:	4035      	ands	r5, r6
 8001f22:	4233      	tst	r3, r6
 8001f24:	d10b      	bne.n	8001f3e <__aeabi_dmul+0x146>
 8001f26:	2690      	movs	r6, #144	; 0x90
 8001f28:	00b6      	lsls	r6, r6, #2
 8001f2a:	4233      	tst	r3, r6
 8001f2c:	d118      	bne.n	8001f60 <__aeabi_dmul+0x168>
 8001f2e:	3eb9      	subs	r6, #185	; 0xb9
 8001f30:	3eff      	subs	r6, #255	; 0xff
 8001f32:	421e      	tst	r6, r3
 8001f34:	d01d      	beq.n	8001f72 <__aeabi_dmul+0x17a>
 8001f36:	46a3      	mov	fp, r4
 8001f38:	4682      	mov	sl, r0
 8001f3a:	9100      	str	r1, [sp, #0]
 8001f3c:	e000      	b.n	8001f40 <__aeabi_dmul+0x148>
 8001f3e:	0017      	movs	r7, r2
 8001f40:	9900      	ldr	r1, [sp, #0]
 8001f42:	003a      	movs	r2, r7
 8001f44:	2902      	cmp	r1, #2
 8001f46:	d010      	beq.n	8001f6a <__aeabi_dmul+0x172>
 8001f48:	465c      	mov	r4, fp
 8001f4a:	4650      	mov	r0, sl
 8001f4c:	2903      	cmp	r1, #3
 8001f4e:	d1bf      	bne.n	8001ed0 <__aeabi_dmul+0xd8>
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	031b      	lsls	r3, r3, #12
 8001f54:	431c      	orrs	r4, r3
 8001f56:	0324      	lsls	r4, r4, #12
 8001f58:	0005      	movs	r5, r0
 8001f5a:	4b7f      	ldr	r3, [pc, #508]	; (8002158 <__aeabi_dmul+0x360>)
 8001f5c:	0b24      	lsrs	r4, r4, #12
 8001f5e:	e7bd      	b.n	8001edc <__aeabi_dmul+0xe4>
 8001f60:	2480      	movs	r4, #128	; 0x80
 8001f62:	2200      	movs	r2, #0
 8001f64:	4b7c      	ldr	r3, [pc, #496]	; (8002158 <__aeabi_dmul+0x360>)
 8001f66:	0324      	lsls	r4, r4, #12
 8001f68:	e7b8      	b.n	8001edc <__aeabi_dmul+0xe4>
 8001f6a:	2400      	movs	r4, #0
 8001f6c:	2500      	movs	r5, #0
 8001f6e:	4b7a      	ldr	r3, [pc, #488]	; (8002158 <__aeabi_dmul+0x360>)
 8001f70:	e7b4      	b.n	8001edc <__aeabi_dmul+0xe4>
 8001f72:	4653      	mov	r3, sl
 8001f74:	041e      	lsls	r6, r3, #16
 8001f76:	0c36      	lsrs	r6, r6, #16
 8001f78:	0c1f      	lsrs	r7, r3, #16
 8001f7a:	0033      	movs	r3, r6
 8001f7c:	0c01      	lsrs	r1, r0, #16
 8001f7e:	0400      	lsls	r0, r0, #16
 8001f80:	0c00      	lsrs	r0, r0, #16
 8001f82:	4343      	muls	r3, r0
 8001f84:	4698      	mov	r8, r3
 8001f86:	0003      	movs	r3, r0
 8001f88:	437b      	muls	r3, r7
 8001f8a:	4699      	mov	r9, r3
 8001f8c:	0033      	movs	r3, r6
 8001f8e:	434b      	muls	r3, r1
 8001f90:	469c      	mov	ip, r3
 8001f92:	4643      	mov	r3, r8
 8001f94:	000d      	movs	r5, r1
 8001f96:	0c1b      	lsrs	r3, r3, #16
 8001f98:	469a      	mov	sl, r3
 8001f9a:	437d      	muls	r5, r7
 8001f9c:	44cc      	add	ip, r9
 8001f9e:	44d4      	add	ip, sl
 8001fa0:	9500      	str	r5, [sp, #0]
 8001fa2:	45e1      	cmp	r9, ip
 8001fa4:	d904      	bls.n	8001fb0 <__aeabi_dmul+0x1b8>
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	025b      	lsls	r3, r3, #9
 8001faa:	4699      	mov	r9, r3
 8001fac:	444d      	add	r5, r9
 8001fae:	9500      	str	r5, [sp, #0]
 8001fb0:	4663      	mov	r3, ip
 8001fb2:	0c1b      	lsrs	r3, r3, #16
 8001fb4:	001d      	movs	r5, r3
 8001fb6:	4663      	mov	r3, ip
 8001fb8:	041b      	lsls	r3, r3, #16
 8001fba:	469c      	mov	ip, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	041b      	lsls	r3, r3, #16
 8001fc0:	0c1b      	lsrs	r3, r3, #16
 8001fc2:	4698      	mov	r8, r3
 8001fc4:	4663      	mov	r3, ip
 8001fc6:	4443      	add	r3, r8
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	0c23      	lsrs	r3, r4, #16
 8001fcc:	4698      	mov	r8, r3
 8001fce:	0033      	movs	r3, r6
 8001fd0:	0424      	lsls	r4, r4, #16
 8001fd2:	0c24      	lsrs	r4, r4, #16
 8001fd4:	4363      	muls	r3, r4
 8001fd6:	469c      	mov	ip, r3
 8001fd8:	0023      	movs	r3, r4
 8001fda:	437b      	muls	r3, r7
 8001fdc:	4699      	mov	r9, r3
 8001fde:	4643      	mov	r3, r8
 8001fe0:	435e      	muls	r6, r3
 8001fe2:	435f      	muls	r7, r3
 8001fe4:	444e      	add	r6, r9
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	46b2      	mov	sl, r6
 8001fea:	0c1e      	lsrs	r6, r3, #16
 8001fec:	4456      	add	r6, sl
 8001fee:	45b1      	cmp	r9, r6
 8001ff0:	d903      	bls.n	8001ffa <__aeabi_dmul+0x202>
 8001ff2:	2380      	movs	r3, #128	; 0x80
 8001ff4:	025b      	lsls	r3, r3, #9
 8001ff6:	4699      	mov	r9, r3
 8001ff8:	444f      	add	r7, r9
 8001ffa:	0c33      	lsrs	r3, r6, #16
 8001ffc:	4699      	mov	r9, r3
 8001ffe:	003b      	movs	r3, r7
 8002000:	444b      	add	r3, r9
 8002002:	9305      	str	r3, [sp, #20]
 8002004:	4663      	mov	r3, ip
 8002006:	46ac      	mov	ip, r5
 8002008:	041f      	lsls	r7, r3, #16
 800200a:	0c3f      	lsrs	r7, r7, #16
 800200c:	0436      	lsls	r6, r6, #16
 800200e:	19f6      	adds	r6, r6, r7
 8002010:	44b4      	add	ip, r6
 8002012:	4663      	mov	r3, ip
 8002014:	9304      	str	r3, [sp, #16]
 8002016:	465b      	mov	r3, fp
 8002018:	0c1b      	lsrs	r3, r3, #16
 800201a:	469c      	mov	ip, r3
 800201c:	465b      	mov	r3, fp
 800201e:	041f      	lsls	r7, r3, #16
 8002020:	0c3f      	lsrs	r7, r7, #16
 8002022:	003b      	movs	r3, r7
 8002024:	4343      	muls	r3, r0
 8002026:	4699      	mov	r9, r3
 8002028:	4663      	mov	r3, ip
 800202a:	4343      	muls	r3, r0
 800202c:	469a      	mov	sl, r3
 800202e:	464b      	mov	r3, r9
 8002030:	4660      	mov	r0, ip
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	469b      	mov	fp, r3
 8002036:	4348      	muls	r0, r1
 8002038:	4379      	muls	r1, r7
 800203a:	4451      	add	r1, sl
 800203c:	4459      	add	r1, fp
 800203e:	458a      	cmp	sl, r1
 8002040:	d903      	bls.n	800204a <__aeabi_dmul+0x252>
 8002042:	2380      	movs	r3, #128	; 0x80
 8002044:	025b      	lsls	r3, r3, #9
 8002046:	469a      	mov	sl, r3
 8002048:	4450      	add	r0, sl
 800204a:	0c0b      	lsrs	r3, r1, #16
 800204c:	469a      	mov	sl, r3
 800204e:	464b      	mov	r3, r9
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	4699      	mov	r9, r3
 8002056:	003b      	movs	r3, r7
 8002058:	4363      	muls	r3, r4
 800205a:	0409      	lsls	r1, r1, #16
 800205c:	4645      	mov	r5, r8
 800205e:	4449      	add	r1, r9
 8002060:	4699      	mov	r9, r3
 8002062:	4663      	mov	r3, ip
 8002064:	435c      	muls	r4, r3
 8002066:	436b      	muls	r3, r5
 8002068:	469c      	mov	ip, r3
 800206a:	464b      	mov	r3, r9
 800206c:	0c1b      	lsrs	r3, r3, #16
 800206e:	4698      	mov	r8, r3
 8002070:	436f      	muls	r7, r5
 8002072:	193f      	adds	r7, r7, r4
 8002074:	4447      	add	r7, r8
 8002076:	4450      	add	r0, sl
 8002078:	42bc      	cmp	r4, r7
 800207a:	d903      	bls.n	8002084 <__aeabi_dmul+0x28c>
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	025b      	lsls	r3, r3, #9
 8002080:	4698      	mov	r8, r3
 8002082:	44c4      	add	ip, r8
 8002084:	9b04      	ldr	r3, [sp, #16]
 8002086:	9d00      	ldr	r5, [sp, #0]
 8002088:	4698      	mov	r8, r3
 800208a:	4445      	add	r5, r8
 800208c:	42b5      	cmp	r5, r6
 800208e:	41b6      	sbcs	r6, r6
 8002090:	4273      	negs	r3, r6
 8002092:	4698      	mov	r8, r3
 8002094:	464b      	mov	r3, r9
 8002096:	041e      	lsls	r6, r3, #16
 8002098:	9b05      	ldr	r3, [sp, #20]
 800209a:	043c      	lsls	r4, r7, #16
 800209c:	4699      	mov	r9, r3
 800209e:	0c36      	lsrs	r6, r6, #16
 80020a0:	19a4      	adds	r4, r4, r6
 80020a2:	444c      	add	r4, r9
 80020a4:	46a1      	mov	r9, r4
 80020a6:	4683      	mov	fp, r0
 80020a8:	186e      	adds	r6, r5, r1
 80020aa:	44c1      	add	r9, r8
 80020ac:	428e      	cmp	r6, r1
 80020ae:	4189      	sbcs	r1, r1
 80020b0:	44cb      	add	fp, r9
 80020b2:	465d      	mov	r5, fp
 80020b4:	4249      	negs	r1, r1
 80020b6:	186d      	adds	r5, r5, r1
 80020b8:	429c      	cmp	r4, r3
 80020ba:	41a4      	sbcs	r4, r4
 80020bc:	45c1      	cmp	r9, r8
 80020be:	419b      	sbcs	r3, r3
 80020c0:	4583      	cmp	fp, r0
 80020c2:	4180      	sbcs	r0, r0
 80020c4:	428d      	cmp	r5, r1
 80020c6:	4189      	sbcs	r1, r1
 80020c8:	425b      	negs	r3, r3
 80020ca:	4264      	negs	r4, r4
 80020cc:	431c      	orrs	r4, r3
 80020ce:	4240      	negs	r0, r0
 80020d0:	9b03      	ldr	r3, [sp, #12]
 80020d2:	4249      	negs	r1, r1
 80020d4:	4301      	orrs	r1, r0
 80020d6:	0270      	lsls	r0, r6, #9
 80020d8:	0c3f      	lsrs	r7, r7, #16
 80020da:	4318      	orrs	r0, r3
 80020dc:	19e4      	adds	r4, r4, r7
 80020de:	1e47      	subs	r7, r0, #1
 80020e0:	41b8      	sbcs	r0, r7
 80020e2:	1864      	adds	r4, r4, r1
 80020e4:	4464      	add	r4, ip
 80020e6:	0df6      	lsrs	r6, r6, #23
 80020e8:	0261      	lsls	r1, r4, #9
 80020ea:	4330      	orrs	r0, r6
 80020ec:	0dec      	lsrs	r4, r5, #23
 80020ee:	026e      	lsls	r6, r5, #9
 80020f0:	430c      	orrs	r4, r1
 80020f2:	4330      	orrs	r0, r6
 80020f4:	01c9      	lsls	r1, r1, #7
 80020f6:	d400      	bmi.n	80020fa <__aeabi_dmul+0x302>
 80020f8:	e0f1      	b.n	80022de <__aeabi_dmul+0x4e6>
 80020fa:	2101      	movs	r1, #1
 80020fc:	0843      	lsrs	r3, r0, #1
 80020fe:	4001      	ands	r1, r0
 8002100:	430b      	orrs	r3, r1
 8002102:	07e0      	lsls	r0, r4, #31
 8002104:	4318      	orrs	r0, r3
 8002106:	0864      	lsrs	r4, r4, #1
 8002108:	4915      	ldr	r1, [pc, #84]	; (8002160 <__aeabi_dmul+0x368>)
 800210a:	9b02      	ldr	r3, [sp, #8]
 800210c:	468c      	mov	ip, r1
 800210e:	4463      	add	r3, ip
 8002110:	2b00      	cmp	r3, #0
 8002112:	dc00      	bgt.n	8002116 <__aeabi_dmul+0x31e>
 8002114:	e097      	b.n	8002246 <__aeabi_dmul+0x44e>
 8002116:	0741      	lsls	r1, r0, #29
 8002118:	d009      	beq.n	800212e <__aeabi_dmul+0x336>
 800211a:	210f      	movs	r1, #15
 800211c:	4001      	ands	r1, r0
 800211e:	2904      	cmp	r1, #4
 8002120:	d005      	beq.n	800212e <__aeabi_dmul+0x336>
 8002122:	1d01      	adds	r1, r0, #4
 8002124:	4281      	cmp	r1, r0
 8002126:	4180      	sbcs	r0, r0
 8002128:	4240      	negs	r0, r0
 800212a:	1824      	adds	r4, r4, r0
 800212c:	0008      	movs	r0, r1
 800212e:	01e1      	lsls	r1, r4, #7
 8002130:	d506      	bpl.n	8002140 <__aeabi_dmul+0x348>
 8002132:	2180      	movs	r1, #128	; 0x80
 8002134:	00c9      	lsls	r1, r1, #3
 8002136:	468c      	mov	ip, r1
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <__aeabi_dmul+0x36c>)
 800213a:	401c      	ands	r4, r3
 800213c:	9b02      	ldr	r3, [sp, #8]
 800213e:	4463      	add	r3, ip
 8002140:	4909      	ldr	r1, [pc, #36]	; (8002168 <__aeabi_dmul+0x370>)
 8002142:	428b      	cmp	r3, r1
 8002144:	dd00      	ble.n	8002148 <__aeabi_dmul+0x350>
 8002146:	e710      	b.n	8001f6a <__aeabi_dmul+0x172>
 8002148:	0761      	lsls	r1, r4, #29
 800214a:	08c5      	lsrs	r5, r0, #3
 800214c:	0264      	lsls	r4, r4, #9
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	430d      	orrs	r5, r1
 8002152:	0b24      	lsrs	r4, r4, #12
 8002154:	0d5b      	lsrs	r3, r3, #21
 8002156:	e6c1      	b.n	8001edc <__aeabi_dmul+0xe4>
 8002158:	000007ff 	.word	0x000007ff
 800215c:	fffffc01 	.word	0xfffffc01
 8002160:	000003ff 	.word	0x000003ff
 8002164:	feffffff 	.word	0xfeffffff
 8002168:	000007fe 	.word	0x000007fe
 800216c:	464b      	mov	r3, r9
 800216e:	4323      	orrs	r3, r4
 8002170:	d059      	beq.n	8002226 <__aeabi_dmul+0x42e>
 8002172:	2c00      	cmp	r4, #0
 8002174:	d100      	bne.n	8002178 <__aeabi_dmul+0x380>
 8002176:	e0a3      	b.n	80022c0 <__aeabi_dmul+0x4c8>
 8002178:	0020      	movs	r0, r4
 800217a:	f000 fd6d 	bl	8002c58 <__clzsi2>
 800217e:	0001      	movs	r1, r0
 8002180:	0003      	movs	r3, r0
 8002182:	390b      	subs	r1, #11
 8002184:	221d      	movs	r2, #29
 8002186:	1a52      	subs	r2, r2, r1
 8002188:	4649      	mov	r1, r9
 800218a:	0018      	movs	r0, r3
 800218c:	40d1      	lsrs	r1, r2
 800218e:	464a      	mov	r2, r9
 8002190:	3808      	subs	r0, #8
 8002192:	4082      	lsls	r2, r0
 8002194:	4084      	lsls	r4, r0
 8002196:	0010      	movs	r0, r2
 8002198:	430c      	orrs	r4, r1
 800219a:	4a74      	ldr	r2, [pc, #464]	; (800236c <__aeabi_dmul+0x574>)
 800219c:	1aeb      	subs	r3, r5, r3
 800219e:	4694      	mov	ip, r2
 80021a0:	4642      	mov	r2, r8
 80021a2:	4463      	add	r3, ip
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	9b01      	ldr	r3, [sp, #4]
 80021a8:	407a      	eors	r2, r7
 80021aa:	3301      	adds	r3, #1
 80021ac:	2100      	movs	r1, #0
 80021ae:	b2d2      	uxtb	r2, r2
 80021b0:	9302      	str	r3, [sp, #8]
 80021b2:	2e0a      	cmp	r6, #10
 80021b4:	dd00      	ble.n	80021b8 <__aeabi_dmul+0x3c0>
 80021b6:	e667      	b.n	8001e88 <__aeabi_dmul+0x90>
 80021b8:	e683      	b.n	8001ec2 <__aeabi_dmul+0xca>
 80021ba:	465b      	mov	r3, fp
 80021bc:	4303      	orrs	r3, r0
 80021be:	469a      	mov	sl, r3
 80021c0:	d02a      	beq.n	8002218 <__aeabi_dmul+0x420>
 80021c2:	465b      	mov	r3, fp
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d06d      	beq.n	80022a4 <__aeabi_dmul+0x4ac>
 80021c8:	4658      	mov	r0, fp
 80021ca:	f000 fd45 	bl	8002c58 <__clzsi2>
 80021ce:	0001      	movs	r1, r0
 80021d0:	0003      	movs	r3, r0
 80021d2:	390b      	subs	r1, #11
 80021d4:	221d      	movs	r2, #29
 80021d6:	1a52      	subs	r2, r2, r1
 80021d8:	0021      	movs	r1, r4
 80021da:	0018      	movs	r0, r3
 80021dc:	465d      	mov	r5, fp
 80021de:	40d1      	lsrs	r1, r2
 80021e0:	3808      	subs	r0, #8
 80021e2:	4085      	lsls	r5, r0
 80021e4:	000a      	movs	r2, r1
 80021e6:	4084      	lsls	r4, r0
 80021e8:	432a      	orrs	r2, r5
 80021ea:	4693      	mov	fp, r2
 80021ec:	46a2      	mov	sl, r4
 80021ee:	4d5f      	ldr	r5, [pc, #380]	; (800236c <__aeabi_dmul+0x574>)
 80021f0:	2600      	movs	r6, #0
 80021f2:	1aed      	subs	r5, r5, r3
 80021f4:	2300      	movs	r3, #0
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	e625      	b.n	8001e46 <__aeabi_dmul+0x4e>
 80021fa:	465b      	mov	r3, fp
 80021fc:	4303      	orrs	r3, r0
 80021fe:	469a      	mov	sl, r3
 8002200:	d105      	bne.n	800220e <__aeabi_dmul+0x416>
 8002202:	2300      	movs	r3, #0
 8002204:	469b      	mov	fp, r3
 8002206:	3302      	adds	r3, #2
 8002208:	2608      	movs	r6, #8
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	e61b      	b.n	8001e46 <__aeabi_dmul+0x4e>
 800220e:	2303      	movs	r3, #3
 8002210:	4682      	mov	sl, r0
 8002212:	260c      	movs	r6, #12
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	e616      	b.n	8001e46 <__aeabi_dmul+0x4e>
 8002218:	2300      	movs	r3, #0
 800221a:	469b      	mov	fp, r3
 800221c:	3301      	adds	r3, #1
 800221e:	2604      	movs	r6, #4
 8002220:	2500      	movs	r5, #0
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	e60f      	b.n	8001e46 <__aeabi_dmul+0x4e>
 8002226:	4642      	mov	r2, r8
 8002228:	3301      	adds	r3, #1
 800222a:	9501      	str	r5, [sp, #4]
 800222c:	431e      	orrs	r6, r3
 800222e:	9b01      	ldr	r3, [sp, #4]
 8002230:	407a      	eors	r2, r7
 8002232:	3301      	adds	r3, #1
 8002234:	2400      	movs	r4, #0
 8002236:	2000      	movs	r0, #0
 8002238:	2101      	movs	r1, #1
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	2e0a      	cmp	r6, #10
 8002240:	dd00      	ble.n	8002244 <__aeabi_dmul+0x44c>
 8002242:	e621      	b.n	8001e88 <__aeabi_dmul+0x90>
 8002244:	e63d      	b.n	8001ec2 <__aeabi_dmul+0xca>
 8002246:	2101      	movs	r1, #1
 8002248:	1ac9      	subs	r1, r1, r3
 800224a:	2938      	cmp	r1, #56	; 0x38
 800224c:	dd00      	ble.n	8002250 <__aeabi_dmul+0x458>
 800224e:	e642      	b.n	8001ed6 <__aeabi_dmul+0xde>
 8002250:	291f      	cmp	r1, #31
 8002252:	dd47      	ble.n	80022e4 <__aeabi_dmul+0x4ec>
 8002254:	261f      	movs	r6, #31
 8002256:	0025      	movs	r5, r4
 8002258:	4276      	negs	r6, r6
 800225a:	1af3      	subs	r3, r6, r3
 800225c:	40dd      	lsrs	r5, r3
 800225e:	002b      	movs	r3, r5
 8002260:	2920      	cmp	r1, #32
 8002262:	d005      	beq.n	8002270 <__aeabi_dmul+0x478>
 8002264:	4942      	ldr	r1, [pc, #264]	; (8002370 <__aeabi_dmul+0x578>)
 8002266:	9d02      	ldr	r5, [sp, #8]
 8002268:	468c      	mov	ip, r1
 800226a:	4465      	add	r5, ip
 800226c:	40ac      	lsls	r4, r5
 800226e:	4320      	orrs	r0, r4
 8002270:	1e41      	subs	r1, r0, #1
 8002272:	4188      	sbcs	r0, r1
 8002274:	4318      	orrs	r0, r3
 8002276:	2307      	movs	r3, #7
 8002278:	001d      	movs	r5, r3
 800227a:	2400      	movs	r4, #0
 800227c:	4005      	ands	r5, r0
 800227e:	4203      	tst	r3, r0
 8002280:	d04a      	beq.n	8002318 <__aeabi_dmul+0x520>
 8002282:	230f      	movs	r3, #15
 8002284:	2400      	movs	r4, #0
 8002286:	4003      	ands	r3, r0
 8002288:	2b04      	cmp	r3, #4
 800228a:	d042      	beq.n	8002312 <__aeabi_dmul+0x51a>
 800228c:	1d03      	adds	r3, r0, #4
 800228e:	4283      	cmp	r3, r0
 8002290:	4180      	sbcs	r0, r0
 8002292:	4240      	negs	r0, r0
 8002294:	1824      	adds	r4, r4, r0
 8002296:	0018      	movs	r0, r3
 8002298:	0223      	lsls	r3, r4, #8
 800229a:	d53a      	bpl.n	8002312 <__aeabi_dmul+0x51a>
 800229c:	2301      	movs	r3, #1
 800229e:	2400      	movs	r4, #0
 80022a0:	2500      	movs	r5, #0
 80022a2:	e61b      	b.n	8001edc <__aeabi_dmul+0xe4>
 80022a4:	f000 fcd8 	bl	8002c58 <__clzsi2>
 80022a8:	0001      	movs	r1, r0
 80022aa:	0003      	movs	r3, r0
 80022ac:	3115      	adds	r1, #21
 80022ae:	3320      	adds	r3, #32
 80022b0:	291c      	cmp	r1, #28
 80022b2:	dd8f      	ble.n	80021d4 <__aeabi_dmul+0x3dc>
 80022b4:	3808      	subs	r0, #8
 80022b6:	2200      	movs	r2, #0
 80022b8:	4084      	lsls	r4, r0
 80022ba:	4692      	mov	sl, r2
 80022bc:	46a3      	mov	fp, r4
 80022be:	e796      	b.n	80021ee <__aeabi_dmul+0x3f6>
 80022c0:	f000 fcca 	bl	8002c58 <__clzsi2>
 80022c4:	0001      	movs	r1, r0
 80022c6:	0003      	movs	r3, r0
 80022c8:	3115      	adds	r1, #21
 80022ca:	3320      	adds	r3, #32
 80022cc:	291c      	cmp	r1, #28
 80022ce:	dc00      	bgt.n	80022d2 <__aeabi_dmul+0x4da>
 80022d0:	e758      	b.n	8002184 <__aeabi_dmul+0x38c>
 80022d2:	0002      	movs	r2, r0
 80022d4:	464c      	mov	r4, r9
 80022d6:	3a08      	subs	r2, #8
 80022d8:	2000      	movs	r0, #0
 80022da:	4094      	lsls	r4, r2
 80022dc:	e75d      	b.n	800219a <__aeabi_dmul+0x3a2>
 80022de:	9b01      	ldr	r3, [sp, #4]
 80022e0:	9302      	str	r3, [sp, #8]
 80022e2:	e711      	b.n	8002108 <__aeabi_dmul+0x310>
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <__aeabi_dmul+0x57c>)
 80022e6:	0026      	movs	r6, r4
 80022e8:	469c      	mov	ip, r3
 80022ea:	0003      	movs	r3, r0
 80022ec:	9d02      	ldr	r5, [sp, #8]
 80022ee:	40cb      	lsrs	r3, r1
 80022f0:	4465      	add	r5, ip
 80022f2:	40ae      	lsls	r6, r5
 80022f4:	431e      	orrs	r6, r3
 80022f6:	0003      	movs	r3, r0
 80022f8:	40ab      	lsls	r3, r5
 80022fa:	1e58      	subs	r0, r3, #1
 80022fc:	4183      	sbcs	r3, r0
 80022fe:	0030      	movs	r0, r6
 8002300:	4318      	orrs	r0, r3
 8002302:	40cc      	lsrs	r4, r1
 8002304:	0743      	lsls	r3, r0, #29
 8002306:	d0c7      	beq.n	8002298 <__aeabi_dmul+0x4a0>
 8002308:	230f      	movs	r3, #15
 800230a:	4003      	ands	r3, r0
 800230c:	2b04      	cmp	r3, #4
 800230e:	d1bd      	bne.n	800228c <__aeabi_dmul+0x494>
 8002310:	e7c2      	b.n	8002298 <__aeabi_dmul+0x4a0>
 8002312:	0765      	lsls	r5, r4, #29
 8002314:	0264      	lsls	r4, r4, #9
 8002316:	0b24      	lsrs	r4, r4, #12
 8002318:	08c0      	lsrs	r0, r0, #3
 800231a:	2300      	movs	r3, #0
 800231c:	4305      	orrs	r5, r0
 800231e:	e5dd      	b.n	8001edc <__aeabi_dmul+0xe4>
 8002320:	2500      	movs	r5, #0
 8002322:	2302      	movs	r3, #2
 8002324:	2e0f      	cmp	r6, #15
 8002326:	d10c      	bne.n	8002342 <__aeabi_dmul+0x54a>
 8002328:	2480      	movs	r4, #128	; 0x80
 800232a:	465b      	mov	r3, fp
 800232c:	0324      	lsls	r4, r4, #12
 800232e:	4223      	tst	r3, r4
 8002330:	d00e      	beq.n	8002350 <__aeabi_dmul+0x558>
 8002332:	4221      	tst	r1, r4
 8002334:	d10c      	bne.n	8002350 <__aeabi_dmul+0x558>
 8002336:	430c      	orrs	r4, r1
 8002338:	0324      	lsls	r4, r4, #12
 800233a:	003a      	movs	r2, r7
 800233c:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <__aeabi_dmul+0x580>)
 800233e:	0b24      	lsrs	r4, r4, #12
 8002340:	e5cc      	b.n	8001edc <__aeabi_dmul+0xe4>
 8002342:	2e0b      	cmp	r6, #11
 8002344:	d000      	beq.n	8002348 <__aeabi_dmul+0x550>
 8002346:	e5a2      	b.n	8001e8e <__aeabi_dmul+0x96>
 8002348:	468b      	mov	fp, r1
 800234a:	46aa      	mov	sl, r5
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	e5f7      	b.n	8001f40 <__aeabi_dmul+0x148>
 8002350:	2480      	movs	r4, #128	; 0x80
 8002352:	465b      	mov	r3, fp
 8002354:	0324      	lsls	r4, r4, #12
 8002356:	431c      	orrs	r4, r3
 8002358:	0324      	lsls	r4, r4, #12
 800235a:	4642      	mov	r2, r8
 800235c:	4655      	mov	r5, sl
 800235e:	4b06      	ldr	r3, [pc, #24]	; (8002378 <__aeabi_dmul+0x580>)
 8002360:	0b24      	lsrs	r4, r4, #12
 8002362:	e5bb      	b.n	8001edc <__aeabi_dmul+0xe4>
 8002364:	464d      	mov	r5, r9
 8002366:	0021      	movs	r1, r4
 8002368:	2303      	movs	r3, #3
 800236a:	e7db      	b.n	8002324 <__aeabi_dmul+0x52c>
 800236c:	fffffc0d 	.word	0xfffffc0d
 8002370:	0000043e 	.word	0x0000043e
 8002374:	0000041e 	.word	0x0000041e
 8002378:	000007ff 	.word	0x000007ff

0800237c <__aeabi_dsub>:
 800237c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800237e:	4657      	mov	r7, sl
 8002380:	464e      	mov	r6, r9
 8002382:	4645      	mov	r5, r8
 8002384:	46de      	mov	lr, fp
 8002386:	b5e0      	push	{r5, r6, r7, lr}
 8002388:	000d      	movs	r5, r1
 800238a:	0004      	movs	r4, r0
 800238c:	0019      	movs	r1, r3
 800238e:	0010      	movs	r0, r2
 8002390:	032b      	lsls	r3, r5, #12
 8002392:	0a5b      	lsrs	r3, r3, #9
 8002394:	0f62      	lsrs	r2, r4, #29
 8002396:	431a      	orrs	r2, r3
 8002398:	00e3      	lsls	r3, r4, #3
 800239a:	030c      	lsls	r4, r1, #12
 800239c:	0a64      	lsrs	r4, r4, #9
 800239e:	0f47      	lsrs	r7, r0, #29
 80023a0:	4327      	orrs	r7, r4
 80023a2:	4cd0      	ldr	r4, [pc, #832]	; (80026e4 <__aeabi_dsub+0x368>)
 80023a4:	006e      	lsls	r6, r5, #1
 80023a6:	4691      	mov	r9, r2
 80023a8:	b083      	sub	sp, #12
 80023aa:	004a      	lsls	r2, r1, #1
 80023ac:	00c0      	lsls	r0, r0, #3
 80023ae:	4698      	mov	r8, r3
 80023b0:	46a2      	mov	sl, r4
 80023b2:	0d76      	lsrs	r6, r6, #21
 80023b4:	0fed      	lsrs	r5, r5, #31
 80023b6:	0d52      	lsrs	r2, r2, #21
 80023b8:	0fc9      	lsrs	r1, r1, #31
 80023ba:	9001      	str	r0, [sp, #4]
 80023bc:	42a2      	cmp	r2, r4
 80023be:	d100      	bne.n	80023c2 <__aeabi_dsub+0x46>
 80023c0:	e0b9      	b.n	8002536 <__aeabi_dsub+0x1ba>
 80023c2:	2401      	movs	r4, #1
 80023c4:	4061      	eors	r1, r4
 80023c6:	468b      	mov	fp, r1
 80023c8:	428d      	cmp	r5, r1
 80023ca:	d100      	bne.n	80023ce <__aeabi_dsub+0x52>
 80023cc:	e08d      	b.n	80024ea <__aeabi_dsub+0x16e>
 80023ce:	1ab4      	subs	r4, r6, r2
 80023d0:	46a4      	mov	ip, r4
 80023d2:	2c00      	cmp	r4, #0
 80023d4:	dc00      	bgt.n	80023d8 <__aeabi_dsub+0x5c>
 80023d6:	e0b7      	b.n	8002548 <__aeabi_dsub+0x1cc>
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d100      	bne.n	80023de <__aeabi_dsub+0x62>
 80023dc:	e0cb      	b.n	8002576 <__aeabi_dsub+0x1fa>
 80023de:	4ac1      	ldr	r2, [pc, #772]	; (80026e4 <__aeabi_dsub+0x368>)
 80023e0:	4296      	cmp	r6, r2
 80023e2:	d100      	bne.n	80023e6 <__aeabi_dsub+0x6a>
 80023e4:	e186      	b.n	80026f4 <__aeabi_dsub+0x378>
 80023e6:	2280      	movs	r2, #128	; 0x80
 80023e8:	0412      	lsls	r2, r2, #16
 80023ea:	4317      	orrs	r7, r2
 80023ec:	4662      	mov	r2, ip
 80023ee:	2a38      	cmp	r2, #56	; 0x38
 80023f0:	dd00      	ble.n	80023f4 <__aeabi_dsub+0x78>
 80023f2:	e1a4      	b.n	800273e <__aeabi_dsub+0x3c2>
 80023f4:	2a1f      	cmp	r2, #31
 80023f6:	dd00      	ble.n	80023fa <__aeabi_dsub+0x7e>
 80023f8:	e21d      	b.n	8002836 <__aeabi_dsub+0x4ba>
 80023fa:	4661      	mov	r1, ip
 80023fc:	2220      	movs	r2, #32
 80023fe:	003c      	movs	r4, r7
 8002400:	1a52      	subs	r2, r2, r1
 8002402:	0001      	movs	r1, r0
 8002404:	4090      	lsls	r0, r2
 8002406:	4094      	lsls	r4, r2
 8002408:	1e42      	subs	r2, r0, #1
 800240a:	4190      	sbcs	r0, r2
 800240c:	4662      	mov	r2, ip
 800240e:	46a0      	mov	r8, r4
 8002410:	4664      	mov	r4, ip
 8002412:	40d7      	lsrs	r7, r2
 8002414:	464a      	mov	r2, r9
 8002416:	40e1      	lsrs	r1, r4
 8002418:	4644      	mov	r4, r8
 800241a:	1bd2      	subs	r2, r2, r7
 800241c:	4691      	mov	r9, r2
 800241e:	430c      	orrs	r4, r1
 8002420:	4304      	orrs	r4, r0
 8002422:	1b1c      	subs	r4, r3, r4
 8002424:	42a3      	cmp	r3, r4
 8002426:	4192      	sbcs	r2, r2
 8002428:	464b      	mov	r3, r9
 800242a:	4252      	negs	r2, r2
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	469a      	mov	sl, r3
 8002430:	4653      	mov	r3, sl
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	d400      	bmi.n	8002438 <__aeabi_dsub+0xbc>
 8002436:	e12b      	b.n	8002690 <__aeabi_dsub+0x314>
 8002438:	4653      	mov	r3, sl
 800243a:	025a      	lsls	r2, r3, #9
 800243c:	0a53      	lsrs	r3, r2, #9
 800243e:	469a      	mov	sl, r3
 8002440:	4653      	mov	r3, sl
 8002442:	2b00      	cmp	r3, #0
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0xcc>
 8002446:	e166      	b.n	8002716 <__aeabi_dsub+0x39a>
 8002448:	4650      	mov	r0, sl
 800244a:	f000 fc05 	bl	8002c58 <__clzsi2>
 800244e:	0003      	movs	r3, r0
 8002450:	3b08      	subs	r3, #8
 8002452:	2220      	movs	r2, #32
 8002454:	0020      	movs	r0, r4
 8002456:	1ad2      	subs	r2, r2, r3
 8002458:	4651      	mov	r1, sl
 800245a:	40d0      	lsrs	r0, r2
 800245c:	4099      	lsls	r1, r3
 800245e:	0002      	movs	r2, r0
 8002460:	409c      	lsls	r4, r3
 8002462:	430a      	orrs	r2, r1
 8002464:	429e      	cmp	r6, r3
 8002466:	dd00      	ble.n	800246a <__aeabi_dsub+0xee>
 8002468:	e164      	b.n	8002734 <__aeabi_dsub+0x3b8>
 800246a:	1b9b      	subs	r3, r3, r6
 800246c:	1c59      	adds	r1, r3, #1
 800246e:	291f      	cmp	r1, #31
 8002470:	dd00      	ble.n	8002474 <__aeabi_dsub+0xf8>
 8002472:	e0fe      	b.n	8002672 <__aeabi_dsub+0x2f6>
 8002474:	2320      	movs	r3, #32
 8002476:	0010      	movs	r0, r2
 8002478:	0026      	movs	r6, r4
 800247a:	1a5b      	subs	r3, r3, r1
 800247c:	409c      	lsls	r4, r3
 800247e:	4098      	lsls	r0, r3
 8002480:	40ce      	lsrs	r6, r1
 8002482:	40ca      	lsrs	r2, r1
 8002484:	1e63      	subs	r3, r4, #1
 8002486:	419c      	sbcs	r4, r3
 8002488:	4330      	orrs	r0, r6
 800248a:	4692      	mov	sl, r2
 800248c:	2600      	movs	r6, #0
 800248e:	4304      	orrs	r4, r0
 8002490:	0763      	lsls	r3, r4, #29
 8002492:	d009      	beq.n	80024a8 <__aeabi_dsub+0x12c>
 8002494:	230f      	movs	r3, #15
 8002496:	4023      	ands	r3, r4
 8002498:	2b04      	cmp	r3, #4
 800249a:	d005      	beq.n	80024a8 <__aeabi_dsub+0x12c>
 800249c:	1d23      	adds	r3, r4, #4
 800249e:	42a3      	cmp	r3, r4
 80024a0:	41a4      	sbcs	r4, r4
 80024a2:	4264      	negs	r4, r4
 80024a4:	44a2      	add	sl, r4
 80024a6:	001c      	movs	r4, r3
 80024a8:	4653      	mov	r3, sl
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	d400      	bmi.n	80024b0 <__aeabi_dsub+0x134>
 80024ae:	e0f2      	b.n	8002696 <__aeabi_dsub+0x31a>
 80024b0:	4b8c      	ldr	r3, [pc, #560]	; (80026e4 <__aeabi_dsub+0x368>)
 80024b2:	3601      	adds	r6, #1
 80024b4:	429e      	cmp	r6, r3
 80024b6:	d100      	bne.n	80024ba <__aeabi_dsub+0x13e>
 80024b8:	e10f      	b.n	80026da <__aeabi_dsub+0x35e>
 80024ba:	4653      	mov	r3, sl
 80024bc:	498a      	ldr	r1, [pc, #552]	; (80026e8 <__aeabi_dsub+0x36c>)
 80024be:	08e4      	lsrs	r4, r4, #3
 80024c0:	400b      	ands	r3, r1
 80024c2:	0019      	movs	r1, r3
 80024c4:	075b      	lsls	r3, r3, #29
 80024c6:	4323      	orrs	r3, r4
 80024c8:	0572      	lsls	r2, r6, #21
 80024ca:	024c      	lsls	r4, r1, #9
 80024cc:	0b24      	lsrs	r4, r4, #12
 80024ce:	0d52      	lsrs	r2, r2, #21
 80024d0:	0512      	lsls	r2, r2, #20
 80024d2:	4322      	orrs	r2, r4
 80024d4:	07ed      	lsls	r5, r5, #31
 80024d6:	432a      	orrs	r2, r5
 80024d8:	0018      	movs	r0, r3
 80024da:	0011      	movs	r1, r2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	1ab4      	subs	r4, r6, r2
 80024ec:	46a4      	mov	ip, r4
 80024ee:	2c00      	cmp	r4, #0
 80024f0:	dd59      	ble.n	80025a6 <__aeabi_dsub+0x22a>
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d100      	bne.n	80024f8 <__aeabi_dsub+0x17c>
 80024f6:	e0b0      	b.n	800265a <__aeabi_dsub+0x2de>
 80024f8:	4556      	cmp	r6, sl
 80024fa:	d100      	bne.n	80024fe <__aeabi_dsub+0x182>
 80024fc:	e0fa      	b.n	80026f4 <__aeabi_dsub+0x378>
 80024fe:	2280      	movs	r2, #128	; 0x80
 8002500:	0412      	lsls	r2, r2, #16
 8002502:	4317      	orrs	r7, r2
 8002504:	4662      	mov	r2, ip
 8002506:	2a38      	cmp	r2, #56	; 0x38
 8002508:	dd00      	ble.n	800250c <__aeabi_dsub+0x190>
 800250a:	e0d4      	b.n	80026b6 <__aeabi_dsub+0x33a>
 800250c:	2a1f      	cmp	r2, #31
 800250e:	dc00      	bgt.n	8002512 <__aeabi_dsub+0x196>
 8002510:	e1c0      	b.n	8002894 <__aeabi_dsub+0x518>
 8002512:	0039      	movs	r1, r7
 8002514:	3a20      	subs	r2, #32
 8002516:	40d1      	lsrs	r1, r2
 8002518:	4662      	mov	r2, ip
 800251a:	2a20      	cmp	r2, #32
 800251c:	d006      	beq.n	800252c <__aeabi_dsub+0x1b0>
 800251e:	4664      	mov	r4, ip
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	1b12      	subs	r2, r2, r4
 8002524:	003c      	movs	r4, r7
 8002526:	4094      	lsls	r4, r2
 8002528:	4304      	orrs	r4, r0
 800252a:	9401      	str	r4, [sp, #4]
 800252c:	9c01      	ldr	r4, [sp, #4]
 800252e:	1e62      	subs	r2, r4, #1
 8002530:	4194      	sbcs	r4, r2
 8002532:	430c      	orrs	r4, r1
 8002534:	e0c3      	b.n	80026be <__aeabi_dsub+0x342>
 8002536:	003c      	movs	r4, r7
 8002538:	4304      	orrs	r4, r0
 800253a:	d02b      	beq.n	8002594 <__aeabi_dsub+0x218>
 800253c:	468b      	mov	fp, r1
 800253e:	428d      	cmp	r5, r1
 8002540:	d02e      	beq.n	80025a0 <__aeabi_dsub+0x224>
 8002542:	4c6a      	ldr	r4, [pc, #424]	; (80026ec <__aeabi_dsub+0x370>)
 8002544:	46a4      	mov	ip, r4
 8002546:	44b4      	add	ip, r6
 8002548:	4664      	mov	r4, ip
 800254a:	2c00      	cmp	r4, #0
 800254c:	d05f      	beq.n	800260e <__aeabi_dsub+0x292>
 800254e:	1b94      	subs	r4, r2, r6
 8002550:	46a4      	mov	ip, r4
 8002552:	2e00      	cmp	r6, #0
 8002554:	d000      	beq.n	8002558 <__aeabi_dsub+0x1dc>
 8002556:	e120      	b.n	800279a <__aeabi_dsub+0x41e>
 8002558:	464c      	mov	r4, r9
 800255a:	431c      	orrs	r4, r3
 800255c:	d100      	bne.n	8002560 <__aeabi_dsub+0x1e4>
 800255e:	e1c7      	b.n	80028f0 <__aeabi_dsub+0x574>
 8002560:	4661      	mov	r1, ip
 8002562:	1e4c      	subs	r4, r1, #1
 8002564:	2901      	cmp	r1, #1
 8002566:	d100      	bne.n	800256a <__aeabi_dsub+0x1ee>
 8002568:	e223      	b.n	80029b2 <__aeabi_dsub+0x636>
 800256a:	4d5e      	ldr	r5, [pc, #376]	; (80026e4 <__aeabi_dsub+0x368>)
 800256c:	45ac      	cmp	ip, r5
 800256e:	d100      	bne.n	8002572 <__aeabi_dsub+0x1f6>
 8002570:	e1d8      	b.n	8002924 <__aeabi_dsub+0x5a8>
 8002572:	46a4      	mov	ip, r4
 8002574:	e11a      	b.n	80027ac <__aeabi_dsub+0x430>
 8002576:	003a      	movs	r2, r7
 8002578:	4302      	orrs	r2, r0
 800257a:	d100      	bne.n	800257e <__aeabi_dsub+0x202>
 800257c:	e0e4      	b.n	8002748 <__aeabi_dsub+0x3cc>
 800257e:	0022      	movs	r2, r4
 8002580:	3a01      	subs	r2, #1
 8002582:	2c01      	cmp	r4, #1
 8002584:	d100      	bne.n	8002588 <__aeabi_dsub+0x20c>
 8002586:	e1c3      	b.n	8002910 <__aeabi_dsub+0x594>
 8002588:	4956      	ldr	r1, [pc, #344]	; (80026e4 <__aeabi_dsub+0x368>)
 800258a:	428c      	cmp	r4, r1
 800258c:	d100      	bne.n	8002590 <__aeabi_dsub+0x214>
 800258e:	e0b1      	b.n	80026f4 <__aeabi_dsub+0x378>
 8002590:	4694      	mov	ip, r2
 8002592:	e72b      	b.n	80023ec <__aeabi_dsub+0x70>
 8002594:	2401      	movs	r4, #1
 8002596:	4061      	eors	r1, r4
 8002598:	468b      	mov	fp, r1
 800259a:	428d      	cmp	r5, r1
 800259c:	d000      	beq.n	80025a0 <__aeabi_dsub+0x224>
 800259e:	e716      	b.n	80023ce <__aeabi_dsub+0x52>
 80025a0:	4952      	ldr	r1, [pc, #328]	; (80026ec <__aeabi_dsub+0x370>)
 80025a2:	468c      	mov	ip, r1
 80025a4:	44b4      	add	ip, r6
 80025a6:	4664      	mov	r4, ip
 80025a8:	2c00      	cmp	r4, #0
 80025aa:	d100      	bne.n	80025ae <__aeabi_dsub+0x232>
 80025ac:	e0d3      	b.n	8002756 <__aeabi_dsub+0x3da>
 80025ae:	1b91      	subs	r1, r2, r6
 80025b0:	468c      	mov	ip, r1
 80025b2:	2e00      	cmp	r6, #0
 80025b4:	d100      	bne.n	80025b8 <__aeabi_dsub+0x23c>
 80025b6:	e15e      	b.n	8002876 <__aeabi_dsub+0x4fa>
 80025b8:	494a      	ldr	r1, [pc, #296]	; (80026e4 <__aeabi_dsub+0x368>)
 80025ba:	428a      	cmp	r2, r1
 80025bc:	d100      	bne.n	80025c0 <__aeabi_dsub+0x244>
 80025be:	e1be      	b.n	800293e <__aeabi_dsub+0x5c2>
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	464c      	mov	r4, r9
 80025c4:	0409      	lsls	r1, r1, #16
 80025c6:	430c      	orrs	r4, r1
 80025c8:	46a1      	mov	r9, r4
 80025ca:	4661      	mov	r1, ip
 80025cc:	2938      	cmp	r1, #56	; 0x38
 80025ce:	dd00      	ble.n	80025d2 <__aeabi_dsub+0x256>
 80025d0:	e1ba      	b.n	8002948 <__aeabi_dsub+0x5cc>
 80025d2:	291f      	cmp	r1, #31
 80025d4:	dd00      	ble.n	80025d8 <__aeabi_dsub+0x25c>
 80025d6:	e227      	b.n	8002a28 <__aeabi_dsub+0x6ac>
 80025d8:	2420      	movs	r4, #32
 80025da:	1a64      	subs	r4, r4, r1
 80025dc:	4649      	mov	r1, r9
 80025de:	40a1      	lsls	r1, r4
 80025e0:	001e      	movs	r6, r3
 80025e2:	4688      	mov	r8, r1
 80025e4:	4661      	mov	r1, ip
 80025e6:	40a3      	lsls	r3, r4
 80025e8:	40ce      	lsrs	r6, r1
 80025ea:	4641      	mov	r1, r8
 80025ec:	1e5c      	subs	r4, r3, #1
 80025ee:	41a3      	sbcs	r3, r4
 80025f0:	4331      	orrs	r1, r6
 80025f2:	4319      	orrs	r1, r3
 80025f4:	000c      	movs	r4, r1
 80025f6:	4663      	mov	r3, ip
 80025f8:	4649      	mov	r1, r9
 80025fa:	40d9      	lsrs	r1, r3
 80025fc:	187f      	adds	r7, r7, r1
 80025fe:	1824      	adds	r4, r4, r0
 8002600:	4284      	cmp	r4, r0
 8002602:	419b      	sbcs	r3, r3
 8002604:	425b      	negs	r3, r3
 8002606:	469a      	mov	sl, r3
 8002608:	0016      	movs	r6, r2
 800260a:	44ba      	add	sl, r7
 800260c:	e05d      	b.n	80026ca <__aeabi_dsub+0x34e>
 800260e:	4c38      	ldr	r4, [pc, #224]	; (80026f0 <__aeabi_dsub+0x374>)
 8002610:	1c72      	adds	r2, r6, #1
 8002612:	4222      	tst	r2, r4
 8002614:	d000      	beq.n	8002618 <__aeabi_dsub+0x29c>
 8002616:	e0df      	b.n	80027d8 <__aeabi_dsub+0x45c>
 8002618:	464a      	mov	r2, r9
 800261a:	431a      	orrs	r2, r3
 800261c:	2e00      	cmp	r6, #0
 800261e:	d000      	beq.n	8002622 <__aeabi_dsub+0x2a6>
 8002620:	e15c      	b.n	80028dc <__aeabi_dsub+0x560>
 8002622:	2a00      	cmp	r2, #0
 8002624:	d100      	bne.n	8002628 <__aeabi_dsub+0x2ac>
 8002626:	e1cf      	b.n	80029c8 <__aeabi_dsub+0x64c>
 8002628:	003a      	movs	r2, r7
 800262a:	4302      	orrs	r2, r0
 800262c:	d100      	bne.n	8002630 <__aeabi_dsub+0x2b4>
 800262e:	e17f      	b.n	8002930 <__aeabi_dsub+0x5b4>
 8002630:	1a1c      	subs	r4, r3, r0
 8002632:	464a      	mov	r2, r9
 8002634:	42a3      	cmp	r3, r4
 8002636:	4189      	sbcs	r1, r1
 8002638:	1bd2      	subs	r2, r2, r7
 800263a:	4249      	negs	r1, r1
 800263c:	1a52      	subs	r2, r2, r1
 800263e:	4692      	mov	sl, r2
 8002640:	0212      	lsls	r2, r2, #8
 8002642:	d400      	bmi.n	8002646 <__aeabi_dsub+0x2ca>
 8002644:	e20a      	b.n	8002a5c <__aeabi_dsub+0x6e0>
 8002646:	1ac4      	subs	r4, r0, r3
 8002648:	42a0      	cmp	r0, r4
 800264a:	4180      	sbcs	r0, r0
 800264c:	464b      	mov	r3, r9
 800264e:	4240      	negs	r0, r0
 8002650:	1aff      	subs	r7, r7, r3
 8002652:	1a3b      	subs	r3, r7, r0
 8002654:	469a      	mov	sl, r3
 8002656:	465d      	mov	r5, fp
 8002658:	e71a      	b.n	8002490 <__aeabi_dsub+0x114>
 800265a:	003a      	movs	r2, r7
 800265c:	4302      	orrs	r2, r0
 800265e:	d073      	beq.n	8002748 <__aeabi_dsub+0x3cc>
 8002660:	0022      	movs	r2, r4
 8002662:	3a01      	subs	r2, #1
 8002664:	2c01      	cmp	r4, #1
 8002666:	d100      	bne.n	800266a <__aeabi_dsub+0x2ee>
 8002668:	e0cb      	b.n	8002802 <__aeabi_dsub+0x486>
 800266a:	4554      	cmp	r4, sl
 800266c:	d042      	beq.n	80026f4 <__aeabi_dsub+0x378>
 800266e:	4694      	mov	ip, r2
 8002670:	e748      	b.n	8002504 <__aeabi_dsub+0x188>
 8002672:	0010      	movs	r0, r2
 8002674:	3b1f      	subs	r3, #31
 8002676:	40d8      	lsrs	r0, r3
 8002678:	2920      	cmp	r1, #32
 800267a:	d003      	beq.n	8002684 <__aeabi_dsub+0x308>
 800267c:	2340      	movs	r3, #64	; 0x40
 800267e:	1a5b      	subs	r3, r3, r1
 8002680:	409a      	lsls	r2, r3
 8002682:	4314      	orrs	r4, r2
 8002684:	1e63      	subs	r3, r4, #1
 8002686:	419c      	sbcs	r4, r3
 8002688:	2300      	movs	r3, #0
 800268a:	2600      	movs	r6, #0
 800268c:	469a      	mov	sl, r3
 800268e:	4304      	orrs	r4, r0
 8002690:	0763      	lsls	r3, r4, #29
 8002692:	d000      	beq.n	8002696 <__aeabi_dsub+0x31a>
 8002694:	e6fe      	b.n	8002494 <__aeabi_dsub+0x118>
 8002696:	4652      	mov	r2, sl
 8002698:	08e3      	lsrs	r3, r4, #3
 800269a:	0752      	lsls	r2, r2, #29
 800269c:	4313      	orrs	r3, r2
 800269e:	4652      	mov	r2, sl
 80026a0:	46b4      	mov	ip, r6
 80026a2:	08d2      	lsrs	r2, r2, #3
 80026a4:	490f      	ldr	r1, [pc, #60]	; (80026e4 <__aeabi_dsub+0x368>)
 80026a6:	458c      	cmp	ip, r1
 80026a8:	d02a      	beq.n	8002700 <__aeabi_dsub+0x384>
 80026aa:	0312      	lsls	r2, r2, #12
 80026ac:	0b14      	lsrs	r4, r2, #12
 80026ae:	4662      	mov	r2, ip
 80026b0:	0552      	lsls	r2, r2, #21
 80026b2:	0d52      	lsrs	r2, r2, #21
 80026b4:	e70c      	b.n	80024d0 <__aeabi_dsub+0x154>
 80026b6:	003c      	movs	r4, r7
 80026b8:	4304      	orrs	r4, r0
 80026ba:	1e62      	subs	r2, r4, #1
 80026bc:	4194      	sbcs	r4, r2
 80026be:	18e4      	adds	r4, r4, r3
 80026c0:	429c      	cmp	r4, r3
 80026c2:	4192      	sbcs	r2, r2
 80026c4:	4252      	negs	r2, r2
 80026c6:	444a      	add	r2, r9
 80026c8:	4692      	mov	sl, r2
 80026ca:	4653      	mov	r3, sl
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	d5df      	bpl.n	8002690 <__aeabi_dsub+0x314>
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <__aeabi_dsub+0x368>)
 80026d2:	3601      	adds	r6, #1
 80026d4:	429e      	cmp	r6, r3
 80026d6:	d000      	beq.n	80026da <__aeabi_dsub+0x35e>
 80026d8:	e0a0      	b.n	800281c <__aeabi_dsub+0x4a0>
 80026da:	0032      	movs	r2, r6
 80026dc:	2400      	movs	r4, #0
 80026de:	2300      	movs	r3, #0
 80026e0:	e6f6      	b.n	80024d0 <__aeabi_dsub+0x154>
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	000007ff 	.word	0x000007ff
 80026e8:	ff7fffff 	.word	0xff7fffff
 80026ec:	fffff801 	.word	0xfffff801
 80026f0:	000007fe 	.word	0x000007fe
 80026f4:	08db      	lsrs	r3, r3, #3
 80026f6:	464a      	mov	r2, r9
 80026f8:	0752      	lsls	r2, r2, #29
 80026fa:	4313      	orrs	r3, r2
 80026fc:	464a      	mov	r2, r9
 80026fe:	08d2      	lsrs	r2, r2, #3
 8002700:	0019      	movs	r1, r3
 8002702:	4311      	orrs	r1, r2
 8002704:	d100      	bne.n	8002708 <__aeabi_dsub+0x38c>
 8002706:	e1b5      	b.n	8002a74 <__aeabi_dsub+0x6f8>
 8002708:	2480      	movs	r4, #128	; 0x80
 800270a:	0324      	lsls	r4, r4, #12
 800270c:	4314      	orrs	r4, r2
 800270e:	0324      	lsls	r4, r4, #12
 8002710:	4ad5      	ldr	r2, [pc, #852]	; (8002a68 <__aeabi_dsub+0x6ec>)
 8002712:	0b24      	lsrs	r4, r4, #12
 8002714:	e6dc      	b.n	80024d0 <__aeabi_dsub+0x154>
 8002716:	0020      	movs	r0, r4
 8002718:	f000 fa9e 	bl	8002c58 <__clzsi2>
 800271c:	0003      	movs	r3, r0
 800271e:	3318      	adds	r3, #24
 8002720:	2b1f      	cmp	r3, #31
 8002722:	dc00      	bgt.n	8002726 <__aeabi_dsub+0x3aa>
 8002724:	e695      	b.n	8002452 <__aeabi_dsub+0xd6>
 8002726:	0022      	movs	r2, r4
 8002728:	3808      	subs	r0, #8
 800272a:	4082      	lsls	r2, r0
 800272c:	2400      	movs	r4, #0
 800272e:	429e      	cmp	r6, r3
 8002730:	dc00      	bgt.n	8002734 <__aeabi_dsub+0x3b8>
 8002732:	e69a      	b.n	800246a <__aeabi_dsub+0xee>
 8002734:	1af6      	subs	r6, r6, r3
 8002736:	4bcd      	ldr	r3, [pc, #820]	; (8002a6c <__aeabi_dsub+0x6f0>)
 8002738:	401a      	ands	r2, r3
 800273a:	4692      	mov	sl, r2
 800273c:	e6a8      	b.n	8002490 <__aeabi_dsub+0x114>
 800273e:	003c      	movs	r4, r7
 8002740:	4304      	orrs	r4, r0
 8002742:	1e62      	subs	r2, r4, #1
 8002744:	4194      	sbcs	r4, r2
 8002746:	e66c      	b.n	8002422 <__aeabi_dsub+0xa6>
 8002748:	464a      	mov	r2, r9
 800274a:	08db      	lsrs	r3, r3, #3
 800274c:	0752      	lsls	r2, r2, #29
 800274e:	4313      	orrs	r3, r2
 8002750:	464a      	mov	r2, r9
 8002752:	08d2      	lsrs	r2, r2, #3
 8002754:	e7a6      	b.n	80026a4 <__aeabi_dsub+0x328>
 8002756:	4cc6      	ldr	r4, [pc, #792]	; (8002a70 <__aeabi_dsub+0x6f4>)
 8002758:	1c72      	adds	r2, r6, #1
 800275a:	4222      	tst	r2, r4
 800275c:	d000      	beq.n	8002760 <__aeabi_dsub+0x3e4>
 800275e:	e0ac      	b.n	80028ba <__aeabi_dsub+0x53e>
 8002760:	464a      	mov	r2, r9
 8002762:	431a      	orrs	r2, r3
 8002764:	2e00      	cmp	r6, #0
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x3ee>
 8002768:	e105      	b.n	8002976 <__aeabi_dsub+0x5fa>
 800276a:	2a00      	cmp	r2, #0
 800276c:	d100      	bne.n	8002770 <__aeabi_dsub+0x3f4>
 800276e:	e156      	b.n	8002a1e <__aeabi_dsub+0x6a2>
 8002770:	003a      	movs	r2, r7
 8002772:	4302      	orrs	r2, r0
 8002774:	d100      	bne.n	8002778 <__aeabi_dsub+0x3fc>
 8002776:	e0db      	b.n	8002930 <__aeabi_dsub+0x5b4>
 8002778:	181c      	adds	r4, r3, r0
 800277a:	429c      	cmp	r4, r3
 800277c:	419b      	sbcs	r3, r3
 800277e:	444f      	add	r7, r9
 8002780:	46ba      	mov	sl, r7
 8002782:	425b      	negs	r3, r3
 8002784:	449a      	add	sl, r3
 8002786:	4653      	mov	r3, sl
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	d400      	bmi.n	800278e <__aeabi_dsub+0x412>
 800278c:	e780      	b.n	8002690 <__aeabi_dsub+0x314>
 800278e:	4652      	mov	r2, sl
 8002790:	4bb6      	ldr	r3, [pc, #728]	; (8002a6c <__aeabi_dsub+0x6f0>)
 8002792:	2601      	movs	r6, #1
 8002794:	401a      	ands	r2, r3
 8002796:	4692      	mov	sl, r2
 8002798:	e77a      	b.n	8002690 <__aeabi_dsub+0x314>
 800279a:	4cb3      	ldr	r4, [pc, #716]	; (8002a68 <__aeabi_dsub+0x6ec>)
 800279c:	42a2      	cmp	r2, r4
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x426>
 80027a0:	e0c0      	b.n	8002924 <__aeabi_dsub+0x5a8>
 80027a2:	2480      	movs	r4, #128	; 0x80
 80027a4:	464d      	mov	r5, r9
 80027a6:	0424      	lsls	r4, r4, #16
 80027a8:	4325      	orrs	r5, r4
 80027aa:	46a9      	mov	r9, r5
 80027ac:	4664      	mov	r4, ip
 80027ae:	2c38      	cmp	r4, #56	; 0x38
 80027b0:	dc53      	bgt.n	800285a <__aeabi_dsub+0x4de>
 80027b2:	4661      	mov	r1, ip
 80027b4:	2c1f      	cmp	r4, #31
 80027b6:	dd00      	ble.n	80027ba <__aeabi_dsub+0x43e>
 80027b8:	e0cd      	b.n	8002956 <__aeabi_dsub+0x5da>
 80027ba:	2520      	movs	r5, #32
 80027bc:	001e      	movs	r6, r3
 80027be:	1b2d      	subs	r5, r5, r4
 80027c0:	464c      	mov	r4, r9
 80027c2:	40ab      	lsls	r3, r5
 80027c4:	40ac      	lsls	r4, r5
 80027c6:	40ce      	lsrs	r6, r1
 80027c8:	1e5d      	subs	r5, r3, #1
 80027ca:	41ab      	sbcs	r3, r5
 80027cc:	4334      	orrs	r4, r6
 80027ce:	4323      	orrs	r3, r4
 80027d0:	464c      	mov	r4, r9
 80027d2:	40cc      	lsrs	r4, r1
 80027d4:	1b3f      	subs	r7, r7, r4
 80027d6:	e045      	b.n	8002864 <__aeabi_dsub+0x4e8>
 80027d8:	464a      	mov	r2, r9
 80027da:	1a1c      	subs	r4, r3, r0
 80027dc:	1bd1      	subs	r1, r2, r7
 80027de:	42a3      	cmp	r3, r4
 80027e0:	4192      	sbcs	r2, r2
 80027e2:	4252      	negs	r2, r2
 80027e4:	4692      	mov	sl, r2
 80027e6:	000a      	movs	r2, r1
 80027e8:	4651      	mov	r1, sl
 80027ea:	1a52      	subs	r2, r2, r1
 80027ec:	4692      	mov	sl, r2
 80027ee:	0212      	lsls	r2, r2, #8
 80027f0:	d500      	bpl.n	80027f4 <__aeabi_dsub+0x478>
 80027f2:	e083      	b.n	80028fc <__aeabi_dsub+0x580>
 80027f4:	4653      	mov	r3, sl
 80027f6:	4323      	orrs	r3, r4
 80027f8:	d000      	beq.n	80027fc <__aeabi_dsub+0x480>
 80027fa:	e621      	b.n	8002440 <__aeabi_dsub+0xc4>
 80027fc:	2200      	movs	r2, #0
 80027fe:	2500      	movs	r5, #0
 8002800:	e753      	b.n	80026aa <__aeabi_dsub+0x32e>
 8002802:	181c      	adds	r4, r3, r0
 8002804:	429c      	cmp	r4, r3
 8002806:	419b      	sbcs	r3, r3
 8002808:	444f      	add	r7, r9
 800280a:	46ba      	mov	sl, r7
 800280c:	425b      	negs	r3, r3
 800280e:	449a      	add	sl, r3
 8002810:	4653      	mov	r3, sl
 8002812:	2601      	movs	r6, #1
 8002814:	021b      	lsls	r3, r3, #8
 8002816:	d400      	bmi.n	800281a <__aeabi_dsub+0x49e>
 8002818:	e73a      	b.n	8002690 <__aeabi_dsub+0x314>
 800281a:	2602      	movs	r6, #2
 800281c:	4652      	mov	r2, sl
 800281e:	4b93      	ldr	r3, [pc, #588]	; (8002a6c <__aeabi_dsub+0x6f0>)
 8002820:	2101      	movs	r1, #1
 8002822:	401a      	ands	r2, r3
 8002824:	0013      	movs	r3, r2
 8002826:	4021      	ands	r1, r4
 8002828:	0862      	lsrs	r2, r4, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	07dc      	lsls	r4, r3, #31
 800282e:	085b      	lsrs	r3, r3, #1
 8002830:	469a      	mov	sl, r3
 8002832:	4314      	orrs	r4, r2
 8002834:	e62c      	b.n	8002490 <__aeabi_dsub+0x114>
 8002836:	0039      	movs	r1, r7
 8002838:	3a20      	subs	r2, #32
 800283a:	40d1      	lsrs	r1, r2
 800283c:	4662      	mov	r2, ip
 800283e:	2a20      	cmp	r2, #32
 8002840:	d006      	beq.n	8002850 <__aeabi_dsub+0x4d4>
 8002842:	4664      	mov	r4, ip
 8002844:	2240      	movs	r2, #64	; 0x40
 8002846:	1b12      	subs	r2, r2, r4
 8002848:	003c      	movs	r4, r7
 800284a:	4094      	lsls	r4, r2
 800284c:	4304      	orrs	r4, r0
 800284e:	9401      	str	r4, [sp, #4]
 8002850:	9c01      	ldr	r4, [sp, #4]
 8002852:	1e62      	subs	r2, r4, #1
 8002854:	4194      	sbcs	r4, r2
 8002856:	430c      	orrs	r4, r1
 8002858:	e5e3      	b.n	8002422 <__aeabi_dsub+0xa6>
 800285a:	4649      	mov	r1, r9
 800285c:	4319      	orrs	r1, r3
 800285e:	000b      	movs	r3, r1
 8002860:	1e5c      	subs	r4, r3, #1
 8002862:	41a3      	sbcs	r3, r4
 8002864:	1ac4      	subs	r4, r0, r3
 8002866:	42a0      	cmp	r0, r4
 8002868:	419b      	sbcs	r3, r3
 800286a:	425b      	negs	r3, r3
 800286c:	1afb      	subs	r3, r7, r3
 800286e:	469a      	mov	sl, r3
 8002870:	465d      	mov	r5, fp
 8002872:	0016      	movs	r6, r2
 8002874:	e5dc      	b.n	8002430 <__aeabi_dsub+0xb4>
 8002876:	4649      	mov	r1, r9
 8002878:	4319      	orrs	r1, r3
 800287a:	d100      	bne.n	800287e <__aeabi_dsub+0x502>
 800287c:	e0ae      	b.n	80029dc <__aeabi_dsub+0x660>
 800287e:	4661      	mov	r1, ip
 8002880:	4664      	mov	r4, ip
 8002882:	3901      	subs	r1, #1
 8002884:	2c01      	cmp	r4, #1
 8002886:	d100      	bne.n	800288a <__aeabi_dsub+0x50e>
 8002888:	e0e0      	b.n	8002a4c <__aeabi_dsub+0x6d0>
 800288a:	4c77      	ldr	r4, [pc, #476]	; (8002a68 <__aeabi_dsub+0x6ec>)
 800288c:	45a4      	cmp	ip, r4
 800288e:	d056      	beq.n	800293e <__aeabi_dsub+0x5c2>
 8002890:	468c      	mov	ip, r1
 8002892:	e69a      	b.n	80025ca <__aeabi_dsub+0x24e>
 8002894:	4661      	mov	r1, ip
 8002896:	2220      	movs	r2, #32
 8002898:	003c      	movs	r4, r7
 800289a:	1a52      	subs	r2, r2, r1
 800289c:	4094      	lsls	r4, r2
 800289e:	0001      	movs	r1, r0
 80028a0:	4090      	lsls	r0, r2
 80028a2:	46a0      	mov	r8, r4
 80028a4:	4664      	mov	r4, ip
 80028a6:	1e42      	subs	r2, r0, #1
 80028a8:	4190      	sbcs	r0, r2
 80028aa:	4662      	mov	r2, ip
 80028ac:	40e1      	lsrs	r1, r4
 80028ae:	4644      	mov	r4, r8
 80028b0:	40d7      	lsrs	r7, r2
 80028b2:	430c      	orrs	r4, r1
 80028b4:	4304      	orrs	r4, r0
 80028b6:	44b9      	add	r9, r7
 80028b8:	e701      	b.n	80026be <__aeabi_dsub+0x342>
 80028ba:	496b      	ldr	r1, [pc, #428]	; (8002a68 <__aeabi_dsub+0x6ec>)
 80028bc:	428a      	cmp	r2, r1
 80028be:	d100      	bne.n	80028c2 <__aeabi_dsub+0x546>
 80028c0:	e70c      	b.n	80026dc <__aeabi_dsub+0x360>
 80028c2:	1818      	adds	r0, r3, r0
 80028c4:	4298      	cmp	r0, r3
 80028c6:	419b      	sbcs	r3, r3
 80028c8:	444f      	add	r7, r9
 80028ca:	425b      	negs	r3, r3
 80028cc:	18fb      	adds	r3, r7, r3
 80028ce:	07dc      	lsls	r4, r3, #31
 80028d0:	0840      	lsrs	r0, r0, #1
 80028d2:	085b      	lsrs	r3, r3, #1
 80028d4:	469a      	mov	sl, r3
 80028d6:	0016      	movs	r6, r2
 80028d8:	4304      	orrs	r4, r0
 80028da:	e6d9      	b.n	8002690 <__aeabi_dsub+0x314>
 80028dc:	2a00      	cmp	r2, #0
 80028de:	d000      	beq.n	80028e2 <__aeabi_dsub+0x566>
 80028e0:	e081      	b.n	80029e6 <__aeabi_dsub+0x66a>
 80028e2:	003b      	movs	r3, r7
 80028e4:	4303      	orrs	r3, r0
 80028e6:	d11d      	bne.n	8002924 <__aeabi_dsub+0x5a8>
 80028e8:	2280      	movs	r2, #128	; 0x80
 80028ea:	2500      	movs	r5, #0
 80028ec:	0312      	lsls	r2, r2, #12
 80028ee:	e70b      	b.n	8002708 <__aeabi_dsub+0x38c>
 80028f0:	08c0      	lsrs	r0, r0, #3
 80028f2:	077b      	lsls	r3, r7, #29
 80028f4:	465d      	mov	r5, fp
 80028f6:	4303      	orrs	r3, r0
 80028f8:	08fa      	lsrs	r2, r7, #3
 80028fa:	e6d3      	b.n	80026a4 <__aeabi_dsub+0x328>
 80028fc:	1ac4      	subs	r4, r0, r3
 80028fe:	42a0      	cmp	r0, r4
 8002900:	4180      	sbcs	r0, r0
 8002902:	464b      	mov	r3, r9
 8002904:	4240      	negs	r0, r0
 8002906:	1aff      	subs	r7, r7, r3
 8002908:	1a3b      	subs	r3, r7, r0
 800290a:	469a      	mov	sl, r3
 800290c:	465d      	mov	r5, fp
 800290e:	e597      	b.n	8002440 <__aeabi_dsub+0xc4>
 8002910:	1a1c      	subs	r4, r3, r0
 8002912:	464a      	mov	r2, r9
 8002914:	42a3      	cmp	r3, r4
 8002916:	419b      	sbcs	r3, r3
 8002918:	1bd7      	subs	r7, r2, r7
 800291a:	425b      	negs	r3, r3
 800291c:	1afb      	subs	r3, r7, r3
 800291e:	469a      	mov	sl, r3
 8002920:	2601      	movs	r6, #1
 8002922:	e585      	b.n	8002430 <__aeabi_dsub+0xb4>
 8002924:	08c0      	lsrs	r0, r0, #3
 8002926:	077b      	lsls	r3, r7, #29
 8002928:	465d      	mov	r5, fp
 800292a:	4303      	orrs	r3, r0
 800292c:	08fa      	lsrs	r2, r7, #3
 800292e:	e6e7      	b.n	8002700 <__aeabi_dsub+0x384>
 8002930:	464a      	mov	r2, r9
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	0752      	lsls	r2, r2, #29
 8002936:	4313      	orrs	r3, r2
 8002938:	464a      	mov	r2, r9
 800293a:	08d2      	lsrs	r2, r2, #3
 800293c:	e6b5      	b.n	80026aa <__aeabi_dsub+0x32e>
 800293e:	08c0      	lsrs	r0, r0, #3
 8002940:	077b      	lsls	r3, r7, #29
 8002942:	4303      	orrs	r3, r0
 8002944:	08fa      	lsrs	r2, r7, #3
 8002946:	e6db      	b.n	8002700 <__aeabi_dsub+0x384>
 8002948:	4649      	mov	r1, r9
 800294a:	4319      	orrs	r1, r3
 800294c:	000b      	movs	r3, r1
 800294e:	1e59      	subs	r1, r3, #1
 8002950:	418b      	sbcs	r3, r1
 8002952:	001c      	movs	r4, r3
 8002954:	e653      	b.n	80025fe <__aeabi_dsub+0x282>
 8002956:	464d      	mov	r5, r9
 8002958:	3c20      	subs	r4, #32
 800295a:	40e5      	lsrs	r5, r4
 800295c:	2920      	cmp	r1, #32
 800295e:	d005      	beq.n	800296c <__aeabi_dsub+0x5f0>
 8002960:	2440      	movs	r4, #64	; 0x40
 8002962:	1a64      	subs	r4, r4, r1
 8002964:	4649      	mov	r1, r9
 8002966:	40a1      	lsls	r1, r4
 8002968:	430b      	orrs	r3, r1
 800296a:	4698      	mov	r8, r3
 800296c:	4643      	mov	r3, r8
 800296e:	1e5c      	subs	r4, r3, #1
 8002970:	41a3      	sbcs	r3, r4
 8002972:	432b      	orrs	r3, r5
 8002974:	e776      	b.n	8002864 <__aeabi_dsub+0x4e8>
 8002976:	2a00      	cmp	r2, #0
 8002978:	d0e1      	beq.n	800293e <__aeabi_dsub+0x5c2>
 800297a:	003a      	movs	r2, r7
 800297c:	08db      	lsrs	r3, r3, #3
 800297e:	4302      	orrs	r2, r0
 8002980:	d100      	bne.n	8002984 <__aeabi_dsub+0x608>
 8002982:	e6b8      	b.n	80026f6 <__aeabi_dsub+0x37a>
 8002984:	464a      	mov	r2, r9
 8002986:	0752      	lsls	r2, r2, #29
 8002988:	2480      	movs	r4, #128	; 0x80
 800298a:	4313      	orrs	r3, r2
 800298c:	464a      	mov	r2, r9
 800298e:	0324      	lsls	r4, r4, #12
 8002990:	08d2      	lsrs	r2, r2, #3
 8002992:	4222      	tst	r2, r4
 8002994:	d007      	beq.n	80029a6 <__aeabi_dsub+0x62a>
 8002996:	08fe      	lsrs	r6, r7, #3
 8002998:	4226      	tst	r6, r4
 800299a:	d104      	bne.n	80029a6 <__aeabi_dsub+0x62a>
 800299c:	465d      	mov	r5, fp
 800299e:	0032      	movs	r2, r6
 80029a0:	08c3      	lsrs	r3, r0, #3
 80029a2:	077f      	lsls	r7, r7, #29
 80029a4:	433b      	orrs	r3, r7
 80029a6:	0f59      	lsrs	r1, r3, #29
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	0749      	lsls	r1, r1, #29
 80029ac:	08db      	lsrs	r3, r3, #3
 80029ae:	430b      	orrs	r3, r1
 80029b0:	e6a6      	b.n	8002700 <__aeabi_dsub+0x384>
 80029b2:	1ac4      	subs	r4, r0, r3
 80029b4:	42a0      	cmp	r0, r4
 80029b6:	4180      	sbcs	r0, r0
 80029b8:	464b      	mov	r3, r9
 80029ba:	4240      	negs	r0, r0
 80029bc:	1aff      	subs	r7, r7, r3
 80029be:	1a3b      	subs	r3, r7, r0
 80029c0:	469a      	mov	sl, r3
 80029c2:	465d      	mov	r5, fp
 80029c4:	2601      	movs	r6, #1
 80029c6:	e533      	b.n	8002430 <__aeabi_dsub+0xb4>
 80029c8:	003b      	movs	r3, r7
 80029ca:	4303      	orrs	r3, r0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x654>
 80029ce:	e715      	b.n	80027fc <__aeabi_dsub+0x480>
 80029d0:	08c0      	lsrs	r0, r0, #3
 80029d2:	077b      	lsls	r3, r7, #29
 80029d4:	465d      	mov	r5, fp
 80029d6:	4303      	orrs	r3, r0
 80029d8:	08fa      	lsrs	r2, r7, #3
 80029da:	e666      	b.n	80026aa <__aeabi_dsub+0x32e>
 80029dc:	08c0      	lsrs	r0, r0, #3
 80029de:	077b      	lsls	r3, r7, #29
 80029e0:	4303      	orrs	r3, r0
 80029e2:	08fa      	lsrs	r2, r7, #3
 80029e4:	e65e      	b.n	80026a4 <__aeabi_dsub+0x328>
 80029e6:	003a      	movs	r2, r7
 80029e8:	08db      	lsrs	r3, r3, #3
 80029ea:	4302      	orrs	r2, r0
 80029ec:	d100      	bne.n	80029f0 <__aeabi_dsub+0x674>
 80029ee:	e682      	b.n	80026f6 <__aeabi_dsub+0x37a>
 80029f0:	464a      	mov	r2, r9
 80029f2:	0752      	lsls	r2, r2, #29
 80029f4:	2480      	movs	r4, #128	; 0x80
 80029f6:	4313      	orrs	r3, r2
 80029f8:	464a      	mov	r2, r9
 80029fa:	0324      	lsls	r4, r4, #12
 80029fc:	08d2      	lsrs	r2, r2, #3
 80029fe:	4222      	tst	r2, r4
 8002a00:	d007      	beq.n	8002a12 <__aeabi_dsub+0x696>
 8002a02:	08fe      	lsrs	r6, r7, #3
 8002a04:	4226      	tst	r6, r4
 8002a06:	d104      	bne.n	8002a12 <__aeabi_dsub+0x696>
 8002a08:	465d      	mov	r5, fp
 8002a0a:	0032      	movs	r2, r6
 8002a0c:	08c3      	lsrs	r3, r0, #3
 8002a0e:	077f      	lsls	r7, r7, #29
 8002a10:	433b      	orrs	r3, r7
 8002a12:	0f59      	lsrs	r1, r3, #29
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	08db      	lsrs	r3, r3, #3
 8002a18:	0749      	lsls	r1, r1, #29
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	e670      	b.n	8002700 <__aeabi_dsub+0x384>
 8002a1e:	08c0      	lsrs	r0, r0, #3
 8002a20:	077b      	lsls	r3, r7, #29
 8002a22:	4303      	orrs	r3, r0
 8002a24:	08fa      	lsrs	r2, r7, #3
 8002a26:	e640      	b.n	80026aa <__aeabi_dsub+0x32e>
 8002a28:	464c      	mov	r4, r9
 8002a2a:	3920      	subs	r1, #32
 8002a2c:	40cc      	lsrs	r4, r1
 8002a2e:	4661      	mov	r1, ip
 8002a30:	2920      	cmp	r1, #32
 8002a32:	d006      	beq.n	8002a42 <__aeabi_dsub+0x6c6>
 8002a34:	4666      	mov	r6, ip
 8002a36:	2140      	movs	r1, #64	; 0x40
 8002a38:	1b89      	subs	r1, r1, r6
 8002a3a:	464e      	mov	r6, r9
 8002a3c:	408e      	lsls	r6, r1
 8002a3e:	4333      	orrs	r3, r6
 8002a40:	4698      	mov	r8, r3
 8002a42:	4643      	mov	r3, r8
 8002a44:	1e59      	subs	r1, r3, #1
 8002a46:	418b      	sbcs	r3, r1
 8002a48:	431c      	orrs	r4, r3
 8002a4a:	e5d8      	b.n	80025fe <__aeabi_dsub+0x282>
 8002a4c:	181c      	adds	r4, r3, r0
 8002a4e:	4284      	cmp	r4, r0
 8002a50:	4180      	sbcs	r0, r0
 8002a52:	444f      	add	r7, r9
 8002a54:	46ba      	mov	sl, r7
 8002a56:	4240      	negs	r0, r0
 8002a58:	4482      	add	sl, r0
 8002a5a:	e6d9      	b.n	8002810 <__aeabi_dsub+0x494>
 8002a5c:	4653      	mov	r3, sl
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	d100      	bne.n	8002a64 <__aeabi_dsub+0x6e8>
 8002a62:	e6cb      	b.n	80027fc <__aeabi_dsub+0x480>
 8002a64:	e614      	b.n	8002690 <__aeabi_dsub+0x314>
 8002a66:	46c0      	nop			; (mov r8, r8)
 8002a68:	000007ff 	.word	0x000007ff
 8002a6c:	ff7fffff 	.word	0xff7fffff
 8002a70:	000007fe 	.word	0x000007fe
 8002a74:	2300      	movs	r3, #0
 8002a76:	4a01      	ldr	r2, [pc, #4]	; (8002a7c <__aeabi_dsub+0x700>)
 8002a78:	001c      	movs	r4, r3
 8002a7a:	e529      	b.n	80024d0 <__aeabi_dsub+0x154>
 8002a7c:	000007ff 	.word	0x000007ff

08002a80 <__aeabi_dcmpun>:
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	0005      	movs	r5, r0
 8002a84:	480c      	ldr	r0, [pc, #48]	; (8002ab8 <__aeabi_dcmpun+0x38>)
 8002a86:	031c      	lsls	r4, r3, #12
 8002a88:	0016      	movs	r6, r2
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	030a      	lsls	r2, r1, #12
 8002a8e:	0049      	lsls	r1, r1, #1
 8002a90:	0b12      	lsrs	r2, r2, #12
 8002a92:	0d49      	lsrs	r1, r1, #21
 8002a94:	0b24      	lsrs	r4, r4, #12
 8002a96:	0d5b      	lsrs	r3, r3, #21
 8002a98:	4281      	cmp	r1, r0
 8002a9a:	d008      	beq.n	8002aae <__aeabi_dcmpun+0x2e>
 8002a9c:	4a06      	ldr	r2, [pc, #24]	; (8002ab8 <__aeabi_dcmpun+0x38>)
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d103      	bne.n	8002aac <__aeabi_dcmpun+0x2c>
 8002aa4:	0020      	movs	r0, r4
 8002aa6:	4330      	orrs	r0, r6
 8002aa8:	1e43      	subs	r3, r0, #1
 8002aaa:	4198      	sbcs	r0, r3
 8002aac:	bd70      	pop	{r4, r5, r6, pc}
 8002aae:	2001      	movs	r0, #1
 8002ab0:	432a      	orrs	r2, r5
 8002ab2:	d1fb      	bne.n	8002aac <__aeabi_dcmpun+0x2c>
 8002ab4:	e7f2      	b.n	8002a9c <__aeabi_dcmpun+0x1c>
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	000007ff 	.word	0x000007ff

08002abc <__aeabi_f2d>:
 8002abc:	b570      	push	{r4, r5, r6, lr}
 8002abe:	0242      	lsls	r2, r0, #9
 8002ac0:	0043      	lsls	r3, r0, #1
 8002ac2:	0fc4      	lsrs	r4, r0, #31
 8002ac4:	20fe      	movs	r0, #254	; 0xfe
 8002ac6:	0e1b      	lsrs	r3, r3, #24
 8002ac8:	1c59      	adds	r1, r3, #1
 8002aca:	0a55      	lsrs	r5, r2, #9
 8002acc:	4208      	tst	r0, r1
 8002ace:	d00c      	beq.n	8002aea <__aeabi_f2d+0x2e>
 8002ad0:	21e0      	movs	r1, #224	; 0xe0
 8002ad2:	0089      	lsls	r1, r1, #2
 8002ad4:	468c      	mov	ip, r1
 8002ad6:	076d      	lsls	r5, r5, #29
 8002ad8:	0b12      	lsrs	r2, r2, #12
 8002ada:	4463      	add	r3, ip
 8002adc:	051b      	lsls	r3, r3, #20
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	07e4      	lsls	r4, r4, #31
 8002ae2:	4323      	orrs	r3, r4
 8002ae4:	0028      	movs	r0, r5
 8002ae6:	0019      	movs	r1, r3
 8002ae8:	bd70      	pop	{r4, r5, r6, pc}
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d114      	bne.n	8002b18 <__aeabi_f2d+0x5c>
 8002aee:	2d00      	cmp	r5, #0
 8002af0:	d01b      	beq.n	8002b2a <__aeabi_f2d+0x6e>
 8002af2:	0028      	movs	r0, r5
 8002af4:	f000 f8b0 	bl	8002c58 <__clzsi2>
 8002af8:	280a      	cmp	r0, #10
 8002afa:	dc1c      	bgt.n	8002b36 <__aeabi_f2d+0x7a>
 8002afc:	230b      	movs	r3, #11
 8002afe:	002a      	movs	r2, r5
 8002b00:	1a1b      	subs	r3, r3, r0
 8002b02:	40da      	lsrs	r2, r3
 8002b04:	0003      	movs	r3, r0
 8002b06:	3315      	adds	r3, #21
 8002b08:	409d      	lsls	r5, r3
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	; (8002b44 <__aeabi_f2d+0x88>)
 8002b0c:	0312      	lsls	r2, r2, #12
 8002b0e:	1a1b      	subs	r3, r3, r0
 8002b10:	055b      	lsls	r3, r3, #21
 8002b12:	0b12      	lsrs	r2, r2, #12
 8002b14:	0d5b      	lsrs	r3, r3, #21
 8002b16:	e7e1      	b.n	8002adc <__aeabi_f2d+0x20>
 8002b18:	2d00      	cmp	r5, #0
 8002b1a:	d009      	beq.n	8002b30 <__aeabi_f2d+0x74>
 8002b1c:	0b13      	lsrs	r3, r2, #12
 8002b1e:	2280      	movs	r2, #128	; 0x80
 8002b20:	0312      	lsls	r2, r2, #12
 8002b22:	431a      	orrs	r2, r3
 8002b24:	076d      	lsls	r5, r5, #29
 8002b26:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <__aeabi_f2d+0x8c>)
 8002b28:	e7d8      	b.n	8002adc <__aeabi_f2d+0x20>
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	e7d5      	b.n	8002adc <__aeabi_f2d+0x20>
 8002b30:	2200      	movs	r2, #0
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <__aeabi_f2d+0x8c>)
 8002b34:	e7d2      	b.n	8002adc <__aeabi_f2d+0x20>
 8002b36:	0003      	movs	r3, r0
 8002b38:	002a      	movs	r2, r5
 8002b3a:	3b0b      	subs	r3, #11
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	2500      	movs	r5, #0
 8002b40:	e7e3      	b.n	8002b0a <__aeabi_f2d+0x4e>
 8002b42:	46c0      	nop			; (mov r8, r8)
 8002b44:	00000389 	.word	0x00000389
 8002b48:	000007ff 	.word	0x000007ff

08002b4c <__aeabi_d2f>:
 8002b4c:	0002      	movs	r2, r0
 8002b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b50:	004b      	lsls	r3, r1, #1
 8002b52:	030d      	lsls	r5, r1, #12
 8002b54:	0f40      	lsrs	r0, r0, #29
 8002b56:	0d5b      	lsrs	r3, r3, #21
 8002b58:	0fcc      	lsrs	r4, r1, #31
 8002b5a:	0a6d      	lsrs	r5, r5, #9
 8002b5c:	493a      	ldr	r1, [pc, #232]	; (8002c48 <__aeabi_d2f+0xfc>)
 8002b5e:	4305      	orrs	r5, r0
 8002b60:	1c58      	adds	r0, r3, #1
 8002b62:	00d7      	lsls	r7, r2, #3
 8002b64:	4208      	tst	r0, r1
 8002b66:	d00a      	beq.n	8002b7e <__aeabi_d2f+0x32>
 8002b68:	4938      	ldr	r1, [pc, #224]	; (8002c4c <__aeabi_d2f+0x100>)
 8002b6a:	1859      	adds	r1, r3, r1
 8002b6c:	29fe      	cmp	r1, #254	; 0xfe
 8002b6e:	dd16      	ble.n	8002b9e <__aeabi_d2f+0x52>
 8002b70:	20ff      	movs	r0, #255	; 0xff
 8002b72:	2200      	movs	r2, #0
 8002b74:	05c0      	lsls	r0, r0, #23
 8002b76:	4310      	orrs	r0, r2
 8002b78:	07e4      	lsls	r4, r4, #31
 8002b7a:	4320      	orrs	r0, r4
 8002b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <__aeabi_d2f+0x44>
 8002b82:	433d      	orrs	r5, r7
 8002b84:	d026      	beq.n	8002bd4 <__aeabi_d2f+0x88>
 8002b86:	2205      	movs	r2, #5
 8002b88:	0192      	lsls	r2, r2, #6
 8002b8a:	0a52      	lsrs	r2, r2, #9
 8002b8c:	b2d8      	uxtb	r0, r3
 8002b8e:	e7f1      	b.n	8002b74 <__aeabi_d2f+0x28>
 8002b90:	432f      	orrs	r7, r5
 8002b92:	d0ed      	beq.n	8002b70 <__aeabi_d2f+0x24>
 8002b94:	2280      	movs	r2, #128	; 0x80
 8002b96:	03d2      	lsls	r2, r2, #15
 8002b98:	20ff      	movs	r0, #255	; 0xff
 8002b9a:	432a      	orrs	r2, r5
 8002b9c:	e7ea      	b.n	8002b74 <__aeabi_d2f+0x28>
 8002b9e:	2900      	cmp	r1, #0
 8002ba0:	dd1b      	ble.n	8002bda <__aeabi_d2f+0x8e>
 8002ba2:	0192      	lsls	r2, r2, #6
 8002ba4:	1e50      	subs	r0, r2, #1
 8002ba6:	4182      	sbcs	r2, r0
 8002ba8:	00ed      	lsls	r5, r5, #3
 8002baa:	0f7f      	lsrs	r7, r7, #29
 8002bac:	432a      	orrs	r2, r5
 8002bae:	433a      	orrs	r2, r7
 8002bb0:	0753      	lsls	r3, r2, #29
 8002bb2:	d047      	beq.n	8002c44 <__aeabi_d2f+0xf8>
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d000      	beq.n	8002bbe <__aeabi_d2f+0x72>
 8002bbc:	3204      	adds	r2, #4
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	04db      	lsls	r3, r3, #19
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	d03e      	beq.n	8002c44 <__aeabi_d2f+0xf8>
 8002bc6:	1c48      	adds	r0, r1, #1
 8002bc8:	29fe      	cmp	r1, #254	; 0xfe
 8002bca:	d0d1      	beq.n	8002b70 <__aeabi_d2f+0x24>
 8002bcc:	0192      	lsls	r2, r2, #6
 8002bce:	0a52      	lsrs	r2, r2, #9
 8002bd0:	b2c0      	uxtb	r0, r0
 8002bd2:	e7cf      	b.n	8002b74 <__aeabi_d2f+0x28>
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	e7cc      	b.n	8002b74 <__aeabi_d2f+0x28>
 8002bda:	000a      	movs	r2, r1
 8002bdc:	3217      	adds	r2, #23
 8002bde:	db2f      	blt.n	8002c40 <__aeabi_d2f+0xf4>
 8002be0:	2680      	movs	r6, #128	; 0x80
 8002be2:	0436      	lsls	r6, r6, #16
 8002be4:	432e      	orrs	r6, r5
 8002be6:	251e      	movs	r5, #30
 8002be8:	1a6d      	subs	r5, r5, r1
 8002bea:	2d1f      	cmp	r5, #31
 8002bec:	dd11      	ble.n	8002c12 <__aeabi_d2f+0xc6>
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4252      	negs	r2, r2
 8002bf2:	1a52      	subs	r2, r2, r1
 8002bf4:	0031      	movs	r1, r6
 8002bf6:	40d1      	lsrs	r1, r2
 8002bf8:	2d20      	cmp	r5, #32
 8002bfa:	d004      	beq.n	8002c06 <__aeabi_d2f+0xba>
 8002bfc:	4a14      	ldr	r2, [pc, #80]	; (8002c50 <__aeabi_d2f+0x104>)
 8002bfe:	4694      	mov	ip, r2
 8002c00:	4463      	add	r3, ip
 8002c02:	409e      	lsls	r6, r3
 8002c04:	4337      	orrs	r7, r6
 8002c06:	003a      	movs	r2, r7
 8002c08:	1e53      	subs	r3, r2, #1
 8002c0a:	419a      	sbcs	r2, r3
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	2100      	movs	r1, #0
 8002c10:	e7ce      	b.n	8002bb0 <__aeabi_d2f+0x64>
 8002c12:	4a10      	ldr	r2, [pc, #64]	; (8002c54 <__aeabi_d2f+0x108>)
 8002c14:	0038      	movs	r0, r7
 8002c16:	4694      	mov	ip, r2
 8002c18:	4463      	add	r3, ip
 8002c1a:	4098      	lsls	r0, r3
 8002c1c:	003a      	movs	r2, r7
 8002c1e:	1e41      	subs	r1, r0, #1
 8002c20:	4188      	sbcs	r0, r1
 8002c22:	409e      	lsls	r6, r3
 8002c24:	40ea      	lsrs	r2, r5
 8002c26:	4330      	orrs	r0, r6
 8002c28:	4302      	orrs	r2, r0
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	0753      	lsls	r3, r2, #29
 8002c2e:	d1c1      	bne.n	8002bb4 <__aeabi_d2f+0x68>
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0013      	movs	r3, r2
 8002c34:	04c9      	lsls	r1, r1, #19
 8002c36:	2001      	movs	r0, #1
 8002c38:	400b      	ands	r3, r1
 8002c3a:	420a      	tst	r2, r1
 8002c3c:	d1c6      	bne.n	8002bcc <__aeabi_d2f+0x80>
 8002c3e:	e7a3      	b.n	8002b88 <__aeabi_d2f+0x3c>
 8002c40:	2300      	movs	r3, #0
 8002c42:	e7a0      	b.n	8002b86 <__aeabi_d2f+0x3a>
 8002c44:	000b      	movs	r3, r1
 8002c46:	e79f      	b.n	8002b88 <__aeabi_d2f+0x3c>
 8002c48:	000007fe 	.word	0x000007fe
 8002c4c:	fffffc80 	.word	0xfffffc80
 8002c50:	fffffca2 	.word	0xfffffca2
 8002c54:	fffffc82 	.word	0xfffffc82

08002c58 <__clzsi2>:
 8002c58:	211c      	movs	r1, #28
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	041b      	lsls	r3, r3, #16
 8002c5e:	4298      	cmp	r0, r3
 8002c60:	d301      	bcc.n	8002c66 <__clzsi2+0xe>
 8002c62:	0c00      	lsrs	r0, r0, #16
 8002c64:	3910      	subs	r1, #16
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	4298      	cmp	r0, r3
 8002c6a:	d301      	bcc.n	8002c70 <__clzsi2+0x18>
 8002c6c:	0a00      	lsrs	r0, r0, #8
 8002c6e:	3908      	subs	r1, #8
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	4298      	cmp	r0, r3
 8002c74:	d301      	bcc.n	8002c7a <__clzsi2+0x22>
 8002c76:	0900      	lsrs	r0, r0, #4
 8002c78:	3904      	subs	r1, #4
 8002c7a:	a202      	add	r2, pc, #8	; (adr r2, 8002c84 <__clzsi2+0x2c>)
 8002c7c:	5c10      	ldrb	r0, [r2, r0]
 8002c7e:	1840      	adds	r0, r0, r1
 8002c80:	4770      	bx	lr
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	02020304 	.word	0x02020304
 8002c88:	01010101 	.word	0x01010101
	...

08002c94 <__clzdi2>:
 8002c94:	b510      	push	{r4, lr}
 8002c96:	2900      	cmp	r1, #0
 8002c98:	d103      	bne.n	8002ca2 <__clzdi2+0xe>
 8002c9a:	f7ff ffdd 	bl	8002c58 <__clzsi2>
 8002c9e:	3020      	adds	r0, #32
 8002ca0:	e002      	b.n	8002ca8 <__clzdi2+0x14>
 8002ca2:	0008      	movs	r0, r1
 8002ca4:	f7ff ffd8 	bl	8002c58 <__clzsi2>
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)

08002cac <SAMPLES_Get>:
#include "SVFunc.h"
#include "math.h"


void SAMPLES_Get(ADC_HandleTypeDef hadc,SVT_SamplesValues *SamplesValuesPointer)
{
 8002cac:	b084      	sub	sp, #16
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	2418      	movs	r4, #24
 8002cb6:	193c      	adds	r4, r7, r4
 8002cb8:	6020      	str	r0, [r4, #0]
 8002cba:	6061      	str	r1, [r4, #4]
 8002cbc:	60a2      	str	r2, [r4, #8]
 8002cbe:	60e3      	str	r3, [r4, #12]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	607b      	str	r3, [r7, #4]
 8002cc4:	e017      	b.n	8002cf6 <SAMPLES_Get+0x4a>
	{
		/* IMPORTANT: WAIT FOR THE CONVERSION TO COMPLETE BEFORE RETRIEVING THE VALUE
		* The reason is that HAL_ADC_GetValue does not wait and may retrieve an outdated sample
		* that has not been refreshed and saved in the ADC register.*/

		HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);		//Waiting for ADC Conversion is Done
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	425a      	negs	r2, r3
 8002cca:	2418      	movs	r4, #24
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	0011      	movs	r1, r2
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	f001 f979 	bl	8003fc8 <HAL_ADC_PollForConversion>
		SamplesValuesPointer->SamplesBuffer[i] = HAL_ADC_GetValue(&hadc);			//Get value from ADC
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f001 fa11 	bl	8004100 <HAL_ADC_GetValue>
 8002cde:	0003      	movs	r3, r0
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fe f8e7 	bl	8000eb4 <__aeabi_ui2f>
 8002ce6:	1c01      	adds	r1, r0, #0
 8002ce8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	0092      	lsls	r2, r2, #2
 8002cee:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	23e1      	movs	r3, #225	; 0xe1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	dbe2      	blt.n	8002cc6 <SAMPLES_Get+0x1a>
	}
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b003      	add	sp, #12
 8002d08:	bc90      	pop	{r4, r7}
 8002d0a:	bc08      	pop	{r3}
 8002d0c:	b004      	add	sp, #16
 8002d0e:	4718      	bx	r3

08002d10 <SAMPLES_To_Voltage>:
/*
 * THE FUNCTION DO =>
 * CALBIRATION OF ALL SAMPLES IN SamplesBuffer ARRAY
 */
void SAMPLES_To_Voltage(SVT_SamplesValues *SamplesValuesPointer)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < SAMPLES_TIMES; i++)
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e027      	b.n	8002d6e <SAMPLES_To_Voltage+0x5e>
	{
		SamplesValuesPointer->SamplesBuffer[i] 	*= 	3.3;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	58d3      	ldr	r3, [r2, r3]
 8002d26:	1c18      	adds	r0, r3, #0
 8002d28:	f7ff fec8 	bl	8002abc <__aeabi_f2d>
 8002d2c:	4a15      	ldr	r2, [pc, #84]	; (8002d84 <SAMPLES_To_Voltage+0x74>)
 8002d2e:	4b16      	ldr	r3, [pc, #88]	; (8002d88 <SAMPLES_To_Voltage+0x78>)
 8002d30:	f7ff f862 	bl	8001df8 <__aeabi_dmul>
 8002d34:	0002      	movs	r2, r0
 8002d36:	000b      	movs	r3, r1
 8002d38:	0010      	movs	r0, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	f7ff ff06 	bl	8002b4c <__aeabi_d2f>
 8002d40:	1c01      	adds	r1, r0, #0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	50d1      	str	r1, [r2, r3]
		SamplesValuesPointer->SamplesBuffer[i] 	/=	4096;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	58d3      	ldr	r3, [r2, r3]
 8002d52:	218b      	movs	r1, #139	; 0x8b
 8002d54:	05c9      	lsls	r1, r1, #23
 8002d56:	1c18      	adds	r0, r3, #0
 8002d58:	f7fd fd94 	bl	8000884 <__aeabi_fdiv>
 8002d5c:	1c03      	adds	r3, r0, #0
 8002d5e:	1c19      	adds	r1, r3, #0
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	0092      	lsls	r2, r2, #2
 8002d66:	50d1      	str	r1, [r2, r3]
	for (int i = 0; i < SAMPLES_TIMES; i++)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	60fb      	str	r3, [r7, #12]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	23e1      	movs	r3, #225	; 0xe1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	429a      	cmp	r2, r3
 8002d76:	dbd2      	blt.n	8002d1e <SAMPLES_To_Voltage+0xe>
	}
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b004      	add	sp, #16
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	66666666 	.word	0x66666666
 8002d88:	400a6666 	.word	0x400a6666

08002d8c <SAMPLES_DC_Offset_Calibration>:
/*
 * THE FUNCTION DO =>
 * SELF STM32 ADC CALIBRATION FOR REMOVE A DC OFFSET
 */
void SAMPLES_DC_Offset_Calibration(ADC_HandleTypeDef hadc)
{
 8002d8c:	b084      	sub	sp, #16
 8002d8e:	b5b0      	push	{r4, r5, r7, lr}
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	2510      	movs	r5, #16
 8002d94:	197c      	adds	r4, r7, r5
 8002d96:	6020      	str	r0, [r4, #0]
 8002d98:	6061      	str	r1, [r4, #4]
 8002d9a:	60a2      	str	r2, [r4, #8]
 8002d9c:	60e3      	str	r3, [r4, #12]
	HAL_ADC_Stop(&hadc);
 8002d9e:	002c      	movs	r4, r5
 8002da0:	193b      	adds	r3, r7, r4
 8002da2:	0018      	movs	r0, r3
 8002da4:	f001 f8d0 	bl	8003f48 <HAL_ADC_Stop>
	HAL_Delay(50);
 8002da8:	2032      	movs	r0, #50	; 0x32
 8002daa:	f000 fec5 	bl	8003b38 <HAL_Delay>
	HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 8002dae:	193b      	adds	r3, r7, r4
 8002db0:	2100      	movs	r1, #0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f001 fb72 	bl	800449c <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start(&hadc);
 8002db8:	193b      	adds	r3, r7, r4
 8002dba:	0018      	movs	r0, r3
 8002dbc:	f001 f870 	bl	8003ea0 <HAL_ADC_Start>
	HAL_Delay(50);
 8002dc0:	2032      	movs	r0, #50	; 0x32
 8002dc2:	f000 feb9 	bl	8003b38 <HAL_Delay>
}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bcb0      	pop	{r4, r5, r7}
 8002dcc:	bc08      	pop	{r3}
 8002dce:	b004      	add	sp, #16
 8002dd0:	4718      	bx	r3

08002dd2 <SAMPLES_Sum_Buffer>:


/*THE FUNCTION DO =>
 * SUM OF SamplesBuffer ARRAY VALUES */
void SAMPLES_Sum_Buffer(SVT_SamplesValues *SamplesValuesPointer)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b084      	sub	sp, #16
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
	SamplesValuesPointer->SamplesSum = 0;
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	23e1      	movs	r3, #225	; 0xe1
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	2100      	movs	r1, #0
 8002de2:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	e013      	b.n	8002e12 <SAMPLES_Sum_Buffer+0x40>
	{
		SamplesValuesPointer->SamplesSum += SamplesValuesPointer->SamplesBuffer[i];
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	23e1      	movs	r3, #225	; 0xe1
 8002dee:	011b      	lsls	r3, r3, #4
 8002df0:	58d0      	ldr	r0, [r2, r3]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	58d3      	ldr	r3, [r2, r3]
 8002dfa:	1c19      	adds	r1, r3, #0
 8002dfc:	f7fd fba2 	bl	8000544 <__aeabi_fadd>
 8002e00:	1c03      	adds	r3, r0, #0
 8002e02:	1c19      	adds	r1, r3, #0
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	23e1      	movs	r3, #225	; 0xe1
 8002e08:	011b      	lsls	r3, r3, #4
 8002e0a:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	60fb      	str	r3, [r7, #12]
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	23e1      	movs	r3, #225	; 0xe1
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	dbe6      	blt.n	8002dea <SAMPLES_Sum_Buffer+0x18>
	}
}
 8002e1c:	46c0      	nop			; (mov r8, r8)
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <SAMPLES_Gain_Error_Calibration>:

//the calibration fixed the range of the measured voltage. ie if the actual voltage range is 0 to 2, and
// the measured voltage is 0 to 1, then you have a gain error of 2. so you need to multiply all values by 2.
//look up gain error calibration, it is a function which compares the solpes of the measured range, and the actual range.
void SAMPLES_Gain_Error_Calibration(SVT_SamplesValues *SamplesValuesPointer)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	e018      	b.n	8002e68 <SAMPLES_Gain_Error_Calibration+0x40>
	{
		SamplesValuesPointer->SamplesBuffer[i] *= GAIN_ERROR;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	0092      	lsls	r2, r2, #2
 8002e3c:	58d3      	ldr	r3, [r2, r3]
 8002e3e:	1c18      	adds	r0, r3, #0
 8002e40:	f7ff fe3c 	bl	8002abc <__aeabi_f2d>
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <SAMPLES_Gain_Error_Calibration+0x54>)
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <SAMPLES_Gain_Error_Calibration+0x58>)
 8002e48:	f7fe ffd6 	bl	8001df8 <__aeabi_dmul>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	000b      	movs	r3, r1
 8002e50:	0010      	movs	r0, r2
 8002e52:	0019      	movs	r1, r3
 8002e54:	f7ff fe7a 	bl	8002b4c <__aeabi_d2f>
 8002e58:	1c01      	adds	r1, r0, #0
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	0092      	lsls	r2, r2, #2
 8002e60:	50d1      	str	r1, [r2, r3]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3301      	adds	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	23e1      	movs	r3, #225	; 0xe1
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	dbe1      	blt.n	8002e36 <SAMPLES_Gain_Error_Calibration+0xe>
	}

}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b004      	add	sp, #16
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	308010e2 	.word	0x308010e2
 8002e80:	3ff03396 	.word	0x3ff03396

08002e84 <DC_SV_Test>:
 * - If the signal remains within the acceptable range throughout the iterations, the function returns TEST_SUCCESS.
 * - The SideOfError variable helps track whether the error is in the positive or negative voltage area for consecutive samples.
 * - Fail_Counter ensures a sustained error before triggering a failure.
 */
uint8_t DC_SV_Test(SVT_SamplesValues SamplesValues,float LowThreshold, float HighThreshold)
{
 8002e84:	b084      	sub	sp, #16
 8002e86:	b590      	push	{r4, r7, lr}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	2418      	movs	r4, #24
 8002e8e:	193c      	adds	r4, r7, r4
 8002e90:	6020      	str	r0, [r4, #0]
 8002e92:	6061      	str	r1, [r4, #4]
 8002e94:	60a2      	str	r2, [r4, #8]
 8002e96:	60e3      	str	r3, [r4, #12]
	uint8_t Fail_Counter = 0;
 8002e98:	1dfb      	adds	r3, r7, #7
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
	SVT_ExceedingSide Exceeding = NONE_EXCEEDING;
 8002e9e:	1dbb      	adds	r3, r7, #6
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	e045      	b.n	8002f36 <DC_SV_Test+0xb2>
	{
		if(SamplesValues.SamplesBuffer[i] < LowThreshold)
 8002eaa:	2318      	movs	r3, #24
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	0092      	lsls	r2, r2, #2
 8002eb2:	58d3      	ldr	r3, [r2, r3]
 8002eb4:	1c19      	adds	r1, r3, #0
 8002eb6:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <DC_SV_Test+0xcc>)
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	6818      	ldr	r0, [r3, #0]
 8002ebc:	f7fd fa14 	bl	80002e8 <__aeabi_fcmpgt>
 8002ec0:	1e03      	subs	r3, r0, #0
 8002ec2:	d00f      	beq.n	8002ee4 <DC_SV_Test+0x60>
		{
			if(Exceeding == POSITIVE_AREA_EXCEEDING)
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d102      	bne.n	8002ed2 <DC_SV_Test+0x4e>
			{
				Fail_Counter = 0;
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
			}
			Exceeding = NEGATIVE_AREA_EXCEEDING;
 8002ed2:	1dbb      	adds	r3, r7, #6
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	701a      	strb	r2, [r3, #0]
			Fail_Counter++;
 8002ed8:	1dfb      	adds	r3, r7, #7
 8002eda:	781a      	ldrb	r2, [r3, #0]
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	3201      	adds	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
 8002ee2:	e01f      	b.n	8002f24 <DC_SV_Test+0xa0>
		}
		else if(SamplesValues.SamplesBuffer[i] > HighThreshold)
 8002ee4:	2318      	movs	r3, #24
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	0092      	lsls	r2, r2, #2
 8002eec:	58d3      	ldr	r3, [r2, r3]
 8002eee:	1c19      	adds	r1, r3, #0
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <DC_SV_Test+0xd0>)
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	f7fd f9e3 	bl	80002c0 <__aeabi_fcmplt>
 8002efa:	1e03      	subs	r3, r0, #0
 8002efc:	d00f      	beq.n	8002f1e <DC_SV_Test+0x9a>
		{
			if(Exceeding == NEGATIVE_AREA_EXCEEDING)
 8002efe:	1dbb      	adds	r3, r7, #6
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d102      	bne.n	8002f0c <DC_SV_Test+0x88>
			{
				Fail_Counter = 0;
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
			}
			Exceeding = POSITIVE_AREA_EXCEEDING;
 8002f0c:	1dbb      	adds	r3, r7, #6
 8002f0e:	2201      	movs	r2, #1
 8002f10:	701a      	strb	r2, [r3, #0]
			Fail_Counter++;
 8002f12:	1dfb      	adds	r3, r7, #7
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	1dfb      	adds	r3, r7, #7
 8002f18:	3201      	adds	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
 8002f1c:	e002      	b.n	8002f24 <DC_SV_Test+0xa0>
		}
		else
		{
			Fail_Counter = 0;
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	2200      	movs	r2, #0
 8002f22:	701a      	strb	r2, [r3, #0]
		}

		if(Fail_Counter >= 90)
 8002f24:	1dfb      	adds	r3, r7, #7
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b59      	cmp	r3, #89	; 0x59
 8002f2a:	d901      	bls.n	8002f30 <DC_SV_Test+0xac>
		{
			return TEST_FAILED;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	e008      	b.n	8002f42 <DC_SV_Test+0xbe>
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	3301      	adds	r3, #1
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	23e1      	movs	r3, #225	; 0xe1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	dbb4      	blt.n	8002eaa <DC_SV_Test+0x26>
		}
	}
	return TEST_SUCCESS;
 8002f40:	2301      	movs	r3, #1
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b003      	add	sp, #12
 8002f48:	bc90      	pop	{r4, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	b004      	add	sp, #16
 8002f4e:	4718      	bx	r3
 8002f50:	00000e34 	.word	0x00000e34
 8002f54:	00000e38 	.word	0x00000e38

08002f58 <AC_RMS_Test>:

// all measured values, go through the function: value*10+1.6 IDEALY.
// in practice some errors apply(should be in the range of 1%).
uint8_t AC_RMS_Test(SVT_SamplesValues SamplesValues)
{
 8002f58:	b084      	sub	sp, #16
 8002f5a:	b5b0      	push	{r4, r5, r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	2518      	movs	r5, #24
 8002f62:	197c      	adds	r4, r7, r5
 8002f64:	6020      	str	r0, [r4, #0]
 8002f66:	6061      	str	r1, [r4, #4]
 8002f68:	60a2      	str	r2, [r4, #8]
 8002f6a:	60e3      	str	r3, [r4, #12]
	SamplesValues.RMSValue = 0;
 8002f6c:	197b      	adds	r3, r7, r5
 8002f6e:	4a34      	ldr	r2, [pc, #208]	; (8003040 <AC_RMS_Test+0xe8>)
 8002f70:	2100      	movs	r1, #0
 8002f72:	5099      	str	r1, [r3, r2]
	float temp_calc=0;
 8002f74:	2300      	movs	r3, #0
 8002f76:	603b      	str	r3, [r7, #0]

	for(int i=0;i<SAMPLES_TIMES;i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	607b      	str	r3, [r7, #4]
 8002f7c:	e028      	b.n	8002fd0 <AC_RMS_Test+0x78>
	{
		temp_calc = SamplesValues.SamplesBuffer[i] - SELF_TEST_VREF;
 8002f7e:	2418      	movs	r4, #24
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	0092      	lsls	r2, r2, #2
 8002f86:	58d3      	ldr	r3, [r2, r3]
 8002f88:	1c18      	adds	r0, r3, #0
 8002f8a:	f7ff fd97 	bl	8002abc <__aeabi_f2d>
 8002f8e:	4a2d      	ldr	r2, [pc, #180]	; (8003044 <AC_RMS_Test+0xec>)
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <AC_RMS_Test+0xf0>)
 8002f92:	f7ff f9f3 	bl	800237c <__aeabi_dsub>
 8002f96:	0002      	movs	r2, r0
 8002f98:	000b      	movs	r3, r1
 8002f9a:	0010      	movs	r0, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	f7ff fdd5 	bl	8002b4c <__aeabi_d2f>
 8002fa2:	1c03      	adds	r3, r0, #0
 8002fa4:	603b      	str	r3, [r7, #0]

		SamplesValues.RMSValue += temp_calc*temp_calc;
 8002fa6:	0025      	movs	r5, r4
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	4a25      	ldr	r2, [pc, #148]	; (8003040 <AC_RMS_Test+0xe8>)
 8002fac:	589c      	ldr	r4, [r3, r2]
 8002fae:	6839      	ldr	r1, [r7, #0]
 8002fb0:	6838      	ldr	r0, [r7, #0]
 8002fb2:	f7fd fe31 	bl	8000c18 <__aeabi_fmul>
 8002fb6:	1c03      	adds	r3, r0, #0
 8002fb8:	1c19      	adds	r1, r3, #0
 8002fba:	1c20      	adds	r0, r4, #0
 8002fbc:	f7fd fac2 	bl	8000544 <__aeabi_fadd>
 8002fc0:	1c03      	adds	r3, r0, #0
 8002fc2:	1c19      	adds	r1, r3, #0
 8002fc4:	197b      	adds	r3, r7, r5
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <AC_RMS_Test+0xe8>)
 8002fc8:	5099      	str	r1, [r3, r2]
	for(int i=0;i<SAMPLES_TIMES;i++)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	23e1      	movs	r3, #225	; 0xe1
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	dbd1      	blt.n	8002f7e <AC_RMS_Test+0x26>
	}
	SamplesValues.RMSValue = sqrt(SamplesValues.RMSValue/SAMPLES_TIMES);
 8002fda:	2418      	movs	r4, #24
 8002fdc:	193b      	adds	r3, r7, r4
 8002fde:	4a18      	ldr	r2, [pc, #96]	; (8003040 <AC_RMS_Test+0xe8>)
 8002fe0:	589b      	ldr	r3, [r3, r2]
 8002fe2:	491a      	ldr	r1, [pc, #104]	; (800304c <AC_RMS_Test+0xf4>)
 8002fe4:	1c18      	adds	r0, r3, #0
 8002fe6:	f7fd fc4d 	bl	8000884 <__aeabi_fdiv>
 8002fea:	1c03      	adds	r3, r0, #0
 8002fec:	1c18      	adds	r0, r3, #0
 8002fee:	f7ff fd65 	bl	8002abc <__aeabi_f2d>
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	000b      	movs	r3, r1
 8002ff6:	0010      	movs	r0, r2
 8002ff8:	0019      	movs	r1, r3
 8002ffa:	f002 fcb4 	bl	8005966 <sqrt>
 8002ffe:	0002      	movs	r2, r0
 8003000:	000b      	movs	r3, r1
 8003002:	0010      	movs	r0, r2
 8003004:	0019      	movs	r1, r3
 8003006:	f7ff fda1 	bl	8002b4c <__aeabi_d2f>
 800300a:	1c02      	adds	r2, r0, #0
 800300c:	193b      	adds	r3, r7, r4
 800300e:	490c      	ldr	r1, [pc, #48]	; (8003040 <AC_RMS_Test+0xe8>)
 8003010:	505a      	str	r2, [r3, r1]
	if(SamplesValues.RMSValue<SV_RMS_THRESHOLD){
 8003012:	193b      	adds	r3, r7, r4
 8003014:	4a0a      	ldr	r2, [pc, #40]	; (8003040 <AC_RMS_Test+0xe8>)
 8003016:	589b      	ldr	r3, [r3, r2]
 8003018:	1c18      	adds	r0, r3, #0
 800301a:	f7ff fd4f 	bl	8002abc <__aeabi_f2d>
 800301e:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <AC_RMS_Test+0xf8>)
 8003020:	4b0c      	ldr	r3, [pc, #48]	; (8003054 <AC_RMS_Test+0xfc>)
 8003022:	f7fd f913 	bl	800024c <__aeabi_dcmplt>
 8003026:	1e03      	subs	r3, r0, #0
 8003028:	d001      	beq.n	800302e <AC_RMS_Test+0xd6>
		return TEST_SUCCESS;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <AC_RMS_Test+0xd8>
	}
	return TEST_FAILED;
 800302e:	2300      	movs	r3, #0
}
 8003030:	0018      	movs	r0, r3
 8003032:	46bd      	mov	sp, r7
 8003034:	b002      	add	sp, #8
 8003036:	bcb0      	pop	{r4, r5, r7}
 8003038:	bc08      	pop	{r3}
 800303a:	b004      	add	sp, #16
 800303c:	4718      	bx	r3
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	00000e18 	.word	0x00000e18
 8003044:	2d0e5604 	.word	0x2d0e5604
 8003048:	3ff99db2 	.word	0x3ff99db2
 800304c:	44610000 	.word	0x44610000
 8003050:	33333333 	.word	0x33333333
 8003054:	3feb3333 	.word	0x3feb3333

08003058 <LEDs_Blink>:

void LEDs_Blink(uint8_t BlinkTimes,uint8_t BlinkTime)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	0002      	movs	r2, r0
 8003060:	1dfb      	adds	r3, r7, #7
 8003062:	701a      	strb	r2, [r3, #0]
 8003064:	1dbb      	adds	r3, r7, #6
 8003066:	1c0a      	adds	r2, r1, #0
 8003068:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<BlinkTimes*2;i++)
 800306a:	2300      	movs	r3, #0
 800306c:	60fb      	str	r3, [r7, #12]
 800306e:	e011      	b.n	8003094 <LEDs_Blink+0x3c>
	{
		HAL_GPIO_TogglePin(GPIOB, RED_LED_Pin);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <LEDs_Blink+0x54>)
 8003072:	2120      	movs	r1, #32
 8003074:	0018      	movs	r0, r3
 8003076:	f001 fe3e 	bl	8004cf6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GREEN_LED_Pin);
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <LEDs_Blink+0x54>)
 800307c:	2110      	movs	r1, #16
 800307e:	0018      	movs	r0, r3
 8003080:	f001 fe39 	bl	8004cf6 <HAL_GPIO_TogglePin>
		HAL_Delay(BlinkTime);
 8003084:	1dbb      	adds	r3, r7, #6
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fd55 	bl	8003b38 <HAL_Delay>
	for(int i=0;i<BlinkTimes*2;i++)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3301      	adds	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	1dfb      	adds	r3, r7, #7
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbe7      	blt.n	8003070 <LEDs_Blink+0x18>
	}

}
 80030a0:	46c0      	nop			; (mov r8, r8)
 80030a2:	46c0      	nop			; (mov r8, r8)
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	50000400 	.word	0x50000400

080030b0 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	1dbb      	adds	r3, r7, #6
 80030ba:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == SELF_TEST_EXTI6_Pin)
 80030bc:	1dbb      	adds	r3, r7, #6
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	2b40      	cmp	r3, #64	; 0x40
 80030c2:	d103      	bne.n	80030cc <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ModeFlag = SELF_TEST;
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == STRAY_VOLTAGE_TEST_EXTI7_Pin)
	{
		ModeFlag = SV_TEST;
	}
}
 80030ca:	e006      	b.n	80030da <HAL_GPIO_EXTI_Callback+0x2a>
	else if(GPIO_Pin == STRAY_VOLTAGE_TEST_EXTI7_Pin)
 80030cc:	1dbb      	adds	r3, r7, #6
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d102      	bne.n	80030da <HAL_GPIO_EXTI_Callback+0x2a>
		ModeFlag = SV_TEST;
 80030d4:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80030d6:	2202      	movs	r2, #2
 80030d8:	701a      	strb	r2, [r3, #0]
}
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b002      	add	sp, #8
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	20000138 	.word	0x20000138

080030e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	4cc1      	ldr	r4, [pc, #772]	; (80033f0 <main+0x308>)
 80030ec:	44a5      	add	sp, r4
 80030ee:	4fc1      	ldr	r7, [pc, #772]	; (80033f4 <main+0x30c>)
 80030f0:	446f      	add	r7, sp
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030f2:	f000 fcb1 	bl	8003a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030f6:	f000 fa5b 	bl	80035b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030fa:	f000 fb39 	bl	8003770 <MX_GPIO_Init>
  MX_DMA_Init();
 80030fe:	f000 fb19 	bl	8003734 <MX_DMA_Init>
  MX_ADC_Init();
 8003102:	f000 fab1 	bl	8003668 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */

  SamplesValues.RMSValue = 0;
 8003106:	4bbc      	ldr	r3, [pc, #752]	; (80033f8 <main+0x310>)
 8003108:	4aba      	ldr	r2, [pc, #744]	; (80033f4 <main+0x30c>)
 800310a:	2100      	movs	r1, #0
 800310c:	5099      	str	r1, [r3, r2]
  SamplesValues.SamplesAvg = 0;
 800310e:	4bba      	ldr	r3, [pc, #744]	; (80033f8 <main+0x310>)
 8003110:	4aba      	ldr	r2, [pc, #744]	; (80033fc <main+0x314>)
 8003112:	2100      	movs	r1, #0
 8003114:	5099      	str	r1, [r3, r2]
  SamplesValues.SamplesSum = 0;
 8003116:	4ab8      	ldr	r2, [pc, #736]	; (80033f8 <main+0x310>)
 8003118:	23e1      	movs	r3, #225	; 0xe1
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	2100      	movs	r1, #0
 800311e:	50d1      	str	r1, [r2, r3]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/*This is necessary after exiting stop mode*/
		SystemClock_Config();					//System Clock Configuration
 8003120:	f000 fa46 	bl	80035b0 <SystemClock_Config>
		HAL_ResumeTick();						//Resumes the Tick increment
 8003124:	f000 fd3a 	bl	8003b9c <HAL_ResumeTick>
		HAL_ADC_Start(&hadc);					//Enable ADC, start conversion of regular group
 8003128:	4bb5      	ldr	r3, [pc, #724]	; (8003400 <main+0x318>)
 800312a:	0018      	movs	r0, r3
 800312c:	f000 feb8 	bl	8003ea0 <HAL_ADC_Start>

		/*Default PINs states*/
		HAL_GPIO_WritePin(GPIOA, SW1_Pin, SET);
 8003130:	23a0      	movs	r3, #160	; 0xa0
 8003132:	05db      	lsls	r3, r3, #23
 8003134:	2201      	movs	r2, #1
 8003136:	2101      	movs	r1, #1
 8003138:	0018      	movs	r0, r3
 800313a:	f001 fdbf 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW2_Pin, SET);
 800313e:	23a0      	movs	r3, #160	; 0xa0
 8003140:	05db      	lsls	r3, r3, #23
 8003142:	2201      	movs	r2, #1
 8003144:	2102      	movs	r1, #2
 8003146:	0018      	movs	r0, r3
 8003148:	f001 fdb8 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW3_Pin, SET);
 800314c:	23a0      	movs	r3, #160	; 0xa0
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	2201      	movs	r2, #1
 8003152:	2104      	movs	r1, #4
 8003154:	0018      	movs	r0, r3
 8003156:	f001 fdb1 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW4_Pin, SET);
 800315a:	23a0      	movs	r3, #160	; 0xa0
 800315c:	05db      	lsls	r3, r3, #23
 800315e:	2201      	movs	r2, #1
 8003160:	2108      	movs	r1, #8
 8003162:	0018      	movs	r0, r3
 8003164:	f001 fdaa 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW5_Pin, SET);
 8003168:	23a0      	movs	r3, #160	; 0xa0
 800316a:	05db      	lsls	r3, r3, #23
 800316c:	2201      	movs	r2, #1
 800316e:	2110      	movs	r1, #16
 8003170:	0018      	movs	r0, r3
 8003172:	f001 fda3 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW6_Pin, SET);
 8003176:	23a0      	movs	r3, #160	; 0xa0
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	2201      	movs	r2, #1
 800317c:	2120      	movs	r1, #32
 800317e:	0018      	movs	r0, r3
 8003180:	f001 fd9c 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, SW7_Pin, SET);
 8003184:	23a0      	movs	r3, #160	; 0xa0
 8003186:	05db      	lsls	r3, r3, #23
 8003188:	2201      	movs	r2, #1
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	0018      	movs	r0, r3
 800318e:	f001 fd95 	bl	8004cbc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, AUX_EN_Pin, SET);
 8003192:	4b9c      	ldr	r3, [pc, #624]	; (8003404 <main+0x31c>)
 8003194:	2201      	movs	r2, #1
 8003196:	2101      	movs	r1, #1
 8003198:	0018      	movs	r0, r3
 800319a:	f001 fd8f 	bl	8004cbc <HAL_GPIO_WritePin>


		/* The delay needs to make a sure of changing of voltage level in GPIOs*/
		HAL_Delay(50);
 800319e:	2032      	movs	r0, #50	; 0x32
 80031a0:	f000 fcca 	bl	8003b38 <HAL_Delay>

		/* Calculation Offset before tests*/
		SAMPLES_DC_Offset_Calibration(hadc);
 80031a4:	4c96      	ldr	r4, [pc, #600]	; (8003400 <main+0x318>)
 80031a6:	466b      	mov	r3, sp
 80031a8:	0018      	movs	r0, r3
 80031aa:	0023      	movs	r3, r4
 80031ac:	3310      	adds	r3, #16
 80031ae:	224c      	movs	r2, #76	; 0x4c
 80031b0:	0019      	movs	r1, r3
 80031b2:	f002 fbcf 	bl	8005954 <memcpy>
 80031b6:	6820      	ldr	r0, [r4, #0]
 80031b8:	6861      	ldr	r1, [r4, #4]
 80031ba:	68a2      	ldr	r2, [r4, #8]
 80031bc:	68e3      	ldr	r3, [r4, #12]
 80031be:	f7ff fde5 	bl	8002d8c <SAMPLES_DC_Offset_Calibration>

		// in self test pass, blink both leds a couple times and then turn the respective led on until button released.
		// if failed, keep red led on until a self test passed, or for...10 sec?.
		if(ModeFlag == SELF_TEST)
 80031c2:	4b91      	ldr	r3, [pc, #580]	; (8003408 <main+0x320>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d000      	beq.n	80031cc <main+0xe4>
 80031ca:	e103      	b.n	80033d4 <main+0x2ec>
		{
			HAL_GPIO_WritePin(GPIOB, AUX_EN_Pin, RESET);
 80031cc:	4b8d      	ldr	r3, [pc, #564]	; (8003404 <main+0x31c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	2101      	movs	r1, #1
 80031d2:	0018      	movs	r0, r3
 80031d4:	f001 fd72 	bl	8004cbc <HAL_GPIO_WritePin>
			HAL_Delay(50);
 80031d8:	2032      	movs	r0, #50	; 0x32
 80031da:	f000 fcad 	bl	8003b38 <HAL_Delay>

			SAMPLES_Get(hadc,&SamplesValues);
 80031de:	4c88      	ldr	r4, [pc, #544]	; (8003400 <main+0x318>)
 80031e0:	4b85      	ldr	r3, [pc, #532]	; (80033f8 <main+0x310>)
 80031e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80031e4:	466b      	mov	r3, sp
 80031e6:	0018      	movs	r0, r3
 80031e8:	0023      	movs	r3, r4
 80031ea:	3310      	adds	r3, #16
 80031ec:	224c      	movs	r2, #76	; 0x4c
 80031ee:	0019      	movs	r1, r3
 80031f0:	f002 fbb0 	bl	8005954 <memcpy>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	6861      	ldr	r1, [r4, #4]
 80031f8:	68a2      	ldr	r2, [r4, #8]
 80031fa:	68e3      	ldr	r3, [r4, #12]
 80031fc:	f7ff fd56 	bl	8002cac <SAMPLES_Get>
			SAMPLES_To_Voltage(&SamplesValues);
 8003200:	4b7d      	ldr	r3, [pc, #500]	; (80033f8 <main+0x310>)
 8003202:	0018      	movs	r0, r3
 8003204:	f7ff fd84 	bl	8002d10 <SAMPLES_To_Voltage>
			SAMPLES_Gain_Error_Calibration(&SamplesValues);
 8003208:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <main+0x310>)
 800320a:	0018      	movs	r0, r3
 800320c:	f7ff fe0c 	bl	8002e28 <SAMPLES_Gain_Error_Calibration>
			TestStatus = DC_SV_Test(SamplesValues,SELF_TEST_VREF*0.95 , SELF_TEST_VREF*1.05);
 8003210:	4c79      	ldr	r4, [pc, #484]	; (80033f8 <main+0x310>)
 8003212:	4a7e      	ldr	r2, [pc, #504]	; (800340c <main+0x324>)
 8003214:	23e1      	movs	r3, #225	; 0xe1
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	446b      	add	r3, sp
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	4a7c      	ldr	r2, [pc, #496]	; (8003410 <main+0x328>)
 800321e:	4b7d      	ldr	r3, [pc, #500]	; (8003414 <main+0x32c>)
 8003220:	446b      	add	r3, sp
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	466b      	mov	r3, sp
 8003226:	0018      	movs	r0, r3
 8003228:	0023      	movs	r3, r4
 800322a:	3310      	adds	r3, #16
 800322c:	4a79      	ldr	r2, [pc, #484]	; (8003414 <main+0x32c>)
 800322e:	0019      	movs	r1, r3
 8003230:	f002 fb90 	bl	8005954 <memcpy>
 8003234:	6820      	ldr	r0, [r4, #0]
 8003236:	6861      	ldr	r1, [r4, #4]
 8003238:	68a2      	ldr	r2, [r4, #8]
 800323a:	68e3      	ldr	r3, [r4, #12]
 800323c:	f7ff fe22 	bl	8002e84 <DC_SV_Test>
 8003240:	0003      	movs	r3, r0
 8003242:	001a      	movs	r2, r3
 8003244:	4b74      	ldr	r3, [pc, #464]	; (8003418 <main+0x330>)
 8003246:	701a      	strb	r2, [r3, #0]
			if(TestStatus == TEST_SUCCESS)
 8003248:	4b73      	ldr	r3, [pc, #460]	; (8003418 <main+0x330>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d103      	bne.n	8003258 <main+0x170>
			{
				LEDs_Blink(1,200);
 8003250:	21c8      	movs	r1, #200	; 0xc8
 8003252:	2001      	movs	r0, #1
 8003254:	f7ff ff00 	bl	8003058 <LEDs_Blink>
			}
			HAL_GPIO_WritePin(GPIOA, SW7_Pin, RESET);
 8003258:	23a0      	movs	r3, #160	; 0xa0
 800325a:	05db      	lsls	r3, r3, #23
 800325c:	2200      	movs	r2, #0
 800325e:	2140      	movs	r1, #64	; 0x40
 8003260:	0018      	movs	r0, r3
 8003262:	f001 fd2b 	bl	8004cbc <HAL_GPIO_WritePin>

			for(int i=0;i<6;i++)
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
 800326a:	e07c      	b.n	8003366 <main+0x27e>
			{

				HAL_GPIO_WritePin(GPIOA, SwitchArray[i], RESET);
 800326c:	4a6b      	ldr	r2, [pc, #428]	; (800341c <main+0x334>)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	18d3      	adds	r3, r2, r3
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	b299      	uxth	r1, r3
 8003276:	23a0      	movs	r3, #160	; 0xa0
 8003278:	05db      	lsls	r3, r3, #23
 800327a:	2200      	movs	r2, #0
 800327c:	0018      	movs	r0, r3
 800327e:	f001 fd1d 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8003282:	2032      	movs	r0, #50	; 0x32
 8003284:	f000 fc58 	bl	8003b38 <HAL_Delay>
				SAMPLES_Get(hadc,&SamplesValues);
 8003288:	4c5d      	ldr	r4, [pc, #372]	; (8003400 <main+0x318>)
 800328a:	4b5b      	ldr	r3, [pc, #364]	; (80033f8 <main+0x310>)
 800328c:	9313      	str	r3, [sp, #76]	; 0x4c
 800328e:	466b      	mov	r3, sp
 8003290:	0018      	movs	r0, r3
 8003292:	0023      	movs	r3, r4
 8003294:	3310      	adds	r3, #16
 8003296:	224c      	movs	r2, #76	; 0x4c
 8003298:	0019      	movs	r1, r3
 800329a:	f002 fb5b 	bl	8005954 <memcpy>
 800329e:	6820      	ldr	r0, [r4, #0]
 80032a0:	6861      	ldr	r1, [r4, #4]
 80032a2:	68a2      	ldr	r2, [r4, #8]
 80032a4:	68e3      	ldr	r3, [r4, #12]
 80032a6:	f7ff fd01 	bl	8002cac <SAMPLES_Get>
				HAL_GPIO_WritePin(GPIOA, SwitchArray[i], SET);
 80032aa:	4a5c      	ldr	r2, [pc, #368]	; (800341c <main+0x334>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	18d3      	adds	r3, r2, r3
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	b299      	uxth	r1, r3
 80032b4:	23a0      	movs	r3, #160	; 0xa0
 80032b6:	05db      	lsls	r3, r3, #23
 80032b8:	2201      	movs	r2, #1
 80032ba:	0018      	movs	r0, r3
 80032bc:	f001 fcfe 	bl	8004cbc <HAL_GPIO_WritePin>
				SAMPLES_Sum_Buffer(&SamplesValues);
 80032c0:	4b4d      	ldr	r3, [pc, #308]	; (80033f8 <main+0x310>)
 80032c2:	0018      	movs	r0, r3
 80032c4:	f7ff fd85 	bl	8002dd2 <SAMPLES_Sum_Buffer>
				SamplesValues.SamplesAvg = SamplesValues.SamplesSum / SAMPLES_TIMES;
 80032c8:	4a4b      	ldr	r2, [pc, #300]	; (80033f8 <main+0x310>)
 80032ca:	23e1      	movs	r3, #225	; 0xe1
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	58d3      	ldr	r3, [r2, r3]
 80032d0:	4953      	ldr	r1, [pc, #332]	; (8003420 <main+0x338>)
 80032d2:	1c18      	adds	r0, r3, #0
 80032d4:	f7fd fad6 	bl	8000884 <__aeabi_fdiv>
 80032d8:	1c03      	adds	r3, r0, #0
 80032da:	1c19      	adds	r1, r3, #0
 80032dc:	4b46      	ldr	r3, [pc, #280]	; (80033f8 <main+0x310>)
 80032de:	4a47      	ldr	r2, [pc, #284]	; (80033fc <main+0x314>)
 80032e0:	5099      	str	r1, [r3, r2]
				SAMPLES_To_Voltage(&SamplesValues);
 80032e2:	4b45      	ldr	r3, [pc, #276]	; (80033f8 <main+0x310>)
 80032e4:	0018      	movs	r0, r3
 80032e6:	f7ff fd13 	bl	8002d10 <SAMPLES_To_Voltage>
				SAMPLES_Gain_Error_Calibration(&SamplesValues);
 80032ea:	4b43      	ldr	r3, [pc, #268]	; (80033f8 <main+0x310>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff fd9b 	bl	8002e28 <SAMPLES_Gain_Error_Calibration>

				TestStatus = DC_SV_Test(SamplesValues, SELF_TEST_ADC_VAL*0.95, SELF_TEST_ADC_VAL*1.05);
 80032f2:	4c41      	ldr	r4, [pc, #260]	; (80033f8 <main+0x310>)
 80032f4:	4a4b      	ldr	r2, [pc, #300]	; (8003424 <main+0x33c>)
 80032f6:	23e1      	movs	r3, #225	; 0xe1
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	446b      	add	r3, sp
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4a4a      	ldr	r2, [pc, #296]	; (8003428 <main+0x340>)
 8003300:	4b44      	ldr	r3, [pc, #272]	; (8003414 <main+0x32c>)
 8003302:	446b      	add	r3, sp
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	466b      	mov	r3, sp
 8003308:	0018      	movs	r0, r3
 800330a:	0023      	movs	r3, r4
 800330c:	3310      	adds	r3, #16
 800330e:	4a41      	ldr	r2, [pc, #260]	; (8003414 <main+0x32c>)
 8003310:	0019      	movs	r1, r3
 8003312:	f002 fb1f 	bl	8005954 <memcpy>
 8003316:	6820      	ldr	r0, [r4, #0]
 8003318:	6861      	ldr	r1, [r4, #4]
 800331a:	68a2      	ldr	r2, [r4, #8]
 800331c:	68e3      	ldr	r3, [r4, #12]
 800331e:	f7ff fdb1 	bl	8002e84 <DC_SV_Test>
 8003322:	0003      	movs	r3, r0
 8003324:	001a      	movs	r2, r3
 8003326:	4b3c      	ldr	r3, [pc, #240]	; (8003418 <main+0x330>)
 8003328:	701a      	strb	r2, [r3, #0]
				if(TestStatus == TEST_SUCCESS)
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <main+0x330>)
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d112      	bne.n	8003358 <main+0x270>
				{
					TestStatus = AC_RMS_Test(SamplesValues);
 8003332:	4c31      	ldr	r4, [pc, #196]	; (80033f8 <main+0x310>)
 8003334:	466b      	mov	r3, sp
 8003336:	0018      	movs	r0, r3
 8003338:	0023      	movs	r3, r4
 800333a:	3310      	adds	r3, #16
 800333c:	4a35      	ldr	r2, [pc, #212]	; (8003414 <main+0x32c>)
 800333e:	0019      	movs	r1, r3
 8003340:	f002 fb08 	bl	8005954 <memcpy>
 8003344:	6820      	ldr	r0, [r4, #0]
 8003346:	6861      	ldr	r1, [r4, #4]
 8003348:	68a2      	ldr	r2, [r4, #8]
 800334a:	68e3      	ldr	r3, [r4, #12]
 800334c:	f7ff fe04 	bl	8002f58 <AC_RMS_Test>
 8003350:	0003      	movs	r3, r0
 8003352:	001a      	movs	r2, r3
 8003354:	4b30      	ldr	r3, [pc, #192]	; (8003418 <main+0x330>)
 8003356:	701a      	strb	r2, [r3, #0]
				}
				if(TestStatus == TEST_FAILED)
 8003358:	4b2f      	ldr	r3, [pc, #188]	; (8003418 <main+0x330>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <main+0x288>
			for(int i=0;i<6;i++)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3301      	adds	r3, #1
 8003364:	607b      	str	r3, [r7, #4]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b05      	cmp	r3, #5
 800336a:	dc00      	bgt.n	800336e <main+0x286>
 800336c:	e77e      	b.n	800326c <main+0x184>
 800336e:	e000      	b.n	8003372 <main+0x28a>
				{
					break;
 8003370:	46c0      	nop			; (mov r8, r8)
				}
			}
			if(TestStatus == TEST_SUCCESS)
 8003372:	4b29      	ldr	r3, [pc, #164]	; (8003418 <main+0x330>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d10f      	bne.n	800339a <main+0x2b2>
			{
				HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, SET);
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <main+0x31c>)
 800337c:	2201      	movs	r2, #1
 800337e:	2110      	movs	r1, #16
 8003380:	0018      	movs	r0, r3
 8003382:	f001 fc9b 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(200);
 8003386:	20c8      	movs	r0, #200	; 0xc8
 8003388:	f000 fbd6 	bl	8003b38 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, RESET);
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <main+0x31c>)
 800338e:	2200      	movs	r2, #0
 8003390:	2110      	movs	r1, #16
 8003392:	0018      	movs	r0, r3
 8003394:	f001 fc92 	bl	8004cbc <HAL_GPIO_WritePin>
 8003398:	e012      	b.n	80033c0 <main+0x2d8>
			}
			else if(TestStatus == TEST_FAILED)
 800339a:	4b1f      	ldr	r3, [pc, #124]	; (8003418 <main+0x330>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <main+0x2d8>
			{
				HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, SET);
 80033a2:	4b18      	ldr	r3, [pc, #96]	; (8003404 <main+0x31c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	2120      	movs	r1, #32
 80033a8:	0018      	movs	r0, r3
 80033aa:	f001 fc87 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(200);
 80033ae:	20c8      	movs	r0, #200	; 0xc8
 80033b0:	f000 fbc2 	bl	8003b38 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, RESET);
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <main+0x31c>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	2120      	movs	r1, #32
 80033ba:	0018      	movs	r0, r3
 80033bc:	f001 fc7e 	bl	8004cbc <HAL_GPIO_WritePin>
			}

			HAL_GPIO_WritePin(GPIOB, AUX_EN_Pin, SET);
 80033c0:	4b10      	ldr	r3, [pc, #64]	; (8003404 <main+0x31c>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	2101      	movs	r1, #1
 80033c6:	0018      	movs	r0, r3
 80033c8:	f001 fc78 	bl	8004cbc <HAL_GPIO_WritePin>
			ModeFlag = SLEEP_MODE;
 80033cc:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <main+0x320>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e0cb      	b.n	800356c <main+0x484>
		}

		// in stray voltage test, turn the green led until if passed until button released.
		// if failed, keep red led on until a self test passed, or for...10 sec?.
		//add test for all 6 pins
		else if(ModeFlag == SV_TEST)
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <main+0x320>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d000      	beq.n	80033de <main+0x2f6>
 80033dc:	e0c6      	b.n	800356c <main+0x484>
		{
			HAL_GPIO_WritePin(GPIOB, AUX_EN_Pin, RESET);
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <main+0x31c>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	2101      	movs	r1, #1
 80033e4:	0018      	movs	r0, r3
 80033e6:	f001 fc69 	bl	8004cbc <HAL_GPIO_WritePin>
			for(int i = 0 ; i < 6 ; i++)
 80033ea:	2300      	movs	r3, #0
 80033ec:	603b      	str	r3, [r7, #0]
 80033ee:	e089      	b.n	8003504 <main+0x41c>
 80033f0:	fffff1dc 	.word	0xfffff1dc
 80033f4:	00000e18 	.word	0x00000e18
 80033f8:	2000013c 	.word	0x2000013c
 80033fc:	00000e14 	.word	0x00000e14
 8003400:	20000094 	.word	0x20000094
 8003404:	50000400 	.word	0x50000400
 8003408:	20000138 	.word	0x20000138
 800340c:	3fd72ca5 	.word	0x3fd72ca5
 8003410:	3fc2ae7d 	.word	0x3fc2ae7d
 8003414:	00000e0c 	.word	0x00000e0c
 8003418:	20000139 	.word	0x20000139
 800341c:	20000000 	.word	0x20000000
 8003420:	44610000 	.word	0x44610000
 8003424:	3ffd4a4d 	.word	0x3ffd4a4d
 8003428:	3fe52ad8 	.word	0x3fe52ad8
			{
				HAL_GPIO_WritePin(GPIOA, SwitchArray[i], RESET);
 800342c:	4a57      	ldr	r2, [pc, #348]	; (800358c <main+0x4a4>)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	18d3      	adds	r3, r2, r3
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	b299      	uxth	r1, r3
 8003436:	23a0      	movs	r3, #160	; 0xa0
 8003438:	05db      	lsls	r3, r3, #23
 800343a:	2200      	movs	r2, #0
 800343c:	0018      	movs	r0, r3
 800343e:	f001 fc3d 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(50);
 8003442:	2032      	movs	r0, #50	; 0x32
 8003444:	f000 fb78 	bl	8003b38 <HAL_Delay>
				SAMPLES_Get(hadc,&SamplesValues);
 8003448:	4c51      	ldr	r4, [pc, #324]	; (8003590 <main+0x4a8>)
 800344a:	4b52      	ldr	r3, [pc, #328]	; (8003594 <main+0x4ac>)
 800344c:	9313      	str	r3, [sp, #76]	; 0x4c
 800344e:	466b      	mov	r3, sp
 8003450:	0018      	movs	r0, r3
 8003452:	0023      	movs	r3, r4
 8003454:	3310      	adds	r3, #16
 8003456:	224c      	movs	r2, #76	; 0x4c
 8003458:	0019      	movs	r1, r3
 800345a:	f002 fa7b 	bl	8005954 <memcpy>
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	6861      	ldr	r1, [r4, #4]
 8003462:	68a2      	ldr	r2, [r4, #8]
 8003464:	68e3      	ldr	r3, [r4, #12]
 8003466:	f7ff fc21 	bl	8002cac <SAMPLES_Get>
				// SamplesValues.SamplesBuffer[i] = SamplesValues.SamplesBuffer[i];
				HAL_GPIO_WritePin(GPIOA, SwitchArray[i], SET);
 800346a:	4a48      	ldr	r2, [pc, #288]	; (800358c <main+0x4a4>)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	18d3      	adds	r3, r2, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b299      	uxth	r1, r3
 8003474:	23a0      	movs	r3, #160	; 0xa0
 8003476:	05db      	lsls	r3, r3, #23
 8003478:	2201      	movs	r2, #1
 800347a:	0018      	movs	r0, r3
 800347c:	f001 fc1e 	bl	8004cbc <HAL_GPIO_WritePin>
				SAMPLES_To_Voltage(&SamplesValues);
 8003480:	4b44      	ldr	r3, [pc, #272]	; (8003594 <main+0x4ac>)
 8003482:	0018      	movs	r0, r3
 8003484:	f7ff fc44 	bl	8002d10 <SAMPLES_To_Voltage>
				SAMPLES_Gain_Error_Calibration(&SamplesValues);
 8003488:	4b42      	ldr	r3, [pc, #264]	; (8003594 <main+0x4ac>)
 800348a:	0018      	movs	r0, r3
 800348c:	f7ff fccc 	bl	8002e28 <SAMPLES_Gain_Error_Calibration>
 				TestStatus = DC_SV_Test(SamplesValues, SELF_TEST_VREF-SV_DC_THRESHOLD, SELF_TEST_VREF+SV_DC_THRESHOLD);
 8003490:	4c40      	ldr	r4, [pc, #256]	; (8003594 <main+0x4ac>)
 8003492:	4a41      	ldr	r2, [pc, #260]	; (8003598 <main+0x4b0>)
 8003494:	23e1      	movs	r3, #225	; 0xe1
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	446b      	add	r3, sp
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	4a3f      	ldr	r2, [pc, #252]	; (800359c <main+0x4b4>)
 800349e:	4b40      	ldr	r3, [pc, #256]	; (80035a0 <main+0x4b8>)
 80034a0:	446b      	add	r3, sp
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	466b      	mov	r3, sp
 80034a6:	0018      	movs	r0, r3
 80034a8:	0023      	movs	r3, r4
 80034aa:	3310      	adds	r3, #16
 80034ac:	4a3c      	ldr	r2, [pc, #240]	; (80035a0 <main+0x4b8>)
 80034ae:	0019      	movs	r1, r3
 80034b0:	f002 fa50 	bl	8005954 <memcpy>
 80034b4:	6820      	ldr	r0, [r4, #0]
 80034b6:	6861      	ldr	r1, [r4, #4]
 80034b8:	68a2      	ldr	r2, [r4, #8]
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	f7ff fce2 	bl	8002e84 <DC_SV_Test>
 80034c0:	0003      	movs	r3, r0
 80034c2:	001a      	movs	r2, r3
 80034c4:	4b37      	ldr	r3, [pc, #220]	; (80035a4 <main+0x4bc>)
 80034c6:	701a      	strb	r2, [r3, #0]
				if(TestStatus == TEST_SUCCESS)
 80034c8:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <main+0x4bc>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d112      	bne.n	80034f6 <main+0x40e>
				{
					TestStatus = AC_RMS_Test(SamplesValues);
 80034d0:	4c30      	ldr	r4, [pc, #192]	; (8003594 <main+0x4ac>)
 80034d2:	466b      	mov	r3, sp
 80034d4:	0018      	movs	r0, r3
 80034d6:	0023      	movs	r3, r4
 80034d8:	3310      	adds	r3, #16
 80034da:	4a31      	ldr	r2, [pc, #196]	; (80035a0 <main+0x4b8>)
 80034dc:	0019      	movs	r1, r3
 80034de:	f002 fa39 	bl	8005954 <memcpy>
 80034e2:	6820      	ldr	r0, [r4, #0]
 80034e4:	6861      	ldr	r1, [r4, #4]
 80034e6:	68a2      	ldr	r2, [r4, #8]
 80034e8:	68e3      	ldr	r3, [r4, #12]
 80034ea:	f7ff fd35 	bl	8002f58 <AC_RMS_Test>
 80034ee:	0003      	movs	r3, r0
 80034f0:	001a      	movs	r2, r3
 80034f2:	4b2c      	ldr	r3, [pc, #176]	; (80035a4 <main+0x4bc>)
 80034f4:	701a      	strb	r2, [r3, #0]
				}
				if(TestStatus == TEST_FAILED)
 80034f6:	4b2b      	ldr	r3, [pc, #172]	; (80035a4 <main+0x4bc>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <main+0x424>
			for(int i = 0 ; i < 6 ; i++)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	3301      	adds	r3, #1
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b05      	cmp	r3, #5
 8003508:	dd90      	ble.n	800342c <main+0x344>
 800350a:	e000      	b.n	800350e <main+0x426>
				{
					break;
 800350c:	46c0      	nop			; (mov r8, r8)
				}

			}
			if(TestStatus == TEST_SUCCESS)
 800350e:	4b25      	ldr	r3, [pc, #148]	; (80035a4 <main+0x4bc>)
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10e      	bne.n	8003534 <main+0x44c>
			{
				HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, SET);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <main+0x4c0>)
 8003518:	2201      	movs	r2, #1
 800351a:	2110      	movs	r1, #16
 800351c:	0018      	movs	r0, r3
 800351e:	f001 fbcd 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8003522:	20fa      	movs	r0, #250	; 0xfa
 8003524:	f000 fb08 	bl	8003b38 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin, RESET);
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <main+0x4c0>)
 800352a:	2200      	movs	r2, #0
 800352c:	2110      	movs	r1, #16
 800352e:	0018      	movs	r0, r3
 8003530:	f001 fbc4 	bl	8004cbc <HAL_GPIO_WritePin>
			}
			if(TestStatus == TEST_FAILED)
 8003534:	4b1b      	ldr	r3, [pc, #108]	; (80035a4 <main+0x4bc>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10e      	bne.n	800355a <main+0x472>
			{
				HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, SET);
 800353c:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <main+0x4c0>)
 800353e:	2201      	movs	r2, #1
 8003540:	2120      	movs	r1, #32
 8003542:	0018      	movs	r0, r3
 8003544:	f001 fbba 	bl	8004cbc <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8003548:	20fa      	movs	r0, #250	; 0xfa
 800354a:	f000 faf5 	bl	8003b38 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOB, RED_LED_Pin, RESET);
 800354e:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <main+0x4c0>)
 8003550:	2200      	movs	r2, #0
 8003552:	2120      	movs	r1, #32
 8003554:	0018      	movs	r0, r3
 8003556:	f001 fbb1 	bl	8004cbc <HAL_GPIO_WritePin>
			}



			HAL_GPIO_WritePin(GPIOB, AUX_EN_Pin, SET);
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <main+0x4c0>)
 800355c:	2201      	movs	r2, #1
 800355e:	2101      	movs	r1, #1
 8003560:	0018      	movs	r0, r3
 8003562:	f001 fbab 	bl	8004cbc <HAL_GPIO_WritePin>
 			ModeFlag = SLEEP_MODE;
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <main+0x4c4>)
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
		}

		/*Entering to sleep mode if the flag is SLEEP_MODE*/
		if(ModeFlag == SLEEP_MODE)
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <main+0x4c4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d000      	beq.n	8003576 <main+0x48e>
 8003574:	e5d4      	b.n	8003120 <main+0x38>
		{
			HAL_ADC_Stop(&hadc);													//Stop the ADC
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <main+0x4a8>)
 8003578:	0018      	movs	r0, r3
 800357a:	f000 fce5 	bl	8003f48 <HAL_ADC_Stop>
			HAL_SuspendTick();														//Suspend the tick count
 800357e:	f000 faff 	bl	8003b80 <HAL_SuspendTick>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);		//Enter to stop-mode with interrupt wake-up
 8003582:	2101      	movs	r1, #1
 8003584:	2001      	movs	r0, #1
 8003586:	f001 fbed 	bl	8004d64 <HAL_PWR_EnterSTOPMode>
		SystemClock_Config();					//System Clock Configuration
 800358a:	e5c9      	b.n	8003120 <main+0x38>
 800358c:	20000000 	.word	0x20000000
 8003590:	20000094 	.word	0x20000094
 8003594:	2000013c 	.word	0x2000013c
 8003598:	4029a9fc 	.word	0x4029a9fc
 800359c:	3f0d0e56 	.word	0x3f0d0e56
 80035a0:	00000e0c 	.word	0x00000e0c
 80035a4:	20000139 	.word	0x20000139
 80035a8:	50000400 	.word	0x50000400
 80035ac:	20000138 	.word	0x20000138

080035b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035b0:	b590      	push	{r4, r7, lr}
 80035b2:	b093      	sub	sp, #76	; 0x4c
 80035b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035b6:	2414      	movs	r4, #20
 80035b8:	193b      	adds	r3, r7, r4
 80035ba:	0018      	movs	r0, r3
 80035bc:	2334      	movs	r3, #52	; 0x34
 80035be:	001a      	movs	r2, r3
 80035c0:	2100      	movs	r1, #0
 80035c2:	f002 f995 	bl	80058f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035c6:	003b      	movs	r3, r7
 80035c8:	0018      	movs	r0, r3
 80035ca:	2314      	movs	r3, #20
 80035cc:	001a      	movs	r2, r3
 80035ce:	2100      	movs	r1, #0
 80035d0:	f002 f98e 	bl	80058f0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80035d4:	4b22      	ldr	r3, [pc, #136]	; (8003660 <SystemClock_Config+0xb0>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <SystemClock_Config+0xb4>)
 80035da:	401a      	ands	r2, r3
 80035dc:	4b20      	ldr	r3, [pc, #128]	; (8003660 <SystemClock_Config+0xb0>)
 80035de:	2180      	movs	r1, #128	; 0x80
 80035e0:	0109      	lsls	r1, r1, #4
 80035e2:	430a      	orrs	r2, r1
 80035e4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80035e6:	0021      	movs	r1, r4
 80035e8:	187b      	adds	r3, r7, r1
 80035ea:	2202      	movs	r2, #2
 80035ec:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	2201      	movs	r2, #1
 80035f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80035f4:	187b      	adds	r3, r7, r1
 80035f6:	2210      	movs	r2, #16
 80035f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035fa:	187b      	adds	r3, r7, r1
 80035fc:	2202      	movs	r2, #2
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003600:	187b      	adds	r3, r7, r1
 8003602:	2200      	movs	r2, #0
 8003604:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8003606:	187b      	adds	r3, r7, r1
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	02d2      	lsls	r2, r2, #11
 800360c:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	03d2      	lsls	r2, r2, #15
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003616:	187b      	adds	r3, r7, r1
 8003618:	0018      	movs	r0, r3
 800361a:	f001 fbff 	bl	8004e1c <HAL_RCC_OscConfig>
 800361e:	1e03      	subs	r3, r0, #0
 8003620:	d001      	beq.n	8003626 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8003622:	f000 f933 	bl	800388c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003626:	003b      	movs	r3, r7
 8003628:	220f      	movs	r2, #15
 800362a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800362c:	003b      	movs	r3, r7
 800362e:	2203      	movs	r2, #3
 8003630:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003632:	003b      	movs	r3, r7
 8003634:	2200      	movs	r2, #0
 8003636:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003638:	003b      	movs	r3, r7
 800363a:	2200      	movs	r2, #0
 800363c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800363e:	003b      	movs	r3, r7
 8003640:	2200      	movs	r2, #0
 8003642:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003644:	003b      	movs	r3, r7
 8003646:	2101      	movs	r1, #1
 8003648:	0018      	movs	r0, r3
 800364a:	f001 ff63 	bl	8005514 <HAL_RCC_ClockConfig>
 800364e:	1e03      	subs	r3, r0, #0
 8003650:	d001      	beq.n	8003656 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003652:	f000 f91b 	bl	800388c <Error_Handler>
  }
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b013      	add	sp, #76	; 0x4c
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	40007000 	.word	0x40007000
 8003664:	ffffe7ff 	.word	0xffffe7ff

08003668 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800366e:	003b      	movs	r3, r7
 8003670:	0018      	movs	r0, r3
 8003672:	2308      	movs	r3, #8
 8003674:	001a      	movs	r2, r3
 8003676:	2100      	movs	r1, #0
 8003678:	f002 f93a 	bl	80058f0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800367c:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <MX_ADC_Init+0xc0>)
 800367e:	4a2b      	ldr	r2, [pc, #172]	; (800372c <MX_ADC_Init+0xc4>)
 8003680:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8003682:	4b29      	ldr	r3, [pc, #164]	; (8003728 <MX_ADC_Init+0xc0>)
 8003684:	2200      	movs	r2, #0
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003688:	4b27      	ldr	r3, [pc, #156]	; (8003728 <MX_ADC_Init+0xc0>)
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	05d2      	lsls	r2, r2, #23
 800368e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003690:	4b25      	ldr	r3, [pc, #148]	; (8003728 <MX_ADC_Init+0xc0>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8003696:	4b24      	ldr	r3, [pc, #144]	; (8003728 <MX_ADC_Init+0xc0>)
 8003698:	2207      	movs	r2, #7
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800369c:	4b22      	ldr	r3, [pc, #136]	; (8003728 <MX_ADC_Init+0xc0>)
 800369e:	2201      	movs	r2, #1
 80036a0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <MX_ADC_Init+0xc0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = ENABLE;
 80036a8:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <MX_ADC_Init+0xc0>)
 80036aa:	2220      	movs	r2, #32
 80036ac:	2101      	movs	r1, #1
 80036ae:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <MX_ADC_Init+0xc0>)
 80036b2:	2221      	movs	r2, #33	; 0x21
 80036b4:	2100      	movs	r1, #0
 80036b6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80036b8:	4b1b      	ldr	r3, [pc, #108]	; (8003728 <MX_ADC_Init+0xc0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80036be:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <MX_ADC_Init+0xc0>)
 80036c0:	22c2      	movs	r2, #194	; 0xc2
 80036c2:	32ff      	adds	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <MX_ADC_Init+0xc0>)
 80036c8:	222c      	movs	r2, #44	; 0x2c
 80036ca:	2100      	movs	r1, #0
 80036cc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <MX_ADC_Init+0xc0>)
 80036d0:	2204      	movs	r2, #4
 80036d2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <MX_ADC_Init+0xc0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <MX_ADC_Init+0xc0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <MX_ADC_Init+0xc0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80036e6:	4b10      	ldr	r3, [pc, #64]	; (8003728 <MX_ADC_Init+0xc0>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <MX_ADC_Init+0xc0>)
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fa62 	bl	8003bb8 <HAL_ADC_Init>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80036f8:	f000 f8c8 	bl	800388c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80036fc:	003b      	movs	r3, r7
 80036fe:	4a0c      	ldr	r2, [pc, #48]	; (8003730 <MX_ADC_Init+0xc8>)
 8003700:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003702:	003b      	movs	r3, r7
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	0152      	lsls	r2, r2, #5
 8003708:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800370a:	003a      	movs	r2, r7
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <MX_ADC_Init+0xc0>)
 800370e:	0011      	movs	r1, r2
 8003710:	0018      	movs	r0, r3
 8003712:	f000 fd01 	bl	8004118 <HAL_ADC_ConfigChannel>
 8003716:	1e03      	subs	r3, r0, #0
 8003718:	d001      	beq.n	800371e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800371a:	f000 f8b7 	bl	800388c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
 8003726:	46c0      	nop			; (mov r8, r8)
 8003728:	20000094 	.word	0x20000094
 800372c:	40012400 	.word	0x40012400
 8003730:	24000200 	.word	0x24000200

08003734 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <MX_DMA_Init+0x38>)
 800373c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800373e:	4b0b      	ldr	r3, [pc, #44]	; (800376c <MX_DMA_Init+0x38>)
 8003740:	2101      	movs	r1, #1
 8003742:	430a      	orrs	r2, r1
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <MX_DMA_Init+0x38>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	2201      	movs	r2, #1
 800374c:	4013      	ands	r3, r2
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	2009      	movs	r0, #9
 8003758:	f000 ffea 	bl	8004730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800375c:	2009      	movs	r0, #9
 800375e:	f000 fffc 	bl	800475a <HAL_NVIC_EnableIRQ>

}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	46bd      	mov	sp, r7
 8003766:	b002      	add	sp, #8
 8003768:	bd80      	pop	{r7, pc}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	40021000 	.word	0x40021000

08003770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003776:	240c      	movs	r4, #12
 8003778:	193b      	adds	r3, r7, r4
 800377a:	0018      	movs	r0, r3
 800377c:	2314      	movs	r3, #20
 800377e:	001a      	movs	r2, r3
 8003780:	2100      	movs	r1, #0
 8003782:	f002 f8b5 	bl	80058f0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	4b3f      	ldr	r3, [pc, #252]	; (8003884 <MX_GPIO_Init+0x114>)
 8003788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378a:	4b3e      	ldr	r3, [pc, #248]	; (8003884 <MX_GPIO_Init+0x114>)
 800378c:	2101      	movs	r1, #1
 800378e:	430a      	orrs	r2, r1
 8003790:	62da      	str	r2, [r3, #44]	; 0x2c
 8003792:	4b3c      	ldr	r3, [pc, #240]	; (8003884 <MX_GPIO_Init+0x114>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	2201      	movs	r2, #1
 8003798:	4013      	ands	r3, r2
 800379a:	60bb      	str	r3, [r7, #8]
 800379c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800379e:	4b39      	ldr	r3, [pc, #228]	; (8003884 <MX_GPIO_Init+0x114>)
 80037a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a2:	4b38      	ldr	r3, [pc, #224]	; (8003884 <MX_GPIO_Init+0x114>)
 80037a4:	2102      	movs	r1, #2
 80037a6:	430a      	orrs	r2, r1
 80037a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80037aa:	4b36      	ldr	r3, [pc, #216]	; (8003884 <MX_GPIO_Init+0x114>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	2202      	movs	r2, #2
 80037b0:	4013      	ands	r3, r2
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 80037b6:	23a0      	movs	r3, #160	; 0xa0
 80037b8:	05db      	lsls	r3, r3, #23
 80037ba:	2201      	movs	r2, #1
 80037bc:	217f      	movs	r1, #127	; 0x7f
 80037be:	0018      	movs	r0, r3
 80037c0:	f001 fa7c 	bl	8004cbc <HAL_GPIO_WritePin>
                          |SW5_Pin|SW6_Pin|SW7_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUX_EN_GPIO_Port, AUX_EN_Pin, GPIO_PIN_SET);
 80037c4:	4b30      	ldr	r3, [pc, #192]	; (8003888 <MX_GPIO_Init+0x118>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	2101      	movs	r1, #1
 80037ca:	0018      	movs	r0, r3
 80037cc:	f001 fa76 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_LED_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80037d0:	4b2d      	ldr	r3, [pc, #180]	; (8003888 <MX_GPIO_Init+0x118>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	2130      	movs	r1, #48	; 0x30
 80037d6:	0018      	movs	r0, r3
 80037d8:	f001 fa70 	bl	8004cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin SW6_Pin SW7_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 80037dc:	193b      	adds	r3, r7, r4
 80037de:	227f      	movs	r2, #127	; 0x7f
 80037e0:	601a      	str	r2, [r3, #0]
                          |SW5_Pin|SW6_Pin|SW7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80037e2:	193b      	adds	r3, r7, r4
 80037e4:	2211      	movs	r2, #17
 80037e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037e8:	193b      	adds	r3, r7, r4
 80037ea:	2201      	movs	r2, #1
 80037ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ee:	193b      	adds	r3, r7, r4
 80037f0:	2200      	movs	r2, #0
 80037f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037f4:	193a      	adds	r2, r7, r4
 80037f6:	23a0      	movs	r3, #160	; 0xa0
 80037f8:	05db      	lsls	r3, r3, #23
 80037fa:	0011      	movs	r1, r2
 80037fc:	0018      	movs	r0, r3
 80037fe:	f001 f8ef 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUX_EN_Pin */
  GPIO_InitStruct.Pin = AUX_EN_Pin;
 8003802:	193b      	adds	r3, r7, r4
 8003804:	2201      	movs	r2, #1
 8003806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003808:	193b      	adds	r3, r7, r4
 800380a:	2211      	movs	r2, #17
 800380c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800380e:	193b      	adds	r3, r7, r4
 8003810:	2201      	movs	r2, #1
 8003812:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	193b      	adds	r3, r7, r4
 8003816:	2200      	movs	r2, #0
 8003818:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUX_EN_GPIO_Port, &GPIO_InitStruct);
 800381a:	193b      	adds	r3, r7, r4
 800381c:	4a1a      	ldr	r2, [pc, #104]	; (8003888 <MX_GPIO_Init+0x118>)
 800381e:	0019      	movs	r1, r3
 8003820:	0010      	movs	r0, r2
 8003822:	f001 f8dd 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LED_Pin RED_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin|RED_LED_Pin;
 8003826:	193b      	adds	r3, r7, r4
 8003828:	2230      	movs	r2, #48	; 0x30
 800382a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800382c:	193b      	adds	r3, r7, r4
 800382e:	2201      	movs	r2, #1
 8003830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	193b      	adds	r3, r7, r4
 8003834:	2200      	movs	r2, #0
 8003836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	193b      	adds	r3, r7, r4
 800383a:	2200      	movs	r2, #0
 800383c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	193b      	adds	r3, r7, r4
 8003840:	4a11      	ldr	r2, [pc, #68]	; (8003888 <MX_GPIO_Init+0x118>)
 8003842:	0019      	movs	r1, r3
 8003844:	0010      	movs	r0, r2
 8003846:	f001 f8cb 	bl	80049e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SELF_TEST_EXTI6_Pin STRAY_VOLTAGE_TEST_EXTI7_Pin */
  GPIO_InitStruct.Pin = SELF_TEST_EXTI6_Pin|STRAY_VOLTAGE_TEST_EXTI7_Pin;
 800384a:	0021      	movs	r1, r4
 800384c:	187b      	adds	r3, r7, r1
 800384e:	22c0      	movs	r2, #192	; 0xc0
 8003850:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003852:	187b      	adds	r3, r7, r1
 8003854:	2288      	movs	r2, #136	; 0x88
 8003856:	0352      	lsls	r2, r2, #13
 8003858:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385a:	187b      	adds	r3, r7, r1
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003860:	187b      	adds	r3, r7, r1
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <MX_GPIO_Init+0x118>)
 8003864:	0019      	movs	r1, r3
 8003866:	0010      	movs	r0, r2
 8003868:	f001 f8ba 	bl	80049e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800386c:	2200      	movs	r2, #0
 800386e:	2100      	movs	r1, #0
 8003870:	2007      	movs	r0, #7
 8003872:	f000 ff5d 	bl	8004730 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003876:	2007      	movs	r0, #7
 8003878:	f000 ff6f 	bl	800475a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800387c:	46c0      	nop			; (mov r8, r8)
 800387e:	46bd      	mov	sp, r7
 8003880:	b009      	add	sp, #36	; 0x24
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	40021000 	.word	0x40021000
 8003888:	50000400 	.word	0x50000400

0800388c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003890:	b672      	cpsid	i
}
 8003892:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003894:	e7fe      	b.n	8003894 <Error_Handler+0x8>
	...

08003898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389c:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_MspInit+0x24>)
 800389e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <HAL_MspInit+0x24>)
 80038a2:	2101      	movs	r1, #1
 80038a4:	430a      	orrs	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_MspInit+0x24>)
 80038aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ac:	4b03      	ldr	r3, [pc, #12]	; (80038bc <HAL_MspInit+0x24>)
 80038ae:	2180      	movs	r1, #128	; 0x80
 80038b0:	0549      	lsls	r1, r1, #21
 80038b2:	430a      	orrs	r2, r1
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	40021000 	.word	0x40021000

080038c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b089      	sub	sp, #36	; 0x24
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	240c      	movs	r4, #12
 80038ca:	193b      	adds	r3, r7, r4
 80038cc:	0018      	movs	r0, r3
 80038ce:	2314      	movs	r3, #20
 80038d0:	001a      	movs	r2, r3
 80038d2:	2100      	movs	r1, #0
 80038d4:	f002 f80c 	bl	80058f0 <memset>
  if(hadc->Instance==ADC1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a2a      	ldr	r2, [pc, #168]	; (8003988 <HAL_ADC_MspInit+0xc8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d14d      	bne.n	800397e <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038e2:	4b2a      	ldr	r3, [pc, #168]	; (800398c <HAL_ADC_MspInit+0xcc>)
 80038e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038e6:	4b29      	ldr	r3, [pc, #164]	; (800398c <HAL_ADC_MspInit+0xcc>)
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	0089      	lsls	r1, r1, #2
 80038ec:	430a      	orrs	r2, r1
 80038ee:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f0:	4b26      	ldr	r3, [pc, #152]	; (800398c <HAL_ADC_MspInit+0xcc>)
 80038f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f4:	4b25      	ldr	r3, [pc, #148]	; (800398c <HAL_ADC_MspInit+0xcc>)
 80038f6:	2102      	movs	r1, #2
 80038f8:	430a      	orrs	r2, r1
 80038fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <HAL_ADC_MspInit+0xcc>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	2202      	movs	r2, #2
 8003902:	4013      	ands	r3, r2
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PB1     ------> ADC_IN9
    */
    GPIO_InitStruct.Pin = ADC_IN_Pin;
 8003908:	193b      	adds	r3, r7, r4
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800390e:	193b      	adds	r3, r7, r4
 8003910:	2203      	movs	r2, #3
 8003912:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003914:	193b      	adds	r3, r7, r4
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_IN_GPIO_Port, &GPIO_InitStruct);
 800391a:	193b      	adds	r3, r7, r4
 800391c:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_ADC_MspInit+0xd0>)
 800391e:	0019      	movs	r1, r3
 8003920:	0010      	movs	r0, r2
 8003922:	f001 f85d 	bl	80049e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003926:	4b1b      	ldr	r3, [pc, #108]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_ADC_MspInit+0xd8>)
 800392a:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_0;
 800392c:	4b19      	ldr	r3, [pc, #100]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 800392e:	2200      	movs	r2, #0
 8003930:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003934:	2200      	movs	r2, #0
 8003936:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003938:	4b16      	ldr	r3, [pc, #88]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 800393a:	2200      	movs	r2, #0
 800393c:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003944:	4b13      	ldr	r3, [pc, #76]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003946:	2280      	movs	r2, #128	; 0x80
 8003948:	0052      	lsls	r2, r2, #1
 800394a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	00d2      	lsls	r2, r2, #3
 8003952:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8003954:	4b0f      	ldr	r3, [pc, #60]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003956:	2200      	movs	r2, #0
 8003958:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 800395c:	22c0      	movs	r2, #192	; 0xc0
 800395e:	0192      	lsls	r2, r2, #6
 8003960:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003964:	0018      	movs	r0, r3
 8003966:	f000 ff15 	bl	8004794 <HAL_DMA_Init>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d001      	beq.n	8003972 <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 800396e:	f7ff ff8d 	bl	800388c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a07      	ldr	r2, [pc, #28]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 8003976:	64da      	str	r2, [r3, #76]	; 0x4c
 8003978:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_ADC_MspInit+0xd4>)
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	46bd      	mov	sp, r7
 8003982:	b009      	add	sp, #36	; 0x24
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40012400 	.word	0x40012400
 800398c:	40021000 	.word	0x40021000
 8003990:	50000400 	.word	0x50000400
 8003994:	200000f0 	.word	0x200000f0
 8003998:	40020008 	.word	0x40020008

0800399c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039a0:	e7fe      	b.n	80039a0 <NMI_Handler+0x4>

080039a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039a6:	e7fe      	b.n	80039a6 <HardFault_Handler+0x4>

080039a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80039ac:	46c0      	nop			; (mov r8, r8)
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039c0:	f000 f89e 	bl	8003b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039c4:	46c0      	nop			; (mov r8, r8)
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SELF_TEST_EXTI6_Pin);
 80039ce:	2040      	movs	r0, #64	; 0x40
 80039d0:	f001 f9ac 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(STRAY_VOLTAGE_TEST_EXTI7_Pin);
 80039d4:	2080      	movs	r0, #128	; 0x80
 80039d6:	f001 f9a9 	bl	8004d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80039e4:	4b03      	ldr	r3, [pc, #12]	; (80039f4 <DMA1_Channel1_IRQHandler+0x14>)
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 ff4c 	bl	8004884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	46c0      	nop			; (mov r8, r8)
 80039f4:	200000f0 	.word	0x200000f0

080039f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
	...

08003a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003a04:	480d      	ldr	r0, [pc, #52]	; (8003a3c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003a06:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a08:	f7ff fff6 	bl	80039f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a0e:	490d      	ldr	r1, [pc, #52]	; (8003a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a10:	4a0d      	ldr	r2, [pc, #52]	; (8003a48 <LoopForever+0xe>)
  movs r3, #0
 8003a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a14:	e002      	b.n	8003a1c <LoopCopyDataInit>

08003a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a1a:	3304      	adds	r3, #4

08003a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a20:	d3f9      	bcc.n	8003a16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a22:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a24:	4c0a      	ldr	r4, [pc, #40]	; (8003a50 <LoopForever+0x16>)
  movs r3, #0
 8003a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a28:	e001      	b.n	8003a2e <LoopFillZerobss>

08003a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a2c:	3204      	adds	r2, #4

08003a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a30:	d3fb      	bcc.n	8003a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a32:	f001 ff6b 	bl	800590c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a36:	f7ff fb57 	bl	80030e8 <main>

08003a3a <LoopForever>:

LoopForever:
    b LoopForever
 8003a3a:	e7fe      	b.n	8003a3a <LoopForever>
   ldr   r0, =_estack
 8003a3c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a44:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003a48:	08005c90 	.word	0x08005c90
  ldr r2, =_sbss
 8003a4c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003a50:	20001094 	.word	0x20001094

08003a54 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a54:	e7fe      	b.n	8003a54 <ADC1_COMP_IRQHandler>
	...

08003a58 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a5e:	1dfb      	adds	r3, r7, #7
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_Init+0x3c>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_Init+0x3c>)
 8003a6a:	2140      	movs	r1, #64	; 0x40
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a70:	2003      	movs	r0, #3
 8003a72:	f000 f811 	bl	8003a98 <HAL_InitTick>
 8003a76:	1e03      	subs	r3, r0, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003a7a:	1dfb      	adds	r3, r7, #7
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e001      	b.n	8003a86 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a82:	f7ff ff09 	bl	8003898 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a86:	1dfb      	adds	r3, r7, #7
 8003a88:	781b      	ldrb	r3, [r3, #0]
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b002      	add	sp, #8
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	40022000 	.word	0x40022000

08003a98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <HAL_InitTick+0x5c>)
 8003aa2:	681c      	ldr	r4, [r3, #0]
 8003aa4:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <HAL_InitTick+0x60>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	0019      	movs	r1, r3
 8003aaa:	23fa      	movs	r3, #250	; 0xfa
 8003aac:	0098      	lsls	r0, r3, #2
 8003aae:	f7fc fb2b 	bl	8000108 <__udivsi3>
 8003ab2:	0003      	movs	r3, r0
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0020      	movs	r0, r4
 8003ab8:	f7fc fb26 	bl	8000108 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 fe5b 	bl	800477a <HAL_SYSTICK_Config>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e00f      	b.n	8003aec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d80b      	bhi.n	8003aea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	425b      	negs	r3, r3
 8003ad8:	2200      	movs	r2, #0
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fe28 	bl	8004730 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_InitTick+0x64>)
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e000      	b.n	8003aec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
}
 8003aec:	0018      	movs	r0, r3
 8003aee:	46bd      	mov	sp, r7
 8003af0:	b003      	add	sp, #12
 8003af2:	bd90      	pop	{r4, r7, pc}
 8003af4:	20000008 	.word	0x20000008
 8003af8:	20000010 	.word	0x20000010
 8003afc:	2000000c 	.word	0x2000000c

08003b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_IncTick+0x1c>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	001a      	movs	r2, r3
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_IncTick+0x20>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	18d2      	adds	r2, r2, r3
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_IncTick+0x20>)
 8003b12:	601a      	str	r2, [r3, #0]
}
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	46c0      	nop			; (mov r8, r8)
 8003b1c:	20000010 	.word	0x20000010
 8003b20:	20000f58 	.word	0x20000f58

08003b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  return uwTick;
 8003b28:	4b02      	ldr	r3, [pc, #8]	; (8003b34 <HAL_GetTick+0x10>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000f58 	.word	0x20000f58

08003b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fff0 	bl	8003b24 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	d005      	beq.n	8003b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_Delay+0x44>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	001a      	movs	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	189b      	adds	r3, r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b5e:	46c0      	nop			; (mov r8, r8)
 8003b60:	f7ff ffe0 	bl	8003b24 <HAL_GetTick>
 8003b64:	0002      	movs	r2, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d8f7      	bhi.n	8003b60 <HAL_Delay+0x28>
  {
  }
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b004      	add	sp, #16
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	20000010 	.word	0x20000010

08003b80 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <HAL_SuspendTick+0x18>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_SuspendTick+0x18>)
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	46c0      	nop			; (mov r8, r8)
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	e000e010 	.word	0xe000e010

08003b9c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <HAL_ResumeTick+0x18>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_ResumeTick+0x18>)
 8003ba6:	2102      	movs	r1, #2
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	601a      	str	r2, [r3, #0]
}
 8003bac:	46c0      	nop			; (mov r8, r8)
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e159      	b.n	8003e7e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2250      	movs	r2, #80	; 0x50
 8003bdc:	2100      	movs	r1, #0
 8003bde:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7ff fe6c 	bl	80038c0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bec:	2210      	movs	r2, #16
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d005      	beq.n	8003c00 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003bfe:	d00b      	beq.n	8003c18 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c04:	2210      	movs	r2, #16
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2250      	movs	r2, #80	; 0x50
 8003c10:	2100      	movs	r1, #0
 8003c12:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e132      	b.n	8003e7e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c1c:	4a9a      	ldr	r2, [pc, #616]	; (8003e88 <HAL_ADC_Init+0x2d0>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2202      	movs	r2, #2
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2203      	movs	r2, #3
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d108      	bne.n	8003c48 <HAL_ADC_Init+0x90>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_ADC_Init+0x90>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_ADC_Init+0x92>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d149      	bne.n	8003ce2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	23c0      	movs	r3, #192	; 0xc0
 8003c54:	061b      	lsls	r3, r3, #24
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d00b      	beq.n	8003c72 <HAL_ADC_Init+0xba>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	05db      	lsls	r3, r3, #23
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d005      	beq.n	8003c72 <HAL_ADC_Init+0xba>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	061b      	lsls	r3, r3, #24
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d111      	bne.n	8003c96 <HAL_ADC_Init+0xde>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	0092      	lsls	r2, r2, #2
 8003c7e:	0892      	lsrs	r2, r2, #2
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6919      	ldr	r1, [r3, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	430a      	orrs	r2, r1
 8003c92:	611a      	str	r2, [r3, #16]
 8003c94:	e014      	b.n	8003cc0 <HAL_ADC_Init+0x108>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	0092      	lsls	r2, r2, #2
 8003ca2:	0892      	lsrs	r2, r2, #2
 8003ca4:	611a      	str	r2, [r3, #16]
 8003ca6:	4b79      	ldr	r3, [pc, #484]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4b78      	ldr	r3, [pc, #480]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003cac:	4978      	ldr	r1, [pc, #480]	; (8003e90 <HAL_ADC_Init+0x2d8>)
 8003cae:	400a      	ands	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003cb4:	6819      	ldr	r1, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	4b74      	ldr	r3, [pc, #464]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2118      	movs	r1, #24
 8003ccc:	438a      	bics	r2, r1
 8003cce:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689a      	ldr	r2, [r3, #8]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003ce2:	4b6a      	ldr	r3, [pc, #424]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b69      	ldr	r3, [pc, #420]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003ce8:	496a      	ldr	r1, [pc, #424]	; (8003e94 <HAL_ADC_Init+0x2dc>)
 8003cea:	400a      	ands	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003cee:	4b67      	ldr	r3, [pc, #412]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003cf0:	6819      	ldr	r1, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf6:	065a      	lsls	r2, r3, #25
 8003cf8:	4b64      	ldr	r3, [pc, #400]	; (8003e8c <HAL_ADC_Init+0x2d4>)
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	2380      	movs	r3, #128	; 0x80
 8003d06:	055b      	lsls	r3, r3, #21
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d108      	bne.n	8003d1e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2180      	movs	r1, #128	; 0x80
 8003d18:	0549      	lsls	r1, r1, #21
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	495b      	ldr	r1, [pc, #364]	; (8003e98 <HAL_ADC_Init+0x2e0>)
 8003d2a:	400a      	ands	r2, r1
 8003d2c:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68d9      	ldr	r1, [r3, #12]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d101      	bne.n	8003d44 <HAL_ADC_Init+0x18c>
 8003d40:	2304      	movs	r3, #4
 8003d42:	e000      	b.n	8003d46 <HAL_ADC_Init+0x18e>
 8003d44:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d46:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2020      	movs	r0, #32
 8003d4c:	5c1b      	ldrb	r3, [r3, r0]
 8003d4e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d50:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	202c      	movs	r0, #44	; 0x2c
 8003d56:	5c1b      	ldrb	r3, [r3, r0]
 8003d58:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d5a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003d60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003d68:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003d70:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d7e:	23c2      	movs	r3, #194	; 0xc2
 8003d80:	33ff      	adds	r3, #255	; 0xff
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d00b      	beq.n	8003d9e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68d9      	ldr	r1, [r3, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2221      	movs	r2, #33	; 0x21
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d11a      	bne.n	8003dde <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	5c9b      	ldrb	r3, [r3, r2]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2180      	movs	r1, #128	; 0x80
 8003dbe:	0249      	lsls	r1, r1, #9
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	60da      	str	r2, [r3, #12]
 8003dc4:	e00b      	b.n	8003dde <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dca:	2220      	movs	r2, #32
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d11f      	bne.n	8003e26 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	691a      	ldr	r2, [r3, #16]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	492a      	ldr	r1, [pc, #168]	; (8003e9c <HAL_ADC_Init+0x2e4>)
 8003df2:	400a      	ands	r2, r1
 8003df4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6919      	ldr	r1, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003e04:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003e0a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691a      	ldr	r2, [r3, #16]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2101      	movs	r1, #1
 8003e20:	430a      	orrs	r2, r1
 8003e22:	611a      	str	r2, [r3, #16]
 8003e24:	e00e      	b.n	8003e44 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	438a      	bics	r2, r1
 8003e42:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2107      	movs	r1, #7
 8003e50:	438a      	bics	r2, r1
 8003e52:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6959      	ldr	r1, [r3, #20]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	2203      	movs	r2, #3
 8003e72:	4393      	bics	r3, r2
 8003e74:	2201      	movs	r2, #1
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	fffffefd 	.word	0xfffffefd
 8003e8c:	40012708 	.word	0x40012708
 8003e90:	ffc3ffff 	.word	0xffc3ffff
 8003e94:	fdffffff 	.word	0xfdffffff
 8003e98:	fffe0219 	.word	0xfffe0219
 8003e9c:	fffffc03 	.word	0xfffffc03

08003ea0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	18fb      	adds	r3, r7, r3
 8003eac:	2200      	movs	r2, #0
 8003eae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2204      	movs	r2, #4
 8003eb8:	4013      	ands	r3, r2
 8003eba:	d138      	bne.n	8003f2e <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2250      	movs	r2, #80	; 0x50
 8003ec0:	5c9b      	ldrb	r3, [r3, r2]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d101      	bne.n	8003eca <HAL_ADC_Start+0x2a>
 8003ec6:	2302      	movs	r3, #2
 8003ec8:	e038      	b.n	8003f3c <HAL_ADC_Start+0x9c>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2250      	movs	r2, #80	; 0x50
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d007      	beq.n	8003eea <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003eda:	230f      	movs	r3, #15
 8003edc:	18fc      	adds	r4, r7, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f000 f99f 	bl	8004224 <ADC_Enable>
 8003ee6:	0003      	movs	r3, r0
 8003ee8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003eea:	230f      	movs	r3, #15
 8003eec:	18fb      	adds	r3, r7, r3
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d120      	bne.n	8003f36 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <HAL_ADC_Start+0xa4>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	2280      	movs	r2, #128	; 0x80
 8003efe:	0052      	lsls	r2, r2, #1
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2250      	movs	r2, #80	; 0x50
 8003f10:	2100      	movs	r1, #0
 8003f12:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	221c      	movs	r2, #28
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2104      	movs	r1, #4
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	e003      	b.n	8003f36 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003f2e:	230f      	movs	r3, #15
 8003f30:	18fb      	adds	r3, r7, r3
 8003f32:	2202      	movs	r2, #2
 8003f34:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8003f36:	230f      	movs	r3, #15
 8003f38:	18fb      	adds	r3, r7, r3
 8003f3a:	781b      	ldrb	r3, [r3, #0]
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b005      	add	sp, #20
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	fffff0fe 	.word	0xfffff0fe

08003f48 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003f48:	b5b0      	push	{r4, r5, r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f50:	230f      	movs	r3, #15
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2200      	movs	r2, #0
 8003f56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2250      	movs	r2, #80	; 0x50
 8003f5c:	5c9b      	ldrb	r3, [r3, r2]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_ADC_Stop+0x1e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e029      	b.n	8003fba <HAL_ADC_Stop+0x72>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2250      	movs	r2, #80	; 0x50
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003f6e:	250f      	movs	r5, #15
 8003f70:	197c      	adds	r4, r7, r5
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	0018      	movs	r0, r3
 8003f76:	f000 fa24 	bl	80043c2 <ADC_ConversionStop>
 8003f7a:	0003      	movs	r3, r0
 8003f7c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f7e:	197b      	adds	r3, r7, r5
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f86:	197c      	adds	r4, r7, r5
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 f9b2 	bl	80042f4 <ADC_Disable>
 8003f90:	0003      	movs	r3, r0
 8003f92:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f94:	197b      	adds	r3, r7, r5
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d107      	bne.n	8003fac <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_ADC_Stop+0x7c>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2250      	movs	r2, #80	; 0x50
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffefe 	.word	0xfffffefe

08003fc8 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d102      	bne.n	8003fe8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e014      	b.n	8004012 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d10b      	bne.n	800400e <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2250      	movs	r2, #80	; 0x50
 8004006:	2100      	movs	r1, #0
 8004008:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e072      	b.n	80040f4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800400e:	230c      	movs	r3, #12
 8004010:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004012:	f7ff fd87 	bl	8003b24 <HAL_GetTick>
 8004016:	0003      	movs	r3, r0
 8004018:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800401a:	e01f      	b.n	800405c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	d01c      	beq.n	800405c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d007      	beq.n	8004038 <HAL_ADC_PollForConversion+0x70>
 8004028:	f7ff fd7c 	bl	8003b24 <HAL_GetTick>
 800402c:	0002      	movs	r2, r0
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	429a      	cmp	r2, r3
 8004036:	d211      	bcs.n	800405c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	4013      	ands	r3, r2
 8004042:	d10b      	bne.n	800405c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004048:	2204      	movs	r2, #4
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2250      	movs	r2, #80	; 0x50
 8004054:	2100      	movs	r1, #0
 8004056:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e04b      	b.n	80040f4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4013      	ands	r3, r2
 8004066:	d0d9      	beq.n	800401c <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406c:	2280      	movs	r2, #128	; 0x80
 800406e:	0092      	lsls	r2, r2, #2
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	23c0      	movs	r3, #192	; 0xc0
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d12e      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2220      	movs	r2, #32
 8004088:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800408a:	2b00      	cmp	r3, #0
 800408c:	d129      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2208      	movs	r2, #8
 8004096:	4013      	ands	r3, r2
 8004098:	2b08      	cmp	r3, #8
 800409a:	d122      	bne.n	80040e2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2204      	movs	r2, #4
 80040a4:	4013      	ands	r3, r2
 80040a6:	d110      	bne.n	80040ca <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	210c      	movs	r1, #12
 80040b4:	438a      	bics	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040bc:	4a0f      	ldr	r2, [pc, #60]	; (80040fc <HAL_ADC_PollForConversion+0x134>)
 80040be:	4013      	ands	r3, r2
 80040c0:	2201      	movs	r2, #1
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
 80040c8:	e00b      	b.n	80040e2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	2220      	movs	r2, #32
 80040d0:	431a      	orrs	r2, r3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	2201      	movs	r2, #1
 80040dc:	431a      	orrs	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	699b      	ldr	r3, [r3, #24]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d103      	bne.n	80040f2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	220c      	movs	r2, #12
 80040f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	fffffefe 	.word	0xfffffefe

08004100 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b082      	sub	sp, #8
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800410e:	0018      	movs	r0, r3
 8004110:	46bd      	mov	sp, r7
 8004112:	b002      	add	sp, #8
 8004114:	bd80      	pop	{r7, pc}
	...

08004118 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2250      	movs	r2, #80	; 0x50
 8004126:	5c9b      	ldrb	r3, [r3, r2]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d101      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x18>
 800412c:	2302      	movs	r3, #2
 800412e:	e06c      	b.n	800420a <HAL_ADC_ConfigChannel+0xf2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2250      	movs	r2, #80	; 0x50
 8004134:	2101      	movs	r1, #1
 8004136:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2204      	movs	r2, #4
 8004140:	4013      	ands	r3, r2
 8004142:	d00b      	beq.n	800415c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2220      	movs	r2, #32
 800414a:	431a      	orrs	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2250      	movs	r2, #80	; 0x50
 8004154:	2100      	movs	r1, #0
 8004156:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e056      	b.n	800420a <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	4a2c      	ldr	r2, [pc, #176]	; (8004214 <HAL_ADC_ConfigChannel+0xfc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d028      	beq.n	80041b8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	035b      	lsls	r3, r3, #13
 8004172:	0b5a      	lsrs	r2, r3, #13
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	2380      	movs	r3, #128	; 0x80
 8004182:	02db      	lsls	r3, r3, #11
 8004184:	4013      	ands	r3, r2
 8004186:	d009      	beq.n	800419c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	0409      	lsls	r1, r1, #16
 8004192:	430a      	orrs	r2, r1
 8004194:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8004196:	200a      	movs	r0, #10
 8004198:	f000 f960 	bl	800445c <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	2380      	movs	r3, #128	; 0x80
 80041a2:	029b      	lsls	r3, r3, #10
 80041a4:	4013      	ands	r3, r2
 80041a6:	d02b      	beq.n	8004200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041ae:	2180      	movs	r1, #128	; 0x80
 80041b0:	03c9      	lsls	r1, r1, #15
 80041b2:	430a      	orrs	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	e023      	b.n	8004200 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	035b      	lsls	r3, r3, #13
 80041c4:	0b5b      	lsrs	r3, r3, #13
 80041c6:	43d9      	mvns	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	400a      	ands	r2, r1
 80041ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	02db      	lsls	r3, r3, #11
 80041d8:	4013      	ands	r3, r2
 80041da:	d005      	beq.n	80041e8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	4b0d      	ldr	r3, [pc, #52]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041e2:	490e      	ldr	r1, [pc, #56]	; (800421c <HAL_ADC_ConfigChannel+0x104>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	; 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d005      	beq.n	8004200 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80041f4:	4b08      	ldr	r3, [pc, #32]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <HAL_ADC_ConfigChannel+0x100>)
 80041fa:	4909      	ldr	r1, [pc, #36]	; (8004220 <HAL_ADC_ConfigChannel+0x108>)
 80041fc:	400a      	ands	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2250      	movs	r2, #80	; 0x50
 8004204:	2100      	movs	r1, #0
 8004206:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	0018      	movs	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	b002      	add	sp, #8
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	00001001 	.word	0x00001001
 8004218:	40012708 	.word	0x40012708
 800421c:	ff7fffff 	.word	0xff7fffff
 8004220:	ffbfffff 	.word	0xffbfffff

08004224 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2203      	movs	r2, #3
 8004238:	4013      	ands	r3, r2
 800423a:	2b01      	cmp	r3, #1
 800423c:	d108      	bne.n	8004250 <ADC_Enable+0x2c>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2201      	movs	r2, #1
 8004246:	4013      	ands	r3, r2
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <ADC_Enable+0x2c>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <ADC_Enable+0x2e>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d146      	bne.n	80042e4 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	4a24      	ldr	r2, [pc, #144]	; (80042f0 <ADC_Enable+0xcc>)
 800425e:	4013      	ands	r3, r2
 8004260:	d00d      	beq.n	800427e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	2210      	movs	r2, #16
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	2201      	movs	r2, #1
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e033      	b.n	80042e6 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2101      	movs	r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800428e:	2001      	movs	r0, #1
 8004290:	f000 f8e4 	bl	800445c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004294:	f7ff fc46 	bl	8003b24 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800429c:	e01b      	b.n	80042d6 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800429e:	f7ff fc41 	bl	8003b24 <HAL_GetTick>
 80042a2:	0002      	movs	r2, r0
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b0a      	cmp	r3, #10
 80042aa:	d914      	bls.n	80042d6 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2201      	movs	r2, #1
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d00d      	beq.n	80042d6 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042be:	2210      	movs	r2, #16
 80042c0:	431a      	orrs	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ca:	2201      	movs	r2, #1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e007      	b.n	80042e6 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2201      	movs	r2, #1
 80042de:	4013      	ands	r3, r2
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d1dc      	bne.n	800429e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	0018      	movs	r0, r3
 80042e8:	46bd      	mov	sp, r7
 80042ea:	b004      	add	sp, #16
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	80000017 	.word	0x80000017

080042f4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2203      	movs	r2, #3
 8004308:	4013      	ands	r3, r2
 800430a:	2b01      	cmp	r3, #1
 800430c:	d108      	bne.n	8004320 <ADC_Disable+0x2c>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2201      	movs	r2, #1
 8004316:	4013      	ands	r3, r2
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <ADC_Disable+0x2c>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <ADC_Disable+0x2e>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d048      	beq.n	80043b8 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2205      	movs	r2, #5
 800432e:	4013      	ands	r3, r2
 8004330:	2b01      	cmp	r3, #1
 8004332:	d110      	bne.n	8004356 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2102      	movs	r1, #2
 8004340:	430a      	orrs	r2, r1
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2203      	movs	r2, #3
 800434a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800434c:	f7ff fbea 	bl	8003b24 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004354:	e029      	b.n	80043aa <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	2210      	movs	r2, #16
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004366:	2201      	movs	r2, #1
 8004368:	431a      	orrs	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e023      	b.n	80043ba <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004372:	f7ff fbd7 	bl	8003b24 <HAL_GetTick>
 8004376:	0002      	movs	r2, r0
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	2b0a      	cmp	r3, #10
 800437e:	d914      	bls.n	80043aa <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2201      	movs	r2, #1
 8004388:	4013      	ands	r3, r2
 800438a:	2b01      	cmp	r3, #1
 800438c:	d10d      	bne.n	80043aa <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	2210      	movs	r2, #16
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439e:	2201      	movs	r2, #1
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e007      	b.n	80043ba <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2201      	movs	r2, #1
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d0dc      	beq.n	8004372 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	2204      	movs	r2, #4
 80043d6:	4013      	ands	r3, r2
 80043d8:	d03a      	beq.n	8004450 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2204      	movs	r2, #4
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d10d      	bne.n	8004404 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2202      	movs	r2, #2
 80043f0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80043f2:	d107      	bne.n	8004404 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2110      	movs	r1, #16
 8004400:	430a      	orrs	r2, r1
 8004402:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004404:	f7ff fb8e 	bl	8003b24 <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800440c:	e01a      	b.n	8004444 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800440e:	f7ff fb89 	bl	8003b24 <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b0a      	cmp	r3, #10
 800441a:	d913      	bls.n	8004444 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2204      	movs	r2, #4
 8004424:	4013      	ands	r3, r2
 8004426:	d00d      	beq.n	8004444 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	2210      	movs	r2, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	2201      	movs	r2, #1
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e006      	b.n	8004452 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2204      	movs	r2, #4
 800444c:	4013      	ands	r3, r2
 800444e:	d1de      	bne.n	800440e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b004      	add	sp, #16
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <ADC_DelayMicroSecond+0x38>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	490b      	ldr	r1, [pc, #44]	; (8004498 <ADC_DelayMicroSecond+0x3c>)
 800446a:	0018      	movs	r0, r3
 800446c:	f7fb fe4c 	bl	8000108 <__udivsi3>
 8004470:	0003      	movs	r3, r0
 8004472:	001a      	movs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4353      	muls	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800447a:	e002      	b.n	8004482 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3b01      	subs	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f9      	bne.n	800447c <ADC_DelayMicroSecond+0x20>
  }
}
 8004488:	46c0      	nop			; (mov r8, r8)
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	46bd      	mov	sp, r7
 800448e:	b004      	add	sp, #16
 8004490:	bd80      	pop	{r7, pc}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	20000008 	.word	0x20000008
 8004498:	000f4240 	.word	0x000f4240

0800449c <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a6:	2317      	movs	r3, #23
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	2200      	movs	r2, #0
 80044ac:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0U; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2250      	movs	r2, #80	; 0x50
 80044ba:	5c9b      	ldrb	r3, [r3, r2]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_ADCEx_Calibration_Start+0x28>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e083      	b.n	80045cc <HAL_ADCEx_Calibration_Start+0x130>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2250      	movs	r2, #80	; 0x50
 80044c8:	2101      	movs	r1, #1
 80044ca:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2203      	movs	r2, #3
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d108      	bne.n	80044ec <HAL_ADCEx_Calibration_Start+0x50>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2201      	movs	r2, #1
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_ADCEx_Calibration_Start+0x50>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <HAL_ADCEx_Calibration_Start+0x52>
 80044ec:	2300      	movs	r3, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d15b      	bne.n	80045aa <HAL_ADCEx_Calibration_Start+0x10e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f6:	4a37      	ldr	r2, [pc, #220]	; (80045d4 <HAL_ADCEx_Calibration_Start+0x138>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	2202      	movs	r2, #2
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2203      	movs	r2, #3
 800450a:	4013      	ands	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68da      	ldr	r2, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2103      	movs	r1, #3
 800451a:	438a      	bics	r2, r1
 800451c:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689a      	ldr	r2, [r3, #8]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	0609      	lsls	r1, r1, #24
 800452c:	430a      	orrs	r2, r1
 800452e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8004530:	f7ff faf8 	bl	8003b24 <HAL_GetTick>
 8004534:	0003      	movs	r3, r0
 8004536:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004538:	e01d      	b.n	8004576 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if ((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800453a:	f7ff faf3 	bl	8003b24 <HAL_GetTick>
 800453e:	0002      	movs	r2, r0
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b0a      	cmp	r3, #10
 8004546:	d916      	bls.n	8004576 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	0fdb      	lsrs	r3, r3, #31
 8004550:	07da      	lsls	r2, r3, #31
 8004552:	2380      	movs	r3, #128	; 0x80
 8004554:	061b      	lsls	r3, r3, #24
 8004556:	429a      	cmp	r2, r3
 8004558:	d10d      	bne.n	8004576 <HAL_ADCEx_Calibration_Start+0xda>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455e:	2212      	movs	r2, #18
 8004560:	4393      	bics	r3, r2
 8004562:	2210      	movs	r2, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2250      	movs	r2, #80	; 0x50
 800456e:	2100      	movs	r1, #0
 8004570:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e02a      	b.n	80045cc <HAL_ADCEx_Calibration_Start+0x130>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	0fdb      	lsrs	r3, r3, #31
 800457e:	07da      	lsls	r2, r3, #31
 8004580:	2380      	movs	r3, #128	; 0x80
 8004582:	061b      	lsls	r3, r3, #24
 8004584:	429a      	cmp	r2, r3
 8004586:	d0d8      	beq.n	800453a <HAL_ADCEx_Calibration_Start+0x9e>
        }
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68d9      	ldr	r1, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	430a      	orrs	r2, r1
 8004596:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800459c:	2203      	movs	r2, #3
 800459e:	4393      	bics	r3, r2
 80045a0:	2201      	movs	r2, #1
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	655a      	str	r2, [r3, #84]	; 0x54
 80045a8:	e009      	b.n	80045be <HAL_ADCEx_Calibration_Start+0x122>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	2220      	movs	r2, #32
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045b6:	2317      	movs	r3, #23
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2250      	movs	r2, #80	; 0x50
 80045c2:	2100      	movs	r1, #0
 80045c4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80045c6:	2317      	movs	r3, #23
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	781b      	ldrb	r3, [r3, #0]
}
 80045cc:	0018      	movs	r0, r3
 80045ce:	46bd      	mov	sp, r7
 80045d0:	b006      	add	sp, #24
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	fffffefd 	.word	0xfffffefd

080045d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	0002      	movs	r2, r0
 80045e0:	1dfb      	adds	r3, r7, #7
 80045e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	1dfb      	adds	r3, r7, #7
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b7f      	cmp	r3, #127	; 0x7f
 80045ea:	d809      	bhi.n	8004600 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045ec:	1dfb      	adds	r3, r7, #7
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	001a      	movs	r2, r3
 80045f2:	231f      	movs	r3, #31
 80045f4:	401a      	ands	r2, r3
 80045f6:	4b04      	ldr	r3, [pc, #16]	; (8004608 <__NVIC_EnableIRQ+0x30>)
 80045f8:	2101      	movs	r1, #1
 80045fa:	4091      	lsls	r1, r2
 80045fc:	000a      	movs	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
  }
}
 8004600:	46c0      	nop			; (mov r8, r8)
 8004602:	46bd      	mov	sp, r7
 8004604:	b002      	add	sp, #8
 8004606:	bd80      	pop	{r7, pc}
 8004608:	e000e100 	.word	0xe000e100

0800460c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800460c:	b590      	push	{r4, r7, lr}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	0002      	movs	r2, r0
 8004614:	6039      	str	r1, [r7, #0]
 8004616:	1dfb      	adds	r3, r7, #7
 8004618:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800461a:	1dfb      	adds	r3, r7, #7
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b7f      	cmp	r3, #127	; 0x7f
 8004620:	d828      	bhi.n	8004674 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004622:	4a2f      	ldr	r2, [pc, #188]	; (80046e0 <__NVIC_SetPriority+0xd4>)
 8004624:	1dfb      	adds	r3, r7, #7
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	b25b      	sxtb	r3, r3
 800462a:	089b      	lsrs	r3, r3, #2
 800462c:	33c0      	adds	r3, #192	; 0xc0
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	589b      	ldr	r3, [r3, r2]
 8004632:	1dfa      	adds	r2, r7, #7
 8004634:	7812      	ldrb	r2, [r2, #0]
 8004636:	0011      	movs	r1, r2
 8004638:	2203      	movs	r2, #3
 800463a:	400a      	ands	r2, r1
 800463c:	00d2      	lsls	r2, r2, #3
 800463e:	21ff      	movs	r1, #255	; 0xff
 8004640:	4091      	lsls	r1, r2
 8004642:	000a      	movs	r2, r1
 8004644:	43d2      	mvns	r2, r2
 8004646:	401a      	ands	r2, r3
 8004648:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	22ff      	movs	r2, #255	; 0xff
 8004650:	401a      	ands	r2, r3
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	0018      	movs	r0, r3
 8004658:	2303      	movs	r3, #3
 800465a:	4003      	ands	r3, r0
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004660:	481f      	ldr	r0, [pc, #124]	; (80046e0 <__NVIC_SetPriority+0xd4>)
 8004662:	1dfb      	adds	r3, r7, #7
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	b25b      	sxtb	r3, r3
 8004668:	089b      	lsrs	r3, r3, #2
 800466a:	430a      	orrs	r2, r1
 800466c:	33c0      	adds	r3, #192	; 0xc0
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004672:	e031      	b.n	80046d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004674:	4a1b      	ldr	r2, [pc, #108]	; (80046e4 <__NVIC_SetPriority+0xd8>)
 8004676:	1dfb      	adds	r3, r7, #7
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	0019      	movs	r1, r3
 800467c:	230f      	movs	r3, #15
 800467e:	400b      	ands	r3, r1
 8004680:	3b08      	subs	r3, #8
 8004682:	089b      	lsrs	r3, r3, #2
 8004684:	3306      	adds	r3, #6
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	3304      	adds	r3, #4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	1dfa      	adds	r2, r7, #7
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	0011      	movs	r1, r2
 8004694:	2203      	movs	r2, #3
 8004696:	400a      	ands	r2, r1
 8004698:	00d2      	lsls	r2, r2, #3
 800469a:	21ff      	movs	r1, #255	; 0xff
 800469c:	4091      	lsls	r1, r2
 800469e:	000a      	movs	r2, r1
 80046a0:	43d2      	mvns	r2, r2
 80046a2:	401a      	ands	r2, r3
 80046a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	22ff      	movs	r2, #255	; 0xff
 80046ac:	401a      	ands	r2, r3
 80046ae:	1dfb      	adds	r3, r7, #7
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	2303      	movs	r3, #3
 80046b6:	4003      	ands	r3, r0
 80046b8:	00db      	lsls	r3, r3, #3
 80046ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046bc:	4809      	ldr	r0, [pc, #36]	; (80046e4 <__NVIC_SetPriority+0xd8>)
 80046be:	1dfb      	adds	r3, r7, #7
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	001c      	movs	r4, r3
 80046c4:	230f      	movs	r3, #15
 80046c6:	4023      	ands	r3, r4
 80046c8:	3b08      	subs	r3, #8
 80046ca:	089b      	lsrs	r3, r3, #2
 80046cc:	430a      	orrs	r2, r1
 80046ce:	3306      	adds	r3, #6
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	18c3      	adds	r3, r0, r3
 80046d4:	3304      	adds	r3, #4
 80046d6:	601a      	str	r2, [r3, #0]
}
 80046d8:	46c0      	nop			; (mov r8, r8)
 80046da:	46bd      	mov	sp, r7
 80046dc:	b003      	add	sp, #12
 80046de:	bd90      	pop	{r4, r7, pc}
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1e5a      	subs	r2, r3, #1
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	045b      	lsls	r3, r3, #17
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d301      	bcc.n	8004700 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046fc:	2301      	movs	r3, #1
 80046fe:	e010      	b.n	8004722 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004700:	4b0a      	ldr	r3, [pc, #40]	; (800472c <SysTick_Config+0x44>)
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	3a01      	subs	r2, #1
 8004706:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004708:	2301      	movs	r3, #1
 800470a:	425b      	negs	r3, r3
 800470c:	2103      	movs	r1, #3
 800470e:	0018      	movs	r0, r3
 8004710:	f7ff ff7c 	bl	800460c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004714:	4b05      	ldr	r3, [pc, #20]	; (800472c <SysTick_Config+0x44>)
 8004716:	2200      	movs	r2, #0
 8004718:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800471a:	4b04      	ldr	r3, [pc, #16]	; (800472c <SysTick_Config+0x44>)
 800471c:	2207      	movs	r2, #7
 800471e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004720:	2300      	movs	r3, #0
}
 8004722:	0018      	movs	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	b002      	add	sp, #8
 8004728:	bd80      	pop	{r7, pc}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	e000e010 	.word	0xe000e010

08004730 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	60b9      	str	r1, [r7, #8]
 8004738:	607a      	str	r2, [r7, #4]
 800473a:	210f      	movs	r1, #15
 800473c:	187b      	adds	r3, r7, r1
 800473e:	1c02      	adds	r2, r0, #0
 8004740:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	187b      	adds	r3, r7, r1
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	b25b      	sxtb	r3, r3
 800474a:	0011      	movs	r1, r2
 800474c:	0018      	movs	r0, r3
 800474e:	f7ff ff5d 	bl	800460c <__NVIC_SetPriority>
}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	46bd      	mov	sp, r7
 8004756:	b004      	add	sp, #16
 8004758:	bd80      	pop	{r7, pc}

0800475a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b082      	sub	sp, #8
 800475e:	af00      	add	r7, sp, #0
 8004760:	0002      	movs	r2, r0
 8004762:	1dfb      	adds	r3, r7, #7
 8004764:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004766:	1dfb      	adds	r3, r7, #7
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b25b      	sxtb	r3, r3
 800476c:	0018      	movs	r0, r3
 800476e:	f7ff ff33 	bl	80045d8 <__NVIC_EnableIRQ>
}
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	46bd      	mov	sp, r7
 8004776:	b002      	add	sp, #8
 8004778:	bd80      	pop	{r7, pc}

0800477a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477a:	b580      	push	{r7, lr}
 800477c:	b082      	sub	sp, #8
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f7ff ffaf 	bl	80046e8 <SysTick_Config>
 800478a:	0003      	movs	r3, r0
}
 800478c:	0018      	movs	r0, r3
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e061      	b.n	800486a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a32      	ldr	r2, [pc, #200]	; (8004874 <HAL_DMA_Init+0xe0>)
 80047ac:	4694      	mov	ip, r2
 80047ae:	4463      	add	r3, ip
 80047b0:	2114      	movs	r1, #20
 80047b2:	0018      	movs	r0, r3
 80047b4:	f7fb fca8 	bl	8000108 <__udivsi3>
 80047b8:	0003      	movs	r3, r0
 80047ba:	009a      	lsls	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_DMA_Init+0xe4>)
 80047c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2225      	movs	r2, #37	; 0x25
 80047ca:	2102      	movs	r1, #2
 80047cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4a28      	ldr	r2, [pc, #160]	; (800487c <HAL_DMA_Init+0xe8>)
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80047e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	2380      	movs	r3, #128	; 0x80
 800481a:	01db      	lsls	r3, r3, #7
 800481c:	429a      	cmp	r2, r3
 800481e:	d018      	beq.n	8004852 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004820:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_DMA_Init+0xec>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004828:	211c      	movs	r1, #28
 800482a:	400b      	ands	r3, r1
 800482c:	210f      	movs	r1, #15
 800482e:	4099      	lsls	r1, r3
 8004830:	000b      	movs	r3, r1
 8004832:	43d9      	mvns	r1, r3
 8004834:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_DMA_Init+0xec>)
 8004836:	400a      	ands	r2, r1
 8004838:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800483a:	4b11      	ldr	r3, [pc, #68]	; (8004880 <HAL_DMA_Init+0xec>)
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685a      	ldr	r2, [r3, #4]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	201c      	movs	r0, #28
 8004848:	4003      	ands	r3, r0
 800484a:	409a      	lsls	r2, r3
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <HAL_DMA_Init+0xec>)
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2225      	movs	r2, #37	; 0x25
 800485c:	2101      	movs	r1, #1
 800485e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	; 0x24
 8004864:	2100      	movs	r1, #0
 8004866:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	0018      	movs	r0, r3
 800486c:	46bd      	mov	sp, r7
 800486e:	b004      	add	sp, #16
 8004870:	bd80      	pop	{r7, pc}
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	bffdfff8 	.word	0xbffdfff8
 8004878:	40020000 	.word	0x40020000
 800487c:	ffff800f 	.word	0xffff800f
 8004880:	400200a8 	.word	0x400200a8

08004884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a0:	221c      	movs	r2, #28
 80048a2:	4013      	ands	r3, r2
 80048a4:	2204      	movs	r2, #4
 80048a6:	409a      	lsls	r2, r3
 80048a8:	0013      	movs	r3, r2
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	d026      	beq.n	80048fe <HAL_DMA_IRQHandler+0x7a>
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	2204      	movs	r2, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d022      	beq.n	80048fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2220      	movs	r2, #32
 80048c0:	4013      	ands	r3, r2
 80048c2:	d107      	bne.n	80048d4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2104      	movs	r1, #4
 80048d0:	438a      	bics	r2, r1
 80048d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	221c      	movs	r2, #28
 80048da:	401a      	ands	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e0:	2104      	movs	r1, #4
 80048e2:	4091      	lsls	r1, r2
 80048e4:	000a      	movs	r2, r1
 80048e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d100      	bne.n	80048f2 <HAL_DMA_IRQHandler+0x6e>
 80048f0:	e071      	b.n	80049d6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	0010      	movs	r0, r2
 80048fa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80048fc:	e06b      	b.n	80049d6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004902:	221c      	movs	r2, #28
 8004904:	4013      	ands	r3, r2
 8004906:	2202      	movs	r2, #2
 8004908:	409a      	lsls	r2, r3
 800490a:	0013      	movs	r3, r2
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	4013      	ands	r3, r2
 8004910:	d02d      	beq.n	800496e <HAL_DMA_IRQHandler+0xea>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2202      	movs	r2, #2
 8004916:	4013      	ands	r3, r2
 8004918:	d029      	beq.n	800496e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2220      	movs	r2, #32
 8004922:	4013      	ands	r3, r2
 8004924:	d10b      	bne.n	800493e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	210a      	movs	r1, #10
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2225      	movs	r2, #37	; 0x25
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	221c      	movs	r2, #28
 8004944:	401a      	ands	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	2102      	movs	r1, #2
 800494c:	4091      	lsls	r1, r2
 800494e:	000a      	movs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2224      	movs	r2, #36	; 0x24
 8004956:	2100      	movs	r1, #0
 8004958:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d039      	beq.n	80049d6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	0010      	movs	r0, r2
 800496a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800496c:	e033      	b.n	80049d6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	221c      	movs	r2, #28
 8004974:	4013      	ands	r3, r2
 8004976:	2208      	movs	r2, #8
 8004978:	409a      	lsls	r2, r3
 800497a:	0013      	movs	r3, r2
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4013      	ands	r3, r2
 8004980:	d02a      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x154>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	2208      	movs	r2, #8
 8004986:	4013      	ands	r3, r2
 8004988:	d026      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	210e      	movs	r1, #14
 8004996:	438a      	bics	r2, r1
 8004998:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	221c      	movs	r2, #28
 80049a0:	401a      	ands	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a6:	2101      	movs	r1, #1
 80049a8:	4091      	lsls	r1, r2
 80049aa:	000a      	movs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2225      	movs	r2, #37	; 0x25
 80049b8:	2101      	movs	r1, #1
 80049ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2224      	movs	r2, #36	; 0x24
 80049c0:	2100      	movs	r1, #0
 80049c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	0010      	movs	r0, r2
 80049d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	46c0      	nop			; (mov r8, r8)
}
 80049da:	46bd      	mov	sp, r7
 80049dc:	b004      	add	sp, #16
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80049f2:	2300      	movs	r3, #0
 80049f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80049f6:	e149      	b.n	8004c8c <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4091      	lsls	r1, r2
 8004a02:	000a      	movs	r2, r1
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d100      	bne.n	8004a10 <HAL_GPIO_Init+0x30>
 8004a0e:	e13a      	b.n	8004c86 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2203      	movs	r2, #3
 8004a22:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d130      	bne.n	8004a8a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	409a      	lsls	r2, r3
 8004a36:	0013      	movs	r3, r2
 8004a38:	43da      	mvns	r2, r3
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	0013      	movs	r3, r2
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
 8004a64:	0013      	movs	r3, r2
 8004a66:	43da      	mvns	r2, r3
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	2201      	movs	r2, #1
 8004a76:	401a      	ands	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	409a      	lsls	r2, r3
 8004a7c:	0013      	movs	r3, r2
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2203      	movs	r2, #3
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d017      	beq.n	8004ac6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	409a      	lsls	r2, r3
 8004aa4:	0013      	movs	r3, r2
 8004aa6:	43da      	mvns	r2, r3
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	0013      	movs	r3, r2
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2203      	movs	r2, #3
 8004acc:	4013      	ands	r3, r2
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d123      	bne.n	8004b1a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	08da      	lsrs	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3208      	adds	r2, #8
 8004ada:	0092      	lsls	r2, r2, #2
 8004adc:	58d3      	ldr	r3, [r2, r3]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2207      	movs	r2, #7
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	409a      	lsls	r2, r3
 8004aec:	0013      	movs	r3, r2
 8004aee:	43da      	mvns	r2, r3
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	2107      	movs	r1, #7
 8004afe:	400b      	ands	r3, r1
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	409a      	lsls	r2, r3
 8004b04:	0013      	movs	r3, r2
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	0092      	lsls	r2, r2, #2
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	409a      	lsls	r2, r3
 8004b28:	0013      	movs	r3, r2
 8004b2a:	43da      	mvns	r2, r3
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2203      	movs	r2, #3
 8004b38:	401a      	ands	r2, r3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	0013      	movs	r3, r2
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	23c0      	movs	r3, #192	; 0xc0
 8004b54:	029b      	lsls	r3, r3, #10
 8004b56:	4013      	ands	r3, r2
 8004b58:	d100      	bne.n	8004b5c <HAL_GPIO_Init+0x17c>
 8004b5a:	e094      	b.n	8004c86 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b5c:	4b51      	ldr	r3, [pc, #324]	; (8004ca4 <HAL_GPIO_Init+0x2c4>)
 8004b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_GPIO_Init+0x2c4>)
 8004b62:	2101      	movs	r1, #1
 8004b64:	430a      	orrs	r2, r1
 8004b66:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b68:	4a4f      	ldr	r2, [pc, #316]	; (8004ca8 <HAL_GPIO_Init+0x2c8>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	3302      	adds	r3, #2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	589b      	ldr	r3, [r3, r2]
 8004b74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	220f      	movs	r2, #15
 8004b80:	409a      	lsls	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	43da      	mvns	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	23a0      	movs	r3, #160	; 0xa0
 8004b90:	05db      	lsls	r3, r3, #23
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d013      	beq.n	8004bbe <HAL_GPIO_Init+0x1de>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a44      	ldr	r2, [pc, #272]	; (8004cac <HAL_GPIO_Init+0x2cc>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00d      	beq.n	8004bba <HAL_GPIO_Init+0x1da>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a43      	ldr	r2, [pc, #268]	; (8004cb0 <HAL_GPIO_Init+0x2d0>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <HAL_GPIO_Init+0x1d6>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a42      	ldr	r2, [pc, #264]	; (8004cb4 <HAL_GPIO_Init+0x2d4>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d101      	bne.n	8004bb2 <HAL_GPIO_Init+0x1d2>
 8004bae:	2305      	movs	r3, #5
 8004bb0:	e006      	b.n	8004bc0 <HAL_GPIO_Init+0x1e0>
 8004bb2:	2306      	movs	r3, #6
 8004bb4:	e004      	b.n	8004bc0 <HAL_GPIO_Init+0x1e0>
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	e002      	b.n	8004bc0 <HAL_GPIO_Init+0x1e0>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e000      	b.n	8004bc0 <HAL_GPIO_Init+0x1e0>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	2103      	movs	r1, #3
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	0092      	lsls	r2, r2, #2
 8004bc8:	4093      	lsls	r3, r2
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bd0:	4935      	ldr	r1, [pc, #212]	; (8004ca8 <HAL_GPIO_Init+0x2c8>)
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	089b      	lsrs	r3, r3, #2
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bde:	4b36      	ldr	r3, [pc, #216]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	43da      	mvns	r2, r3
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	4013      	ands	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	685a      	ldr	r2, [r3, #4]
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	035b      	lsls	r3, r3, #13
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	d003      	beq.n	8004c02 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8004bfa:	693a      	ldr	r2, [r7, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c02:	4b2d      	ldr	r3, [pc, #180]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004c08:	4b2b      	ldr	r3, [pc, #172]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	43da      	mvns	r2, r3
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	4013      	ands	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	2380      	movs	r3, #128	; 0x80
 8004c1e:	039b      	lsls	r3, r3, #14
 8004c20:	4013      	ands	r3, r2
 8004c22:	d003      	beq.n	8004c2c <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c2c:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c2e:	693a      	ldr	r2, [r7, #16]
 8004c30:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004c32:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	4013      	ands	r3, r2
 8004c40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	2380      	movs	r3, #128	; 0x80
 8004c48:	029b      	lsls	r3, r3, #10
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	d003      	beq.n	8004c56 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c56:	4b18      	ldr	r3, [pc, #96]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c5c:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	43da      	mvns	r2, r3
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	025b      	lsls	r3, r3, #9
 8004c74:	4013      	ands	r3, r2
 8004c76:	d003      	beq.n	8004c80 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c80:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <HAL_GPIO_Init+0x2d8>)
 8004c82:	693a      	ldr	r2, [r7, #16]
 8004c84:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	40da      	lsrs	r2, r3
 8004c94:	1e13      	subs	r3, r2, #0
 8004c96:	d000      	beq.n	8004c9a <HAL_GPIO_Init+0x2ba>
 8004c98:	e6ae      	b.n	80049f8 <HAL_GPIO_Init+0x18>
  }
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46c0      	nop			; (mov r8, r8)
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b006      	add	sp, #24
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	50000400 	.word	0x50000400
 8004cb0:	50000800 	.word	0x50000800
 8004cb4:	50001c00 	.word	0x50001c00
 8004cb8:	40010400 	.word	0x40010400

08004cbc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	0008      	movs	r0, r1
 8004cc6:	0011      	movs	r1, r2
 8004cc8:	1cbb      	adds	r3, r7, #2
 8004cca:	1c02      	adds	r2, r0, #0
 8004ccc:	801a      	strh	r2, [r3, #0]
 8004cce:	1c7b      	adds	r3, r7, #1
 8004cd0:	1c0a      	adds	r2, r1, #0
 8004cd2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd4:	1c7b      	adds	r3, r7, #1
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d004      	beq.n	8004ce6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cdc:	1cbb      	adds	r3, r7, #2
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004ce4:	e003      	b.n	8004cee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004ce6:	1cbb      	adds	r3, r7, #2
 8004ce8:	881a      	ldrh	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b002      	add	sp, #8
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
 8004cfe:	000a      	movs	r2, r1
 8004d00:	1cbb      	adds	r3, r7, #2
 8004d02:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d0a:	1cbb      	adds	r3, r7, #2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4013      	ands	r3, r2
 8004d12:	041a      	lsls	r2, r3, #16
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	1cb9      	adds	r1, r7, #2
 8004d1a:	8809      	ldrh	r1, [r1, #0]
 8004d1c:	400b      	ands	r3, r1
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	619a      	str	r2, [r3, #24]
}
 8004d24:	46c0      	nop			; (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b004      	add	sp, #16
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	0002      	movs	r2, r0
 8004d34:	1dbb      	adds	r3, r7, #6
 8004d36:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004d3a:	695b      	ldr	r3, [r3, #20]
 8004d3c:	1dba      	adds	r2, r7, #6
 8004d3e:	8812      	ldrh	r2, [r2, #0]
 8004d40:	4013      	ands	r3, r2
 8004d42:	d008      	beq.n	8004d56 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d44:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004d46:	1dba      	adds	r2, r7, #6
 8004d48:	8812      	ldrh	r2, [r2, #0]
 8004d4a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d4c:	1dbb      	adds	r3, r7, #6
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f7fe f9ad 	bl	80030b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d56:	46c0      	nop			; (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b002      	add	sp, #8
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			; (mov r8, r8)
 8004d60:	40010400 	.word	0x40010400

08004d64 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	000a      	movs	r2, r1
 8004d6e:	1cfb      	adds	r3, r7, #3
 8004d70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004d76:	4b25      	ldr	r3, [pc, #148]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	2380      	movs	r3, #128	; 0x80
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4013      	ands	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004d82:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <HAL_PWR_EnterSTOPMode+0xac>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	2201      	movs	r2, #1
 8004d88:	4013      	ands	r3, r2
 8004d8a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d008      	beq.n	8004da4 <HAL_PWR_EnterSTOPMode+0x40>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004d98:	4b1c      	ldr	r3, [pc, #112]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004d9e:	491d      	ldr	r1, [pc, #116]	; (8004e14 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004da0:	400a      	ands	r2, r1
 8004da2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004da4:	4b19      	ldr	r3, [pc, #100]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	2203      	movs	r2, #3
 8004dae:	4393      	bics	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004dba:	4b14      	ldr	r3, [pc, #80]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004dc2:	691a      	ldr	r2, [r3, #16]
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004dc6:	2104      	movs	r1, #4
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004dcc:	1cfb      	adds	r3, r7, #3
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004dd4:	bf30      	wfi
 8004dd6:	e002      	b.n	8004dde <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004dd8:	bf40      	sev
    __WFE();
 8004dda:	bf20      	wfe
    __WFE();
 8004ddc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004dde:	4b0e      	ldr	r3, [pc, #56]	; (8004e18 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004de0:	691a      	ldr	r2, [r3, #16]
 8004de2:	4b0d      	ldr	r3, [pc, #52]	; (8004e18 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004de4:	2104      	movs	r1, #4
 8004de6:	438a      	bics	r2, r1
 8004de8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d009      	beq.n	8004e04 <HAL_PWR_EnterSTOPMode+0xa0>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004df6:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004dfc:	2180      	movs	r1, #128	; 0x80
 8004dfe:	0089      	lsls	r1, r1, #2
 8004e00:	430a      	orrs	r2, r1
 8004e02:	601a      	str	r2, [r3, #0]
  }
}
 8004e04:	46c0      	nop			; (mov r8, r8)
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b006      	add	sp, #24
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40007000 	.word	0x40007000
 8004e10:	40010000 	.word	0x40010000
 8004e14:	fffffdff 	.word	0xfffffdff
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e1c:	b5b0      	push	{r4, r5, r7, lr}
 8004e1e:	b08a      	sub	sp, #40	; 0x28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d102      	bne.n	8004e30 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	f000 fb6c 	bl	8005508 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e30:	4bc8      	ldr	r3, [pc, #800]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	220c      	movs	r2, #12
 8004e36:	4013      	ands	r3, r2
 8004e38:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e3a:	4bc6      	ldr	r3, [pc, #792]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	025b      	lsls	r3, r3, #9
 8004e42:	4013      	ands	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	d100      	bne.n	8004e52 <HAL_RCC_OscConfig+0x36>
 8004e50:	e07d      	b.n	8004f4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d007      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d112      	bne.n	8004e84 <HAL_RCC_OscConfig+0x68>
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	2380      	movs	r3, #128	; 0x80
 8004e62:	025b      	lsls	r3, r3, #9
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d10d      	bne.n	8004e84 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e68:	4bba      	ldr	r3, [pc, #744]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	029b      	lsls	r3, r3, #10
 8004e70:	4013      	ands	r3, r2
 8004e72:	d100      	bne.n	8004e76 <HAL_RCC_OscConfig+0x5a>
 8004e74:	e06a      	b.n	8004f4c <HAL_RCC_OscConfig+0x130>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d166      	bne.n	8004f4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f000 fb42 	bl	8005508 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	2380      	movs	r3, #128	; 0x80
 8004e8a:	025b      	lsls	r3, r3, #9
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x84>
 8004e90:	4bb0      	ldr	r3, [pc, #704]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4baf      	ldr	r3, [pc, #700]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004e96:	2180      	movs	r1, #128	; 0x80
 8004e98:	0249      	lsls	r1, r1, #9
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]
 8004e9e:	e027      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	23a0      	movs	r3, #160	; 0xa0
 8004ea6:	02db      	lsls	r3, r3, #11
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d10e      	bne.n	8004eca <HAL_RCC_OscConfig+0xae>
 8004eac:	4ba9      	ldr	r3, [pc, #676]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	4ba8      	ldr	r3, [pc, #672]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004eb2:	2180      	movs	r1, #128	; 0x80
 8004eb4:	02c9      	lsls	r1, r1, #11
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4ba5      	ldr	r3, [pc, #660]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ec0:	2180      	movs	r1, #128	; 0x80
 8004ec2:	0249      	lsls	r1, r1, #9
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e012      	b.n	8004ef0 <HAL_RCC_OscConfig+0xd4>
 8004eca:	4ba2      	ldr	r3, [pc, #648]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4ba1      	ldr	r3, [pc, #644]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ed0:	49a1      	ldr	r1, [pc, #644]	; (8005158 <HAL_RCC_OscConfig+0x33c>)
 8004ed2:	400a      	ands	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
 8004ed6:	4b9f      	ldr	r3, [pc, #636]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	025b      	lsls	r3, r3, #9
 8004ede:	4013      	ands	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4b9b      	ldr	r3, [pc, #620]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b9a      	ldr	r3, [pc, #616]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004eea:	499c      	ldr	r1, [pc, #624]	; (800515c <HAL_RCC_OscConfig+0x340>)
 8004eec:	400a      	ands	r2, r1
 8004eee:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d014      	beq.n	8004f22 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef8:	f7fe fe14 	bl	8003b24 <HAL_GetTick>
 8004efc:	0003      	movs	r3, r0
 8004efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f00:	e008      	b.n	8004f14 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f02:	f7fe fe0f 	bl	8003b24 <HAL_GetTick>
 8004f06:	0002      	movs	r2, r0
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	2b64      	cmp	r3, #100	; 0x64
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e2f9      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f14:	4b8f      	ldr	r3, [pc, #572]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	029b      	lsls	r3, r3, #10
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	d0f0      	beq.n	8004f02 <HAL_RCC_OscConfig+0xe6>
 8004f20:	e015      	b.n	8004f4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fe fdff 	bl	8003b24 <HAL_GetTick>
 8004f26:	0003      	movs	r3, r0
 8004f28:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f2a:	e008      	b.n	8004f3e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f2c:	f7fe fdfa 	bl	8003b24 <HAL_GetTick>
 8004f30:	0002      	movs	r2, r0
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	2b64      	cmp	r3, #100	; 0x64
 8004f38:	d901      	bls.n	8004f3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e2e4      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004f3e:	4b85      	ldr	r3, [pc, #532]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	4013      	ands	r3, r2
 8004f48:	d1f0      	bne.n	8004f2c <HAL_RCC_OscConfig+0x110>
 8004f4a:	e000      	b.n	8004f4e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f4c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2202      	movs	r2, #2
 8004f54:	4013      	ands	r3, r2
 8004f56:	d100      	bne.n	8004f5a <HAL_RCC_OscConfig+0x13e>
 8004f58:	e099      	b.n	800508e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f62:	2220      	movs	r2, #32
 8004f64:	4013      	ands	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004f68:	4b7a      	ldr	r3, [pc, #488]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4b79      	ldr	r3, [pc, #484]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004f6e:	2120      	movs	r1, #32
 8004f70:	430a      	orrs	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f76:	2220      	movs	r2, #32
 8004f78:	4393      	bics	r3, r2
 8004f7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	2b0c      	cmp	r3, #12
 8004f86:	d13e      	bne.n	8005006 <HAL_RCC_OscConfig+0x1ea>
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d13b      	bne.n	8005006 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004f8e:	4b71      	ldr	r3, [pc, #452]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2204      	movs	r2, #4
 8004f94:	4013      	ands	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x186>
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d101      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e2b2      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa2:	4b6c      	ldr	r3, [pc, #432]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4a6e      	ldr	r2, [pc, #440]	; (8005160 <HAL_RCC_OscConfig+0x344>)
 8004fa8:	4013      	ands	r3, r2
 8004faa:	0019      	movs	r1, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	021a      	lsls	r2, r3, #8
 8004fb2:	4b68      	ldr	r3, [pc, #416]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004fb8:	4b66      	ldr	r3, [pc, #408]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2209      	movs	r2, #9
 8004fbe:	4393      	bics	r3, r2
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	4b64      	ldr	r3, [pc, #400]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fca:	f000 fbeb 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8004fce:	0001      	movs	r1, r0
 8004fd0:	4b60      	ldr	r3, [pc, #384]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	091b      	lsrs	r3, r3, #4
 8004fd6:	220f      	movs	r2, #15
 8004fd8:	4013      	ands	r3, r2
 8004fda:	4a62      	ldr	r2, [pc, #392]	; (8005164 <HAL_RCC_OscConfig+0x348>)
 8004fdc:	5cd3      	ldrb	r3, [r2, r3]
 8004fde:	000a      	movs	r2, r1
 8004fe0:	40da      	lsrs	r2, r3
 8004fe2:	4b61      	ldr	r3, [pc, #388]	; (8005168 <HAL_RCC_OscConfig+0x34c>)
 8004fe4:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004fe6:	4b61      	ldr	r3, [pc, #388]	; (800516c <HAL_RCC_OscConfig+0x350>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2513      	movs	r5, #19
 8004fec:	197c      	adds	r4, r7, r5
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f7fe fd52 	bl	8003a98 <HAL_InitTick>
 8004ff4:	0003      	movs	r3, r0
 8004ff6:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004ff8:	197b      	adds	r3, r7, r5
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d046      	beq.n	800508e <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8005000:	197b      	adds	r3, r7, r5
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	e280      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d027      	beq.n	800505c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800500c:	4b51      	ldr	r3, [pc, #324]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2209      	movs	r2, #9
 8005012:	4393      	bics	r3, r2
 8005014:	0019      	movs	r1, r3
 8005016:	4b4f      	ldr	r3, [pc, #316]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501a:	430a      	orrs	r2, r1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501e:	f7fe fd81 	bl	8003b24 <HAL_GetTick>
 8005022:	0003      	movs	r3, r0
 8005024:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005028:	f7fe fd7c 	bl	8003b24 <HAL_GetTick>
 800502c:	0002      	movs	r2, r0
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e266      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800503a:	4b46      	ldr	r3, [pc, #280]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2204      	movs	r2, #4
 8005040:	4013      	ands	r3, r2
 8005042:	d0f1      	beq.n	8005028 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b43      	ldr	r3, [pc, #268]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	4a45      	ldr	r2, [pc, #276]	; (8005160 <HAL_RCC_OscConfig+0x344>)
 800504a:	4013      	ands	r3, r2
 800504c:	0019      	movs	r1, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	021a      	lsls	r2, r3, #8
 8005054:	4b3f      	ldr	r3, [pc, #252]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
 800505a:	e018      	b.n	800508e <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505c:	4b3d      	ldr	r3, [pc, #244]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b3c      	ldr	r3, [pc, #240]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005062:	2101      	movs	r1, #1
 8005064:	438a      	bics	r2, r1
 8005066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fe fd5c 	bl	8003b24 <HAL_GetTick>
 800506c:	0003      	movs	r3, r0
 800506e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005070:	e008      	b.n	8005084 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005072:	f7fe fd57 	bl	8003b24 <HAL_GetTick>
 8005076:	0002      	movs	r2, r0
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b02      	cmp	r3, #2
 800507e:	d901      	bls.n	8005084 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e241      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005084:	4b33      	ldr	r3, [pc, #204]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2204      	movs	r2, #4
 800508a:	4013      	ands	r3, r2
 800508c:	d1f1      	bne.n	8005072 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	4013      	ands	r3, r2
 8005096:	d100      	bne.n	800509a <HAL_RCC_OscConfig+0x27e>
 8005098:	e0a1      	b.n	80051de <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d140      	bne.n	8005122 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050a0:	4b2c      	ldr	r3, [pc, #176]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4013      	ands	r3, r2
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_OscConfig+0x29c>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e227      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050b8:	4b26      	ldr	r3, [pc, #152]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <HAL_RCC_OscConfig+0x354>)
 80050be:	4013      	ands	r3, r2
 80050c0:	0019      	movs	r1, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	4b23      	ldr	r3, [pc, #140]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050c8:	430a      	orrs	r2, r1
 80050ca:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050cc:	4b21      	ldr	r3, [pc, #132]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	0a19      	lsrs	r1, r3, #8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	061a      	lsls	r2, r3, #24
 80050da:	4b1e      	ldr	r3, [pc, #120]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	0b5b      	lsrs	r3, r3, #13
 80050e6:	3301      	adds	r3, #1
 80050e8:	2280      	movs	r2, #128	; 0x80
 80050ea:	0212      	lsls	r2, r2, #8
 80050ec:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80050ee:	4b19      	ldr	r3, [pc, #100]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	210f      	movs	r1, #15
 80050f6:	400b      	ands	r3, r1
 80050f8:	491a      	ldr	r1, [pc, #104]	; (8005164 <HAL_RCC_OscConfig+0x348>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80050fe:	4b1a      	ldr	r3, [pc, #104]	; (8005168 <HAL_RCC_OscConfig+0x34c>)
 8005100:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005102:	4b1a      	ldr	r3, [pc, #104]	; (800516c <HAL_RCC_OscConfig+0x350>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2513      	movs	r5, #19
 8005108:	197c      	adds	r4, r7, r5
 800510a:	0018      	movs	r0, r3
 800510c:	f7fe fcc4 	bl	8003a98 <HAL_InitTick>
 8005110:	0003      	movs	r3, r0
 8005112:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005114:	197b      	adds	r3, r7, r5
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d060      	beq.n	80051de <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800511c:	197b      	adds	r3, r7, r5
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	e1f2      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d03f      	beq.n	80051aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800512a:	4b0a      	ldr	r3, [pc, #40]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	4b09      	ldr	r3, [pc, #36]	; (8005154 <HAL_RCC_OscConfig+0x338>)
 8005130:	2180      	movs	r1, #128	; 0x80
 8005132:	0049      	lsls	r1, r1, #1
 8005134:	430a      	orrs	r2, r1
 8005136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005138:	f7fe fcf4 	bl	8003b24 <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005140:	e018      	b.n	8005174 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005142:	f7fe fcef 	bl	8003b24 <HAL_GetTick>
 8005146:	0002      	movs	r2, r0
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	2b02      	cmp	r3, #2
 800514e:	d911      	bls.n	8005174 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e1d9      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
 8005154:	40021000 	.word	0x40021000
 8005158:	fffeffff 	.word	0xfffeffff
 800515c:	fffbffff 	.word	0xfffbffff
 8005160:	ffffe0ff 	.word	0xffffe0ff
 8005164:	08005c64 	.word	0x08005c64
 8005168:	20000008 	.word	0x20000008
 800516c:	2000000c 	.word	0x2000000c
 8005170:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005174:	4bc9      	ldr	r3, [pc, #804]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	2380      	movs	r3, #128	; 0x80
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	4013      	ands	r3, r2
 800517e:	d0e0      	beq.n	8005142 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005180:	4bc6      	ldr	r3, [pc, #792]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	4ac6      	ldr	r2, [pc, #792]	; (80054a0 <HAL_RCC_OscConfig+0x684>)
 8005186:	4013      	ands	r3, r2
 8005188:	0019      	movs	r1, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1a      	ldr	r2, [r3, #32]
 800518e:	4bc3      	ldr	r3, [pc, #780]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005194:	4bc1      	ldr	r3, [pc, #772]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	021b      	lsls	r3, r3, #8
 800519a:	0a19      	lsrs	r1, r3, #8
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	061a      	lsls	r2, r3, #24
 80051a2:	4bbe      	ldr	r3, [pc, #760]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051a4:	430a      	orrs	r2, r1
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	e019      	b.n	80051de <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051aa:	4bbc      	ldr	r3, [pc, #752]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4bbb      	ldr	r3, [pc, #748]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051b0:	49bc      	ldr	r1, [pc, #752]	; (80054a4 <HAL_RCC_OscConfig+0x688>)
 80051b2:	400a      	ands	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b6:	f7fe fcb5 	bl	8003b24 <HAL_GetTick>
 80051ba:	0003      	movs	r3, r0
 80051bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051c0:	f7fe fcb0 	bl	8003b24 <HAL_GetTick>
 80051c4:	0002      	movs	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e19a      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80051d2:	4bb2      	ldr	r3, [pc, #712]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	; 0x80
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4013      	ands	r3, r2
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2208      	movs	r2, #8
 80051e4:	4013      	ands	r3, r2
 80051e6:	d036      	beq.n	8005256 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d019      	beq.n	8005224 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f0:	4baa      	ldr	r3, [pc, #680]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051f4:	4ba9      	ldr	r3, [pc, #676]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	430a      	orrs	r2, r1
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fc:	f7fe fc92 	bl	8003b24 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005204:	e008      	b.n	8005218 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005206:	f7fe fc8d 	bl	8003b24 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d901      	bls.n	8005218 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e177      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005218:	4ba0      	ldr	r3, [pc, #640]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521c:	2202      	movs	r2, #2
 800521e:	4013      	ands	r3, r2
 8005220:	d0f1      	beq.n	8005206 <HAL_RCC_OscConfig+0x3ea>
 8005222:	e018      	b.n	8005256 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005224:	4b9d      	ldr	r3, [pc, #628]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005226:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005228:	4b9c      	ldr	r3, [pc, #624]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800522a:	2101      	movs	r1, #1
 800522c:	438a      	bics	r2, r1
 800522e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005230:	f7fe fc78 	bl	8003b24 <HAL_GetTick>
 8005234:	0003      	movs	r3, r0
 8005236:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800523a:	f7fe fc73 	bl	8003b24 <HAL_GetTick>
 800523e:	0002      	movs	r2, r0
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e15d      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800524c:	4b93      	ldr	r3, [pc, #588]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	2202      	movs	r2, #2
 8005252:	4013      	ands	r3, r2
 8005254:	d1f1      	bne.n	800523a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2204      	movs	r2, #4
 800525c:	4013      	ands	r3, r2
 800525e:	d100      	bne.n	8005262 <HAL_RCC_OscConfig+0x446>
 8005260:	e0ae      	b.n	80053c0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2023      	movs	r0, #35	; 0x23
 8005264:	183b      	adds	r3, r7, r0
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b8c      	ldr	r3, [pc, #560]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800526c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	055b      	lsls	r3, r3, #21
 8005272:	4013      	ands	r3, r2
 8005274:	d109      	bne.n	800528a <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	4b89      	ldr	r3, [pc, #548]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527a:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	0549      	lsls	r1, r1, #21
 8005280:	430a      	orrs	r2, r1
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005284:	183b      	adds	r3, r7, r0
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528a:	4b87      	ldr	r3, [pc, #540]	; (80054a8 <HAL_RCC_OscConfig+0x68c>)
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	2380      	movs	r3, #128	; 0x80
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4013      	ands	r3, r2
 8005294:	d11a      	bne.n	80052cc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005296:	4b84      	ldr	r3, [pc, #528]	; (80054a8 <HAL_RCC_OscConfig+0x68c>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	4b83      	ldr	r3, [pc, #524]	; (80054a8 <HAL_RCC_OscConfig+0x68c>)
 800529c:	2180      	movs	r1, #128	; 0x80
 800529e:	0049      	lsls	r1, r1, #1
 80052a0:	430a      	orrs	r2, r1
 80052a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a4:	f7fe fc3e 	bl	8003b24 <HAL_GetTick>
 80052a8:	0003      	movs	r3, r0
 80052aa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fe fc39 	bl	8003b24 <HAL_GetTick>
 80052b2:	0002      	movs	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	; 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e123      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b79      	ldr	r3, [pc, #484]	; (80054a8 <HAL_RCC_OscConfig+0x68c>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	2380      	movs	r3, #128	; 0x80
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	4013      	ands	r3, r2
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	005b      	lsls	r3, r3, #1
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x4cc>
 80052d8:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80052da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052dc:	4b6f      	ldr	r3, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	0049      	lsls	r1, r1, #1
 80052e2:	430a      	orrs	r2, r1
 80052e4:	651a      	str	r2, [r3, #80]	; 0x50
 80052e6:	e031      	b.n	800534c <HAL_RCC_OscConfig+0x530>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x4ee>
 80052f0:	4b6a      	ldr	r3, [pc, #424]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80052f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052f4:	4b69      	ldr	r3, [pc, #420]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80052f6:	496b      	ldr	r1, [pc, #428]	; (80054a4 <HAL_RCC_OscConfig+0x688>)
 80052f8:	400a      	ands	r2, r1
 80052fa:	651a      	str	r2, [r3, #80]	; 0x50
 80052fc:	4b67      	ldr	r3, [pc, #412]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80052fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005300:	4b66      	ldr	r3, [pc, #408]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005302:	496a      	ldr	r1, [pc, #424]	; (80054ac <HAL_RCC_OscConfig+0x690>)
 8005304:	400a      	ands	r2, r1
 8005306:	651a      	str	r2, [r3, #80]	; 0x50
 8005308:	e020      	b.n	800534c <HAL_RCC_OscConfig+0x530>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	23a0      	movs	r3, #160	; 0xa0
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	429a      	cmp	r2, r3
 8005314:	d10e      	bne.n	8005334 <HAL_RCC_OscConfig+0x518>
 8005316:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005318:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800531a:	4b60      	ldr	r3, [pc, #384]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800531c:	2180      	movs	r1, #128	; 0x80
 800531e:	00c9      	lsls	r1, r1, #3
 8005320:	430a      	orrs	r2, r1
 8005322:	651a      	str	r2, [r3, #80]	; 0x50
 8005324:	4b5d      	ldr	r3, [pc, #372]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005326:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005328:	4b5c      	ldr	r3, [pc, #368]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	0049      	lsls	r1, r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	651a      	str	r2, [r3, #80]	; 0x50
 8005332:	e00b      	b.n	800534c <HAL_RCC_OscConfig+0x530>
 8005334:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005336:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005338:	4b58      	ldr	r3, [pc, #352]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800533a:	495a      	ldr	r1, [pc, #360]	; (80054a4 <HAL_RCC_OscConfig+0x688>)
 800533c:	400a      	ands	r2, r1
 800533e:	651a      	str	r2, [r3, #80]	; 0x50
 8005340:	4b56      	ldr	r3, [pc, #344]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005342:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005344:	4b55      	ldr	r3, [pc, #340]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005346:	4959      	ldr	r1, [pc, #356]	; (80054ac <HAL_RCC_OscConfig+0x690>)
 8005348:	400a      	ands	r2, r1
 800534a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d015      	beq.n	8005380 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005354:	f7fe fbe6 	bl	8003b24 <HAL_GetTick>
 8005358:	0003      	movs	r3, r0
 800535a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800535c:	e009      	b.n	8005372 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535e:	f7fe fbe1 	bl	8003b24 <HAL_GetTick>
 8005362:	0002      	movs	r2, r0
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	4a51      	ldr	r2, [pc, #324]	; (80054b0 <HAL_RCC_OscConfig+0x694>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d901      	bls.n	8005372 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e0ca      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005372:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005376:	2380      	movs	r3, #128	; 0x80
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	4013      	ands	r3, r2
 800537c:	d0ef      	beq.n	800535e <HAL_RCC_OscConfig+0x542>
 800537e:	e014      	b.n	80053aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005380:	f7fe fbd0 	bl	8003b24 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005388:	e009      	b.n	800539e <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fe fbcb 	bl	8003b24 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	4a46      	ldr	r2, [pc, #280]	; (80054b0 <HAL_RCC_OscConfig+0x694>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e0b4      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800539e:	4b3f      	ldr	r3, [pc, #252]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80053a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	4013      	ands	r3, r2
 80053a8:	d1ef      	bne.n	800538a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80053aa:	2323      	movs	r3, #35	; 0x23
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d105      	bne.n	80053c0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053b4:	4b39      	ldr	r3, [pc, #228]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80053b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b8:	4b38      	ldr	r3, [pc, #224]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80053ba:	493e      	ldr	r1, [pc, #248]	; (80054b4 <HAL_RCC_OscConfig+0x698>)
 80053bc:	400a      	ands	r2, r1
 80053be:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d100      	bne.n	80053ca <HAL_RCC_OscConfig+0x5ae>
 80053c8:	e09d      	b.n	8005506 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	2b0c      	cmp	r3, #12
 80053ce:	d100      	bne.n	80053d2 <HAL_RCC_OscConfig+0x5b6>
 80053d0:	e076      	b.n	80054c0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d145      	bne.n	8005466 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053da:	4b30      	ldr	r3, [pc, #192]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b2f      	ldr	r3, [pc, #188]	; (800549c <HAL_RCC_OscConfig+0x680>)
 80053e0:	4935      	ldr	r1, [pc, #212]	; (80054b8 <HAL_RCC_OscConfig+0x69c>)
 80053e2:	400a      	ands	r2, r1
 80053e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e6:	f7fe fb9d 	bl	8003b24 <HAL_GetTick>
 80053ea:	0003      	movs	r3, r0
 80053ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f0:	f7fe fb98 	bl	8003b24 <HAL_GetTick>
 80053f4:	0002      	movs	r2, r0
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e082      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005402:	4b26      	ldr	r3, [pc, #152]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	2380      	movs	r3, #128	; 0x80
 8005408:	049b      	lsls	r3, r3, #18
 800540a:	4013      	ands	r3, r2
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800540e:	4b23      	ldr	r3, [pc, #140]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4a2a      	ldr	r2, [pc, #168]	; (80054bc <HAL_RCC_OscConfig+0x6a0>)
 8005414:	4013      	ands	r3, r2
 8005416:	0019      	movs	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005420:	431a      	orrs	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	431a      	orrs	r2, r3
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800542a:	430a      	orrs	r2, r1
 800542c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542e:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4b1a      	ldr	r3, [pc, #104]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	0449      	lsls	r1, r1, #17
 8005438:	430a      	orrs	r2, r1
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fe fb72 	bl	8003b24 <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005446:	f7fe fb6d 	bl	8003b24 <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e057      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005458:	4b10      	ldr	r3, [pc, #64]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	2380      	movs	r3, #128	; 0x80
 800545e:	049b      	lsls	r3, r3, #18
 8005460:	4013      	ands	r3, r2
 8005462:	d0f0      	beq.n	8005446 <HAL_RCC_OscConfig+0x62a>
 8005464:	e04f      	b.n	8005506 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005466:	4b0d      	ldr	r3, [pc, #52]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b0c      	ldr	r3, [pc, #48]	; (800549c <HAL_RCC_OscConfig+0x680>)
 800546c:	4912      	ldr	r1, [pc, #72]	; (80054b8 <HAL_RCC_OscConfig+0x69c>)
 800546e:	400a      	ands	r2, r1
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fe fb57 	bl	8003b24 <HAL_GetTick>
 8005476:	0003      	movs	r3, r0
 8005478:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fe fb52 	bl	8003b24 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e03c      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800548e:	4b03      	ldr	r3, [pc, #12]	; (800549c <HAL_RCC_OscConfig+0x680>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	2380      	movs	r3, #128	; 0x80
 8005494:	049b      	lsls	r3, r3, #18
 8005496:	4013      	ands	r3, r2
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x660>
 800549a:	e034      	b.n	8005506 <HAL_RCC_OscConfig+0x6ea>
 800549c:	40021000 	.word	0x40021000
 80054a0:	ffff1fff 	.word	0xffff1fff
 80054a4:	fffffeff 	.word	0xfffffeff
 80054a8:	40007000 	.word	0x40007000
 80054ac:	fffffbff 	.word	0xfffffbff
 80054b0:	00001388 	.word	0x00001388
 80054b4:	efffffff 	.word	0xefffffff
 80054b8:	feffffff 	.word	0xfeffffff
 80054bc:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e01d      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054cc:	4b10      	ldr	r3, [pc, #64]	; (8005510 <HAL_RCC_OscConfig+0x6f4>)
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	025b      	lsls	r3, r3, #9
 80054d8:	401a      	ands	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054de:	429a      	cmp	r2, r3
 80054e0:	d10f      	bne.n	8005502 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80054e2:	69ba      	ldr	r2, [r7, #24]
 80054e4:	23f0      	movs	r3, #240	; 0xf0
 80054e6:	039b      	lsls	r3, r3, #14
 80054e8:	401a      	ands	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d107      	bne.n	8005502 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	23c0      	movs	r3, #192	; 0xc0
 80054f6:	041b      	lsls	r3, r3, #16
 80054f8:	401a      	ands	r2, r3
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80054fe:	429a      	cmp	r2, r3
 8005500:	d001      	beq.n	8005506 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e000      	b.n	8005508 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8005506:	2300      	movs	r3, #0
}
 8005508:	0018      	movs	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	b00a      	add	sp, #40	; 0x28
 800550e:	bdb0      	pop	{r4, r5, r7, pc}
 8005510:	40021000 	.word	0x40021000

08005514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005514:	b5b0      	push	{r4, r5, r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e128      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005528:	4b96      	ldr	r3, [pc, #600]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2201      	movs	r2, #1
 800552e:	4013      	ands	r3, r2
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d91e      	bls.n	8005574 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005536:	4b93      	ldr	r3, [pc, #588]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2201      	movs	r2, #1
 800553c:	4393      	bics	r3, r2
 800553e:	0019      	movs	r1, r3
 8005540:	4b90      	ldr	r3, [pc, #576]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	430a      	orrs	r2, r1
 8005546:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005548:	f7fe faec 	bl	8003b24 <HAL_GetTick>
 800554c:	0003      	movs	r3, r0
 800554e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005550:	e009      	b.n	8005566 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005552:	f7fe fae7 	bl	8003b24 <HAL_GetTick>
 8005556:	0002      	movs	r2, r0
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	4a8a      	ldr	r2, [pc, #552]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e109      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005566:	4b87      	ldr	r3, [pc, #540]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2201      	movs	r2, #1
 800556c:	4013      	ands	r3, r2
 800556e:	683a      	ldr	r2, [r7, #0]
 8005570:	429a      	cmp	r2, r3
 8005572:	d1ee      	bne.n	8005552 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	2202      	movs	r2, #2
 800557a:	4013      	ands	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800557e:	4b83      	ldr	r3, [pc, #524]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	22f0      	movs	r2, #240	; 0xf0
 8005584:	4393      	bics	r3, r2
 8005586:	0019      	movs	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	4b7f      	ldr	r3, [pc, #508]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 800558e:	430a      	orrs	r2, r1
 8005590:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	4013      	ands	r3, r2
 800559a:	d100      	bne.n	800559e <HAL_RCC_ClockConfig+0x8a>
 800559c:	e089      	b.n	80056b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d107      	bne.n	80055b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055a6:	4b79      	ldr	r3, [pc, #484]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	2380      	movs	r3, #128	; 0x80
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	4013      	ands	r3, r2
 80055b0:	d120      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e0e1      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d107      	bne.n	80055ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055be:	4b73      	ldr	r3, [pc, #460]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	049b      	lsls	r3, r3, #18
 80055c6:	4013      	ands	r3, r2
 80055c8:	d114      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e0d5      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d106      	bne.n	80055e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055d6:	4b6d      	ldr	r3, [pc, #436]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2204      	movs	r2, #4
 80055dc:	4013      	ands	r3, r2
 80055de:	d109      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e0ca      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055e4:	4b69      	ldr	r3, [pc, #420]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	2380      	movs	r3, #128	; 0x80
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4013      	ands	r3, r2
 80055ee:	d101      	bne.n	80055f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e0c2      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055f4:	4b65      	ldr	r3, [pc, #404]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	2203      	movs	r2, #3
 80055fa:	4393      	bics	r3, r2
 80055fc:	0019      	movs	r1, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	4b62      	ldr	r3, [pc, #392]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005604:	430a      	orrs	r2, r1
 8005606:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005608:	f7fe fa8c 	bl	8003b24 <HAL_GetTick>
 800560c:	0003      	movs	r3, r0
 800560e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	2b02      	cmp	r3, #2
 8005616:	d111      	bne.n	800563c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005618:	e009      	b.n	800562e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561a:	f7fe fa83 	bl	8003b24 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a58      	ldr	r2, [pc, #352]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e0a5      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800562e:	4b57      	ldr	r3, [pc, #348]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	220c      	movs	r2, #12
 8005634:	4013      	ands	r3, r2
 8005636:	2b08      	cmp	r3, #8
 8005638:	d1ef      	bne.n	800561a <HAL_RCC_ClockConfig+0x106>
 800563a:	e03a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	2b03      	cmp	r3, #3
 8005642:	d111      	bne.n	8005668 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005644:	e009      	b.n	800565a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005646:	f7fe fa6d 	bl	8003b24 <HAL_GetTick>
 800564a:	0002      	movs	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	1ad3      	subs	r3, r2, r3
 8005650:	4a4d      	ldr	r2, [pc, #308]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d901      	bls.n	800565a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e08f      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800565a:	4b4c      	ldr	r3, [pc, #304]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	220c      	movs	r2, #12
 8005660:	4013      	ands	r3, r2
 8005662:	2b0c      	cmp	r3, #12
 8005664:	d1ef      	bne.n	8005646 <HAL_RCC_ClockConfig+0x132>
 8005666:	e024      	b.n	80056b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d11b      	bne.n	80056a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005670:	e009      	b.n	8005686 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005672:	f7fe fa57 	bl	8003b24 <HAL_GetTick>
 8005676:	0002      	movs	r2, r0
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	4a42      	ldr	r2, [pc, #264]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d901      	bls.n	8005686 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e079      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005686:	4b41      	ldr	r3, [pc, #260]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	220c      	movs	r2, #12
 800568c:	4013      	ands	r3, r2
 800568e:	2b04      	cmp	r3, #4
 8005690:	d1ef      	bne.n	8005672 <HAL_RCC_ClockConfig+0x15e>
 8005692:	e00e      	b.n	80056b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005694:	f7fe fa46 	bl	8003b24 <HAL_GetTick>
 8005698:	0002      	movs	r2, r0
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a3a      	ldr	r2, [pc, #232]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e068      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80056a8:	4b38      	ldr	r3, [pc, #224]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	220c      	movs	r2, #12
 80056ae:	4013      	ands	r3, r2
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056b2:	4b34      	ldr	r3, [pc, #208]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d21e      	bcs.n	80056fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c0:	4b30      	ldr	r3, [pc, #192]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2201      	movs	r2, #1
 80056c6:	4393      	bics	r3, r2
 80056c8:	0019      	movs	r1, r3
 80056ca:	4b2e      	ldr	r3, [pc, #184]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056d2:	f7fe fa27 	bl	8003b24 <HAL_GetTick>
 80056d6:	0003      	movs	r3, r0
 80056d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	e009      	b.n	80056f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fe fa22 	bl	8003b24 <HAL_GetTick>
 80056e0:	0002      	movs	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	4a28      	ldr	r2, [pc, #160]	; (8005788 <HAL_RCC_ClockConfig+0x274>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e044      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f0:	4b24      	ldr	r3, [pc, #144]	; (8005784 <HAL_RCC_ClockConfig+0x270>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d1ee      	bne.n	80056dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2204      	movs	r2, #4
 8005704:	4013      	ands	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005708:	4b20      	ldr	r3, [pc, #128]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4a20      	ldr	r2, [pc, #128]	; (8005790 <HAL_RCC_ClockConfig+0x27c>)
 800570e:	4013      	ands	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005718:	430a      	orrs	r2, r1
 800571a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2208      	movs	r2, #8
 8005722:	4013      	ands	r3, r2
 8005724:	d00a      	beq.n	800573c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005726:	4b19      	ldr	r3, [pc, #100]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <HAL_RCC_ClockConfig+0x280>)
 800572c:	4013      	ands	r3, r2
 800572e:	0019      	movs	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	00da      	lsls	r2, r3, #3
 8005736:	4b15      	ldr	r3, [pc, #84]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005738:	430a      	orrs	r2, r1
 800573a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800573c:	f000 f832 	bl	80057a4 <HAL_RCC_GetSysClockFreq>
 8005740:	0001      	movs	r1, r0
 8005742:	4b12      	ldr	r3, [pc, #72]	; (800578c <HAL_RCC_ClockConfig+0x278>)
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	091b      	lsrs	r3, r3, #4
 8005748:	220f      	movs	r2, #15
 800574a:	4013      	ands	r3, r2
 800574c:	4a12      	ldr	r2, [pc, #72]	; (8005798 <HAL_RCC_ClockConfig+0x284>)
 800574e:	5cd3      	ldrb	r3, [r2, r3]
 8005750:	000a      	movs	r2, r1
 8005752:	40da      	lsrs	r2, r3
 8005754:	4b11      	ldr	r3, [pc, #68]	; (800579c <HAL_RCC_ClockConfig+0x288>)
 8005756:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005758:	4b11      	ldr	r3, [pc, #68]	; (80057a0 <HAL_RCC_ClockConfig+0x28c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	250b      	movs	r5, #11
 800575e:	197c      	adds	r4, r7, r5
 8005760:	0018      	movs	r0, r3
 8005762:	f7fe f999 	bl	8003a98 <HAL_InitTick>
 8005766:	0003      	movs	r3, r0
 8005768:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800576a:	197b      	adds	r3, r7, r5
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005772:	197b      	adds	r3, r7, r5
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	e000      	b.n	800577a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	0018      	movs	r0, r3
 800577c:	46bd      	mov	sp, r7
 800577e:	b004      	add	sp, #16
 8005780:	bdb0      	pop	{r4, r5, r7, pc}
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	40022000 	.word	0x40022000
 8005788:	00001388 	.word	0x00001388
 800578c:	40021000 	.word	0x40021000
 8005790:	fffff8ff 	.word	0xfffff8ff
 8005794:	ffffc7ff 	.word	0xffffc7ff
 8005798:	08005c64 	.word	0x08005c64
 800579c:	20000008 	.word	0x20000008
 80057a0:	2000000c 	.word	0x2000000c

080057a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057a4:	b5b0      	push	{r4, r5, r7, lr}
 80057a6:	b08e      	sub	sp, #56	; 0x38
 80057a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80057aa:	4b4c      	ldr	r3, [pc, #304]	; (80058dc <HAL_RCC_GetSysClockFreq+0x138>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b2:	230c      	movs	r3, #12
 80057b4:	4013      	ands	r3, r2
 80057b6:	2b0c      	cmp	r3, #12
 80057b8:	d014      	beq.n	80057e4 <HAL_RCC_GetSysClockFreq+0x40>
 80057ba:	d900      	bls.n	80057be <HAL_RCC_GetSysClockFreq+0x1a>
 80057bc:	e07b      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x112>
 80057be:	2b04      	cmp	r3, #4
 80057c0:	d002      	beq.n	80057c8 <HAL_RCC_GetSysClockFreq+0x24>
 80057c2:	2b08      	cmp	r3, #8
 80057c4:	d00b      	beq.n	80057de <HAL_RCC_GetSysClockFreq+0x3a>
 80057c6:	e076      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80057c8:	4b44      	ldr	r3, [pc, #272]	; (80058dc <HAL_RCC_GetSysClockFreq+0x138>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2210      	movs	r2, #16
 80057ce:	4013      	ands	r3, r2
 80057d0:	d002      	beq.n	80057d8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80057d2:	4b43      	ldr	r3, [pc, #268]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80057d6:	e07c      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80057d8:	4b42      	ldr	r3, [pc, #264]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80057da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057dc:	e079      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057de:	4b42      	ldr	r3, [pc, #264]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x144>)
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80057e2:	e076      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	0c9a      	lsrs	r2, r3, #18
 80057e8:	230f      	movs	r3, #15
 80057ea:	401a      	ands	r2, r3
 80057ec:	4b3f      	ldr	r3, [pc, #252]	; (80058ec <HAL_RCC_GetSysClockFreq+0x148>)
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80057f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f4:	0d9a      	lsrs	r2, r3, #22
 80057f6:	2303      	movs	r3, #3
 80057f8:	4013      	ands	r3, r2
 80057fa:	3301      	adds	r3, #1
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057fe:	4b37      	ldr	r3, [pc, #220]	; (80058dc <HAL_RCC_GetSysClockFreq+0x138>)
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	2380      	movs	r3, #128	; 0x80
 8005804:	025b      	lsls	r3, r3, #9
 8005806:	4013      	ands	r3, r2
 8005808:	d01a      	beq.n	8005840 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	61bb      	str	r3, [r7, #24]
 800580e:	2300      	movs	r3, #0
 8005810:	61fb      	str	r3, [r7, #28]
 8005812:	4a35      	ldr	r2, [pc, #212]	; (80058e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005814:	2300      	movs	r3, #0
 8005816:	69b8      	ldr	r0, [r7, #24]
 8005818:	69f9      	ldr	r1, [r7, #28]
 800581a:	f7fa fd99 	bl	8000350 <__aeabi_lmul>
 800581e:	0002      	movs	r2, r0
 8005820:	000b      	movs	r3, r1
 8005822:	0010      	movs	r0, r2
 8005824:	0019      	movs	r1, r3
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	f7fa fd6d 	bl	8000310 <__aeabi_uldivmod>
 8005836:	0002      	movs	r2, r0
 8005838:	000b      	movs	r3, r1
 800583a:	0013      	movs	r3, r2
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
 800583e:	e037      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005840:	4b26      	ldr	r3, [pc, #152]	; (80058dc <HAL_RCC_GetSysClockFreq+0x138>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2210      	movs	r2, #16
 8005846:	4013      	ands	r3, r2
 8005848:	d01a      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800584a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	2300      	movs	r3, #0
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005854:	2300      	movs	r3, #0
 8005856:	68b8      	ldr	r0, [r7, #8]
 8005858:	68f9      	ldr	r1, [r7, #12]
 800585a:	f7fa fd79 	bl	8000350 <__aeabi_lmul>
 800585e:	0002      	movs	r2, r0
 8005860:	000b      	movs	r3, r1
 8005862:	0010      	movs	r0, r2
 8005864:	0019      	movs	r1, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	603b      	str	r3, [r7, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	607b      	str	r3, [r7, #4]
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f7fa fd4d 	bl	8000310 <__aeabi_uldivmod>
 8005876:	0002      	movs	r2, r0
 8005878:	000b      	movs	r3, r1
 800587a:	0013      	movs	r3, r2
 800587c:	637b      	str	r3, [r7, #52]	; 0x34
 800587e:	e017      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005882:	0018      	movs	r0, r3
 8005884:	2300      	movs	r3, #0
 8005886:	0019      	movs	r1, r3
 8005888:	4a16      	ldr	r2, [pc, #88]	; (80058e4 <HAL_RCC_GetSysClockFreq+0x140>)
 800588a:	2300      	movs	r3, #0
 800588c:	f7fa fd60 	bl	8000350 <__aeabi_lmul>
 8005890:	0002      	movs	r2, r0
 8005892:	000b      	movs	r3, r1
 8005894:	0010      	movs	r0, r2
 8005896:	0019      	movs	r1, r3
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	001c      	movs	r4, r3
 800589c:	2300      	movs	r3, #0
 800589e:	001d      	movs	r5, r3
 80058a0:	0022      	movs	r2, r4
 80058a2:	002b      	movs	r3, r5
 80058a4:	f7fa fd34 	bl	8000310 <__aeabi_uldivmod>
 80058a8:	0002      	movs	r2, r0
 80058aa:	000b      	movs	r3, r1
 80058ac:	0013      	movs	r3, r2
 80058ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80058b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058b4:	e00d      	b.n	80058d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80058b6:	4b09      	ldr	r3, [pc, #36]	; (80058dc <HAL_RCC_GetSysClockFreq+0x138>)
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	0b5b      	lsrs	r3, r3, #13
 80058bc:	2207      	movs	r2, #7
 80058be:	4013      	ands	r3, r2
 80058c0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80058c2:	6a3b      	ldr	r3, [r7, #32]
 80058c4:	3301      	adds	r3, #1
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	0212      	lsls	r2, r2, #8
 80058ca:	409a      	lsls	r2, r3
 80058cc:	0013      	movs	r3, r2
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80058d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	b00e      	add	sp, #56	; 0x38
 80058da:	bdb0      	pop	{r4, r5, r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	003d0900 	.word	0x003d0900
 80058e4:	00f42400 	.word	0x00f42400
 80058e8:	007a1200 	.word	0x007a1200
 80058ec:	08005c74 	.word	0x08005c74

080058f0 <memset>:
 80058f0:	0003      	movs	r3, r0
 80058f2:	1882      	adds	r2, r0, r2
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d100      	bne.n	80058fa <memset+0xa>
 80058f8:	4770      	bx	lr
 80058fa:	7019      	strb	r1, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	e7f9      	b.n	80058f4 <memset+0x4>

08005900 <__errno>:
 8005900:	4b01      	ldr	r3, [pc, #4]	; (8005908 <__errno+0x8>)
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	4770      	bx	lr
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	20000060 	.word	0x20000060

0800590c <__libc_init_array>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2600      	movs	r6, #0
 8005910:	4c0c      	ldr	r4, [pc, #48]	; (8005944 <__libc_init_array+0x38>)
 8005912:	4d0d      	ldr	r5, [pc, #52]	; (8005948 <__libc_init_array+0x3c>)
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	42a6      	cmp	r6, r4
 800591a:	d109      	bne.n	8005930 <__libc_init_array+0x24>
 800591c:	2600      	movs	r6, #0
 800591e:	f000 f935 	bl	8005b8c <_init>
 8005922:	4c0a      	ldr	r4, [pc, #40]	; (800594c <__libc_init_array+0x40>)
 8005924:	4d0a      	ldr	r5, [pc, #40]	; (8005950 <__libc_init_array+0x44>)
 8005926:	1b64      	subs	r4, r4, r5
 8005928:	10a4      	asrs	r4, r4, #2
 800592a:	42a6      	cmp	r6, r4
 800592c:	d105      	bne.n	800593a <__libc_init_array+0x2e>
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	00b3      	lsls	r3, r6, #2
 8005932:	58eb      	ldr	r3, [r5, r3]
 8005934:	4798      	blx	r3
 8005936:	3601      	adds	r6, #1
 8005938:	e7ee      	b.n	8005918 <__libc_init_array+0xc>
 800593a:	00b3      	lsls	r3, r6, #2
 800593c:	58eb      	ldr	r3, [r5, r3]
 800593e:	4798      	blx	r3
 8005940:	3601      	adds	r6, #1
 8005942:	e7f2      	b.n	800592a <__libc_init_array+0x1e>
 8005944:	08005c88 	.word	0x08005c88
 8005948:	08005c88 	.word	0x08005c88
 800594c:	08005c8c 	.word	0x08005c8c
 8005950:	08005c88 	.word	0x08005c88

08005954 <memcpy>:
 8005954:	2300      	movs	r3, #0
 8005956:	b510      	push	{r4, lr}
 8005958:	429a      	cmp	r2, r3
 800595a:	d100      	bne.n	800595e <memcpy+0xa>
 800595c:	bd10      	pop	{r4, pc}
 800595e:	5ccc      	ldrb	r4, [r1, r3]
 8005960:	54c4      	strb	r4, [r0, r3]
 8005962:	3301      	adds	r3, #1
 8005964:	e7f8      	b.n	8005958 <memcpy+0x4>

08005966 <sqrt>:
 8005966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005968:	0004      	movs	r4, r0
 800596a:	000d      	movs	r5, r1
 800596c:	f000 f822 	bl	80059b4 <__ieee754_sqrt>
 8005970:	0022      	movs	r2, r4
 8005972:	0006      	movs	r6, r0
 8005974:	000f      	movs	r7, r1
 8005976:	002b      	movs	r3, r5
 8005978:	0020      	movs	r0, r4
 800597a:	0029      	movs	r1, r5
 800597c:	f7fd f880 	bl	8002a80 <__aeabi_dcmpun>
 8005980:	2800      	cmp	r0, #0
 8005982:	d113      	bne.n	80059ac <sqrt+0x46>
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	0020      	movs	r0, r4
 800598a:	0029      	movs	r1, r5
 800598c:	f7fa fc5e 	bl	800024c <__aeabi_dcmplt>
 8005990:	2800      	cmp	r0, #0
 8005992:	d00b      	beq.n	80059ac <sqrt+0x46>
 8005994:	f7ff ffb4 	bl	8005900 <__errno>
 8005998:	2321      	movs	r3, #33	; 0x21
 800599a:	2200      	movs	r2, #0
 800599c:	6003      	str	r3, [r0, #0]
 800599e:	2300      	movs	r3, #0
 80059a0:	0010      	movs	r0, r2
 80059a2:	0019      	movs	r1, r3
 80059a4:	f7fb fe2e 	bl	8001604 <__aeabi_ddiv>
 80059a8:	0006      	movs	r6, r0
 80059aa:	000f      	movs	r7, r1
 80059ac:	0030      	movs	r0, r6
 80059ae:	0039      	movs	r1, r7
 80059b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059b4 <__ieee754_sqrt>:
 80059b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059b6:	000a      	movs	r2, r1
 80059b8:	000c      	movs	r4, r1
 80059ba:	496f      	ldr	r1, [pc, #444]	; (8005b78 <__ieee754_sqrt+0x1c4>)
 80059bc:	0005      	movs	r5, r0
 80059be:	0003      	movs	r3, r0
 80059c0:	0008      	movs	r0, r1
 80059c2:	b087      	sub	sp, #28
 80059c4:	4020      	ands	r0, r4
 80059c6:	4288      	cmp	r0, r1
 80059c8:	d111      	bne.n	80059ee <__ieee754_sqrt+0x3a>
 80059ca:	002a      	movs	r2, r5
 80059cc:	0023      	movs	r3, r4
 80059ce:	0028      	movs	r0, r5
 80059d0:	0021      	movs	r1, r4
 80059d2:	f7fc fa11 	bl	8001df8 <__aeabi_dmul>
 80059d6:	0002      	movs	r2, r0
 80059d8:	000b      	movs	r3, r1
 80059da:	0028      	movs	r0, r5
 80059dc:	0021      	movs	r1, r4
 80059de:	f7fb fab1 	bl	8000f44 <__aeabi_dadd>
 80059e2:	0005      	movs	r5, r0
 80059e4:	000c      	movs	r4, r1
 80059e6:	0028      	movs	r0, r5
 80059e8:	0021      	movs	r1, r4
 80059ea:	b007      	add	sp, #28
 80059ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	dc12      	bgt.n	8005a18 <__ieee754_sqrt+0x64>
 80059f2:	0061      	lsls	r1, r4, #1
 80059f4:	0849      	lsrs	r1, r1, #1
 80059f6:	4329      	orrs	r1, r5
 80059f8:	d0f5      	beq.n	80059e6 <__ieee754_sqrt+0x32>
 80059fa:	2100      	movs	r1, #0
 80059fc:	428c      	cmp	r4, r1
 80059fe:	d100      	bne.n	8005a02 <__ieee754_sqrt+0x4e>
 8005a00:	e09f      	b.n	8005b42 <__ieee754_sqrt+0x18e>
 8005a02:	002a      	movs	r2, r5
 8005a04:	0023      	movs	r3, r4
 8005a06:	0028      	movs	r0, r5
 8005a08:	0021      	movs	r1, r4
 8005a0a:	f7fc fcb7 	bl	800237c <__aeabi_dsub>
 8005a0e:	0002      	movs	r2, r0
 8005a10:	000b      	movs	r3, r1
 8005a12:	f7fb fdf7 	bl	8001604 <__aeabi_ddiv>
 8005a16:	e7e4      	b.n	80059e2 <__ieee754_sqrt+0x2e>
 8005a18:	1521      	asrs	r1, r4, #20
 8005a1a:	d100      	bne.n	8005a1e <__ieee754_sqrt+0x6a>
 8005a1c:	e091      	b.n	8005b42 <__ieee754_sqrt+0x18e>
 8005a1e:	4857      	ldr	r0, [pc, #348]	; (8005b7c <__ieee754_sqrt+0x1c8>)
 8005a20:	0312      	lsls	r2, r2, #12
 8005a22:	180c      	adds	r4, r1, r0
 8005a24:	2080      	movs	r0, #128	; 0x80
 8005a26:	0b12      	lsrs	r2, r2, #12
 8005a28:	0340      	lsls	r0, r0, #13
 8005a2a:	4310      	orrs	r0, r2
 8005a2c:	07c9      	lsls	r1, r1, #31
 8005a2e:	d403      	bmi.n	8005a38 <__ieee754_sqrt+0x84>
 8005a30:	0fda      	lsrs	r2, r3, #31
 8005a32:	0040      	lsls	r0, r0, #1
 8005a34:	1810      	adds	r0, r2, r0
 8005a36:	005b      	lsls	r3, r3, #1
 8005a38:	2500      	movs	r5, #0
 8005a3a:	1062      	asrs	r2, r4, #1
 8005a3c:	0040      	lsls	r0, r0, #1
 8005a3e:	2480      	movs	r4, #128	; 0x80
 8005a40:	9205      	str	r2, [sp, #20]
 8005a42:	0fda      	lsrs	r2, r3, #31
 8005a44:	1812      	adds	r2, r2, r0
 8005a46:	0029      	movs	r1, r5
 8005a48:	2016      	movs	r0, #22
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	03a4      	lsls	r4, r4, #14
 8005a4e:	190e      	adds	r6, r1, r4
 8005a50:	4296      	cmp	r6, r2
 8005a52:	dc02      	bgt.n	8005a5a <__ieee754_sqrt+0xa6>
 8005a54:	1931      	adds	r1, r6, r4
 8005a56:	1b92      	subs	r2, r2, r6
 8005a58:	192d      	adds	r5, r5, r4
 8005a5a:	0fde      	lsrs	r6, r3, #31
 8005a5c:	0052      	lsls	r2, r2, #1
 8005a5e:	3801      	subs	r0, #1
 8005a60:	18b2      	adds	r2, r6, r2
 8005a62:	005b      	lsls	r3, r3, #1
 8005a64:	0864      	lsrs	r4, r4, #1
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d1f1      	bne.n	8005a4e <__ieee754_sqrt+0x9a>
 8005a6a:	2620      	movs	r6, #32
 8005a6c:	2780      	movs	r7, #128	; 0x80
 8005a6e:	0004      	movs	r4, r0
 8005a70:	9604      	str	r6, [sp, #16]
 8005a72:	063f      	lsls	r7, r7, #24
 8005a74:	183e      	adds	r6, r7, r0
 8005a76:	46b4      	mov	ip, r6
 8005a78:	428a      	cmp	r2, r1
 8005a7a:	dc02      	bgt.n	8005a82 <__ieee754_sqrt+0xce>
 8005a7c:	d114      	bne.n	8005aa8 <__ieee754_sqrt+0xf4>
 8005a7e:	429e      	cmp	r6, r3
 8005a80:	d812      	bhi.n	8005aa8 <__ieee754_sqrt+0xf4>
 8005a82:	4660      	mov	r0, ip
 8005a84:	4666      	mov	r6, ip
 8005a86:	19c0      	adds	r0, r0, r7
 8005a88:	9100      	str	r1, [sp, #0]
 8005a8a:	2e00      	cmp	r6, #0
 8005a8c:	da03      	bge.n	8005a96 <__ieee754_sqrt+0xe2>
 8005a8e:	43c6      	mvns	r6, r0
 8005a90:	0ff6      	lsrs	r6, r6, #31
 8005a92:	198e      	adds	r6, r1, r6
 8005a94:	9600      	str	r6, [sp, #0]
 8005a96:	1a52      	subs	r2, r2, r1
 8005a98:	4563      	cmp	r3, ip
 8005a9a:	4189      	sbcs	r1, r1
 8005a9c:	4249      	negs	r1, r1
 8005a9e:	1a52      	subs	r2, r2, r1
 8005aa0:	4661      	mov	r1, ip
 8005aa2:	1a5b      	subs	r3, r3, r1
 8005aa4:	9900      	ldr	r1, [sp, #0]
 8005aa6:	19e4      	adds	r4, r4, r7
 8005aa8:	0fde      	lsrs	r6, r3, #31
 8005aaa:	0052      	lsls	r2, r2, #1
 8005aac:	18b2      	adds	r2, r6, r2
 8005aae:	9e04      	ldr	r6, [sp, #16]
 8005ab0:	005b      	lsls	r3, r3, #1
 8005ab2:	3e01      	subs	r6, #1
 8005ab4:	087f      	lsrs	r7, r7, #1
 8005ab6:	9604      	str	r6, [sp, #16]
 8005ab8:	2e00      	cmp	r6, #0
 8005aba:	d1db      	bne.n	8005a74 <__ieee754_sqrt+0xc0>
 8005abc:	431a      	orrs	r2, r3
 8005abe:	d01f      	beq.n	8005b00 <__ieee754_sqrt+0x14c>
 8005ac0:	4e2f      	ldr	r6, [pc, #188]	; (8005b80 <__ieee754_sqrt+0x1cc>)
 8005ac2:	4f30      	ldr	r7, [pc, #192]	; (8005b84 <__ieee754_sqrt+0x1d0>)
 8005ac4:	6830      	ldr	r0, [r6, #0]
 8005ac6:	6871      	ldr	r1, [r6, #4]
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	9200      	str	r2, [sp, #0]
 8005ace:	9301      	str	r3, [sp, #4]
 8005ad0:	6832      	ldr	r2, [r6, #0]
 8005ad2:	6873      	ldr	r3, [r6, #4]
 8005ad4:	9202      	str	r2, [sp, #8]
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	9a00      	ldr	r2, [sp, #0]
 8005ada:	9b01      	ldr	r3, [sp, #4]
 8005adc:	f7fc fc4e 	bl	800237c <__aeabi_dsub>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	000b      	movs	r3, r1
 8005ae4:	9802      	ldr	r0, [sp, #8]
 8005ae6:	9903      	ldr	r1, [sp, #12]
 8005ae8:	f7fa fbba 	bl	8000260 <__aeabi_dcmple>
 8005aec:	2800      	cmp	r0, #0
 8005aee:	d007      	beq.n	8005b00 <__ieee754_sqrt+0x14c>
 8005af0:	6830      	ldr	r0, [r6, #0]
 8005af2:	6871      	ldr	r1, [r6, #4]
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	1c67      	adds	r7, r4, #1
 8005afa:	d127      	bne.n	8005b4c <__ieee754_sqrt+0x198>
 8005afc:	9c04      	ldr	r4, [sp, #16]
 8005afe:	3501      	adds	r5, #1
 8005b00:	4b21      	ldr	r3, [pc, #132]	; (8005b88 <__ieee754_sqrt+0x1d4>)
 8005b02:	1069      	asrs	r1, r5, #1
 8005b04:	18c9      	adds	r1, r1, r3
 8005b06:	0864      	lsrs	r4, r4, #1
 8005b08:	07ed      	lsls	r5, r5, #31
 8005b0a:	d502      	bpl.n	8005b12 <__ieee754_sqrt+0x15e>
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	061b      	lsls	r3, r3, #24
 8005b10:	431c      	orrs	r4, r3
 8005b12:	9b05      	ldr	r3, [sp, #20]
 8005b14:	0025      	movs	r5, r4
 8005b16:	0518      	lsls	r0, r3, #20
 8005b18:	1843      	adds	r3, r0, r1
 8005b1a:	001c      	movs	r4, r3
 8005b1c:	e763      	b.n	80059e6 <__ieee754_sqrt+0x32>
 8005b1e:	0ada      	lsrs	r2, r3, #11
 8005b20:	3815      	subs	r0, #21
 8005b22:	055b      	lsls	r3, r3, #21
 8005b24:	2a00      	cmp	r2, #0
 8005b26:	d0fa      	beq.n	8005b1e <__ieee754_sqrt+0x16a>
 8005b28:	2480      	movs	r4, #128	; 0x80
 8005b2a:	0364      	lsls	r4, r4, #13
 8005b2c:	4222      	tst	r2, r4
 8005b2e:	d00a      	beq.n	8005b46 <__ieee754_sqrt+0x192>
 8005b30:	2420      	movs	r4, #32
 8005b32:	001e      	movs	r6, r3
 8005b34:	1a64      	subs	r4, r4, r1
 8005b36:	40e6      	lsrs	r6, r4
 8005b38:	1e4d      	subs	r5, r1, #1
 8005b3a:	408b      	lsls	r3, r1
 8005b3c:	4332      	orrs	r2, r6
 8005b3e:	1b41      	subs	r1, r0, r5
 8005b40:	e76d      	b.n	8005a1e <__ieee754_sqrt+0x6a>
 8005b42:	2000      	movs	r0, #0
 8005b44:	e7ee      	b.n	8005b24 <__ieee754_sqrt+0x170>
 8005b46:	0052      	lsls	r2, r2, #1
 8005b48:	3101      	adds	r1, #1
 8005b4a:	e7ef      	b.n	8005b2c <__ieee754_sqrt+0x178>
 8005b4c:	f7fb f9fa 	bl	8000f44 <__aeabi_dadd>
 8005b50:	6877      	ldr	r7, [r6, #4]
 8005b52:	6836      	ldr	r6, [r6, #0]
 8005b54:	0002      	movs	r2, r0
 8005b56:	000b      	movs	r3, r1
 8005b58:	0030      	movs	r0, r6
 8005b5a:	0039      	movs	r1, r7
 8005b5c:	f7fa fb76 	bl	800024c <__aeabi_dcmplt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d004      	beq.n	8005b6e <__ieee754_sqrt+0x1ba>
 8005b64:	3402      	adds	r4, #2
 8005b66:	4263      	negs	r3, r4
 8005b68:	4163      	adcs	r3, r4
 8005b6a:	18ed      	adds	r5, r5, r3
 8005b6c:	e7c8      	b.n	8005b00 <__ieee754_sqrt+0x14c>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	3401      	adds	r4, #1
 8005b72:	439c      	bics	r4, r3
 8005b74:	e7c4      	b.n	8005b00 <__ieee754_sqrt+0x14c>
 8005b76:	46c0      	nop			; (mov r8, r8)
 8005b78:	7ff00000 	.word	0x7ff00000
 8005b7c:	fffffc01 	.word	0xfffffc01
 8005b80:	20000068 	.word	0x20000068
 8005b84:	20000070 	.word	0x20000070
 8005b88:	3fe00000 	.word	0x3fe00000

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	46c0      	nop			; (mov r8, r8)
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
